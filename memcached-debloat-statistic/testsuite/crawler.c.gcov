        -:    0:Source:crawler.c
        -:    0:Programs:54
        -:    0:Source is newer than graph
        -:    1:/*  Copyright 2016 Netflix.
        -:    2: *
        -:    3: *  Use and distribution licensed under the BSD license.  See
        -:    4: *  the LICENSE file for full text.
        -:    5: */
        -:    6:
        -:    7:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    8:#include "memcached.h"
        -:    9:#include <sys/stat.h>
        -:   10:#include <sys/socket.h>
        -:   11:#include <sys/resource.h>
        -:   12:#include <fcntl.h>
        -:   13:#include <netinet/in.h>
        -:   14:#include <errno.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <stdio.h>
        -:   17:#include <signal.h>
        -:   18:#include <string.h>
        -:   19:#include <time.h>
        -:   20:#include <assert.h>
        -:   21:#include <unistd.h>
        -:   22:#include <poll.h>
        -:   23:
        -:   24:#define LARGEST_ID POWER_LARGEST
        -:   25:
        -:   26:typedef struct {
        -:   27:    void *c; /* original connection structure. still with source thread attached. */
        -:   28:    int sfd; /* client fd. */
        -:   29:    bipbuf_t *buf; /* output buffer */
        -:   30:    char *cbuf; /* current buffer */
        -:   31:} crawler_client_t;
        -:   32:
        -:   33:typedef struct _crawler_module_t crawler_module_t;
        -:   34:
        -:   35:typedef void (*crawler_eval_func)(crawler_module_t *cm, item *it, uint32_t hv, int slab_cls);
        -:   36:typedef int (*crawler_init_func)(crawler_module_t *cm, void *data); // TODO: init args?
        -:   37:typedef void (*crawler_deinit_func)(crawler_module_t *cm); // TODO: extra args?
        -:   38:typedef void (*crawler_doneclass_func)(crawler_module_t *cm, int slab_cls);
        -:   39:typedef void (*crawler_finalize_func)(crawler_module_t *cm);
        -:   40:
        -:   41:typedef struct {
        -:   42:    crawler_init_func init; /* run before crawl starts */
        -:   43:    crawler_eval_func eval; /* runs on an item. */
        -:   44:    crawler_doneclass_func doneclass; /* runs once per sub-crawler completion. */
        -:   45:    crawler_finalize_func finalize; /* runs once when all sub-crawlers are done. */
        -:   46:    bool needs_lock; /* whether or not we need the LRU lock held when eval is called */
        -:   47:    bool needs_client; /* whether or not to grab onto the remote client */
        -:   48:} crawler_module_reg_t;
        -:   49:
        -:   50:struct _crawler_module_t {
        -:   51:    void *data; /* opaque data pointer */
        -:   52:    crawler_client_t c;
        -:   53:    crawler_module_reg_t *mod;
        -:   54:};
        -:   55:
        -:   56:static int crawler_expired_init(crawler_module_t *cm, void *data);
        -:   57:static void crawler_expired_doneclass(crawler_module_t *cm, int slab_cls);
        -:   58:static void crawler_expired_finalize(crawler_module_t *cm);
        -:   59:static void crawler_expired_eval(crawler_module_t *cm, item *search, uint32_t hv, int i);
        -:   60:
        -:   61:crawler_module_reg_t crawler_expired_mod = {
        -:   62:    .init = crawler_expired_init,
        -:   63:    .eval = crawler_expired_eval,
        -:   64:    .doneclass = crawler_expired_doneclass,
        -:   65:    .finalize = crawler_expired_finalize,
        -:   66:    .needs_lock = true,
        -:   67:    .needs_client = false
        -:   68:};
        -:   69:
        -:   70:static void crawler_metadump_eval(crawler_module_t *cm, item *search, uint32_t hv, int i);
        -:   71:static void crawler_metadump_finalize(crawler_module_t *cm);
        -:   72:
        -:   73:crawler_module_reg_t crawler_metadump_mod = {
        -:   74:    .init = NULL,
        -:   75:    .eval = crawler_metadump_eval,
        -:   76:    .doneclass = NULL,
        -:   77:    .finalize = crawler_metadump_finalize,
        -:   78:    .needs_lock = false,
        -:   79:    .needs_client = true
        -:   80:};
        -:   81:
        -:   82:crawler_module_reg_t *crawler_mod_regs[3] = {
        -:   83:    &crawler_expired_mod,
        -:   84:    &crawler_expired_mod,
        -:   85:    &crawler_metadump_mod
        -:   86:};
        -:   87:
        -:   88:static int lru_crawler_client_getbuf(crawler_client_t *c);
        -:   89:crawler_module_t active_crawler_mod;
        -:   90:enum crawler_run_type active_crawler_type;
        -:   91:
        -:   92:static crawler crawlers[LARGEST_ID];
        -:   93:
        -:   94:static int crawler_count = 0;
        -:   95:static volatile int do_run_lru_crawler_thread = 0;
        -:   96:static int lru_crawler_initialized = 0;
        -:   97:static pthread_mutex_t lru_crawler_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   98:static pthread_cond_t  lru_crawler_cond = PTHREAD_COND_INITIALIZER;
        -:   99:#ifdef EXTSTORE
        -:  100:/* TODO: pass this around */
        -:  101:static void *storage;
        -:  102:#endif
        -:  103:
        -:  104:/* Will crawl all slab classes a minimum of once per hour */
        -:  105:#define MAX_MAINTCRAWL_WAIT 60 * 60
        -:  106:
        -:  107:/*** LRU CRAWLER THREAD ***/
        -:  108:
        -:  109:#define LRU_CRAWLER_WRITEBUF 8192
        -:  110:
    #####:  111:static void lru_crawler_close_client(crawler_client_t *c) {
        -:  112:    //fprintf(stderr, "CRAWLER: Closing client\n");
    #####:  113:    sidethread_conn_close(c->c);
    #####:  114:    c->c = NULL;
    #####:  115:    c->cbuf = NULL;
    #####:  116:    bipbuf_free(c->buf);
    #####:  117:    c->buf = NULL;
    #####:  118:}
------------------
lru_crawler_close_client:
    #####:  111:static void lru_crawler_close_client(crawler_client_t *c) {
        -:  112:    //fprintf(stderr, "CRAWLER: Closing client\n");
    #####:  113:    sidethread_conn_close(c->c);
    #####:  114:    c->c = NULL;
    #####:  115:    c->cbuf = NULL;
    #####:  116:    bipbuf_free(c->buf);
    #####:  117:    c->buf = NULL;
    #####:  118:}
------------------
lru_crawler_close_client:
    #####:  111:static void lru_crawler_close_client(crawler_client_t *c) {
        -:  112:    //fprintf(stderr, "CRAWLER: Closing client\n");
    #####:  113:    sidethread_conn_close(c->c);
    #####:  114:    c->c = NULL;
    #####:  115:    c->cbuf = NULL;
    #####:  116:    bipbuf_free(c->buf);
    #####:  117:    c->buf = NULL;
    #####:  118:}
------------------
lru_crawler_close_client:
    #####:  111:static void lru_crawler_close_client(crawler_client_t *c) {
        -:  112:    //fprintf(stderr, "CRAWLER: Closing client\n");
    #####:  113:    sidethread_conn_close(c->c);
    #####:  114:    c->c = NULL;
    #####:  115:    c->cbuf = NULL;
    #####:  116:    bipbuf_free(c->buf);
    #####:  117:    c->buf = NULL;
    #####:  118:}
------------------
        -:  119:
        3:  120:static void lru_crawler_release_client(crawler_client_t *c) {
        -:  121:    //fprintf(stderr, "CRAWLER: Closing client\n");
        3:  122:    redispatch_conn(c->c);
        3:  123:    c->c = NULL;
        3:  124:    c->cbuf = NULL;
        3:  125:    bipbuf_free(c->buf);
        3:  126:    c->buf = NULL;
        3:  127:}
------------------
lru_crawler_release_client:
        1:  120:static void lru_crawler_release_client(crawler_client_t *c) {
        -:  121:    //fprintf(stderr, "CRAWLER: Closing client\n");
        1:  122:    redispatch_conn(c->c);
        1:  123:    c->c = NULL;
        1:  124:    c->cbuf = NULL;
        1:  125:    bipbuf_free(c->buf);
        1:  126:    c->buf = NULL;
        1:  127:}
------------------
lru_crawler_release_client:
        1:  120:static void lru_crawler_release_client(crawler_client_t *c) {
        -:  121:    //fprintf(stderr, "CRAWLER: Closing client\n");
        1:  122:    redispatch_conn(c->c);
        1:  123:    c->c = NULL;
        1:  124:    c->cbuf = NULL;
        1:  125:    bipbuf_free(c->buf);
        1:  126:    c->buf = NULL;
        1:  127:}
------------------
lru_crawler_release_client:
        1:  120:static void lru_crawler_release_client(crawler_client_t *c) {
        -:  121:    //fprintf(stderr, "CRAWLER: Closing client\n");
        1:  122:    redispatch_conn(c->c);
        1:  123:    c->c = NULL;
        1:  124:    c->cbuf = NULL;
        1:  125:    bipbuf_free(c->buf);
        1:  126:    c->buf = NULL;
        1:  127:}
------------------
        -:  128:
      267:  129:static int crawler_expired_init(crawler_module_t *cm, void *data) {
      267:  130:    struct crawler_expired_data *d;
      267:  131:    if (data != NULL) {
      261:  132:        d = data;
      261:  133:        d->is_external = true;
      261:  134:        cm->data = data;
        -:  135:    } else {
        -:  136:        // allocate data.
        6:  137:        d = calloc(1, sizeof(struct crawler_expired_data));
        6:  138:        if (d == NULL) {
        -:  139:            return -1;
        -:  140:        }
        -:  141:        // init lock.
        6:  142:        pthread_mutex_init(&d->lock, NULL);
        6:  143:        d->is_external = false;
        6:  144:        d->start_time = current_time;
        -:  145:
        6:  146:        cm->data = d;
        -:  147:    }
      267:  148:    pthread_mutex_lock(&d->lock);
      267:  149:    memset(&d->crawlerstats, 0, sizeof(crawlerstats_t) * POWER_LARGEST);
    68619:  150:    for (int x = 0; x < POWER_LARGEST; x++) {
    68352:  151:        d->crawlerstats[x].start_time = current_time;
    68352:  152:        d->crawlerstats[x].run_complete = false;
        -:  153:    }
      267:  154:    pthread_mutex_unlock(&d->lock);
      267:  155:    return 0;
        -:  156:}
------------------
crawler_expired_init:
       89:  129:static int crawler_expired_init(crawler_module_t *cm, void *data) {
       89:  130:    struct crawler_expired_data *d;
       89:  131:    if (data != NULL) {
       87:  132:        d = data;
       87:  133:        d->is_external = true;
       87:  134:        cm->data = data;
        -:  135:    } else {
        -:  136:        // allocate data.
        2:  137:        d = calloc(1, sizeof(struct crawler_expired_data));
        2:  138:        if (d == NULL) {
        -:  139:            return -1;
        -:  140:        }
        -:  141:        // init lock.
        2:  142:        pthread_mutex_init(&d->lock, NULL);
        2:  143:        d->is_external = false;
        2:  144:        d->start_time = current_time;
        -:  145:
        2:  146:        cm->data = d;
        -:  147:    }
       89:  148:    pthread_mutex_lock(&d->lock);
       89:  149:    memset(&d->crawlerstats, 0, sizeof(crawlerstats_t) * POWER_LARGEST);
    22873:  150:    for (int x = 0; x < POWER_LARGEST; x++) {
    22784:  151:        d->crawlerstats[x].start_time = current_time;
    22784:  152:        d->crawlerstats[x].run_complete = false;
        -:  153:    }
       89:  154:    pthread_mutex_unlock(&d->lock);
       89:  155:    return 0;
        -:  156:}
------------------
crawler_expired_init:
       89:  129:static int crawler_expired_init(crawler_module_t *cm, void *data) {
       89:  130:    struct crawler_expired_data *d;
       89:  131:    if (data != NULL) {
       87:  132:        d = data;
       87:  133:        d->is_external = true;
       87:  134:        cm->data = data;
        -:  135:    } else {
        -:  136:        // allocate data.
        2:  137:        d = calloc(1, sizeof(struct crawler_expired_data));
        2:  138:        if (d == NULL) {
        -:  139:            return -1;
        -:  140:        }
        -:  141:        // init lock.
        2:  142:        pthread_mutex_init(&d->lock, NULL);
        2:  143:        d->is_external = false;
        2:  144:        d->start_time = current_time;
        -:  145:
        2:  146:        cm->data = d;
        -:  147:    }
       89:  148:    pthread_mutex_lock(&d->lock);
       89:  149:    memset(&d->crawlerstats, 0, sizeof(crawlerstats_t) * POWER_LARGEST);
    22873:  150:    for (int x = 0; x < POWER_LARGEST; x++) {
    22784:  151:        d->crawlerstats[x].start_time = current_time;
    22784:  152:        d->crawlerstats[x].run_complete = false;
        -:  153:    }
       89:  154:    pthread_mutex_unlock(&d->lock);
       89:  155:    return 0;
        -:  156:}
------------------
crawler_expired_init:
       89:  129:static int crawler_expired_init(crawler_module_t *cm, void *data) {
       89:  130:    struct crawler_expired_data *d;
       89:  131:    if (data != NULL) {
       87:  132:        d = data;
       87:  133:        d->is_external = true;
       87:  134:        cm->data = data;
        -:  135:    } else {
        -:  136:        // allocate data.
        2:  137:        d = calloc(1, sizeof(struct crawler_expired_data));
        2:  138:        if (d == NULL) {
        -:  139:            return -1;
        -:  140:        }
        -:  141:        // init lock.
        2:  142:        pthread_mutex_init(&d->lock, NULL);
        2:  143:        d->is_external = false;
        2:  144:        d->start_time = current_time;
        -:  145:
        2:  146:        cm->data = d;
        -:  147:    }
       89:  148:    pthread_mutex_lock(&d->lock);
       89:  149:    memset(&d->crawlerstats, 0, sizeof(crawlerstats_t) * POWER_LARGEST);
    22873:  150:    for (int x = 0; x < POWER_LARGEST; x++) {
    22784:  151:        d->crawlerstats[x].start_time = current_time;
    22784:  152:        d->crawlerstats[x].run_complete = false;
        -:  153:    }
       89:  154:    pthread_mutex_unlock(&d->lock);
       89:  155:    return 0;
        -:  156:}
------------------
        -:  157:
    66579:  158:static void crawler_expired_doneclass(crawler_module_t *cm, int slab_cls) {
    66579:  159:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
    66579:  160:    pthread_mutex_lock(&d->lock);
    66579:  161:    d->crawlerstats[slab_cls].end_time = current_time;
    66579:  162:    d->crawlerstats[slab_cls].run_complete = true;
    66579:  163:    pthread_mutex_unlock(&d->lock);
    66579:  164:}
------------------
crawler_expired_doneclass:
    22193:  158:static void crawler_expired_doneclass(crawler_module_t *cm, int slab_cls) {
    22193:  159:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
    22193:  160:    pthread_mutex_lock(&d->lock);
    22193:  161:    d->crawlerstats[slab_cls].end_time = current_time;
    22193:  162:    d->crawlerstats[slab_cls].run_complete = true;
    22193:  163:    pthread_mutex_unlock(&d->lock);
    22193:  164:}
------------------
crawler_expired_doneclass:
    22193:  158:static void crawler_expired_doneclass(crawler_module_t *cm, int slab_cls) {
    22193:  159:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
    22193:  160:    pthread_mutex_lock(&d->lock);
    22193:  161:    d->crawlerstats[slab_cls].end_time = current_time;
    22193:  162:    d->crawlerstats[slab_cls].run_complete = true;
    22193:  163:    pthread_mutex_unlock(&d->lock);
    22193:  164:}
------------------
crawler_expired_doneclass:
    22193:  158:static void crawler_expired_doneclass(crawler_module_t *cm, int slab_cls) {
    22193:  159:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
    22193:  160:    pthread_mutex_lock(&d->lock);
    22193:  161:    d->crawlerstats[slab_cls].end_time = current_time;
    22193:  162:    d->crawlerstats[slab_cls].run_complete = true;
    22193:  163:    pthread_mutex_unlock(&d->lock);
    22193:  164:}
------------------
        -:  165:
      267:  166:static void crawler_expired_finalize(crawler_module_t *cm) {
      267:  167:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
      267:  168:    pthread_mutex_lock(&d->lock);
      267:  169:    d->end_time = current_time;
      267:  170:    d->crawl_complete = true;
      267:  171:    pthread_mutex_unlock(&d->lock);
        -:  172:
      267:  173:    if (!d->is_external) {
        6:  174:        free(d);
        -:  175:    }
      267:  176:}
------------------
crawler_expired_finalize:
       89:  166:static void crawler_expired_finalize(crawler_module_t *cm) {
       89:  167:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
       89:  168:    pthread_mutex_lock(&d->lock);
       89:  169:    d->end_time = current_time;
       89:  170:    d->crawl_complete = true;
       89:  171:    pthread_mutex_unlock(&d->lock);
        -:  172:
       89:  173:    if (!d->is_external) {
        2:  174:        free(d);
        -:  175:    }
       89:  176:}
------------------
crawler_expired_finalize:
       89:  166:static void crawler_expired_finalize(crawler_module_t *cm) {
       89:  167:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
       89:  168:    pthread_mutex_lock(&d->lock);
       89:  169:    d->end_time = current_time;
       89:  170:    d->crawl_complete = true;
       89:  171:    pthread_mutex_unlock(&d->lock);
        -:  172:
       89:  173:    if (!d->is_external) {
        2:  174:        free(d);
        -:  175:    }
       89:  176:}
------------------
crawler_expired_finalize:
       89:  166:static void crawler_expired_finalize(crawler_module_t *cm) {
       89:  167:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
       89:  168:    pthread_mutex_lock(&d->lock);
       89:  169:    d->end_time = current_time;
       89:  170:    d->crawl_complete = true;
       89:  171:    pthread_mutex_unlock(&d->lock);
        -:  172:
       89:  173:    if (!d->is_external) {
        2:  174:        free(d);
        -:  175:    }
       89:  176:}
------------------
        -:  177:
        -:  178:/* I pulled this out to make the main thread clearer, but it reaches into the
        -:  179: * main thread's values too much. Should rethink again.
        -:  180: */
      360:  181:static void crawler_expired_eval(crawler_module_t *cm, item *search, uint32_t hv, int i) {
      360:  182:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
      360:  183:    pthread_mutex_lock(&d->lock);
      360:  184:    crawlerstats_t *s = &d->crawlerstats[i];
      360:  185:    int is_flushed = item_is_flushed(search);
        -:  186:#ifdef EXTSTORE
        -:  187:    bool is_valid = true;
        -:  188:    if (search->it_flags & ITEM_HDR) {
        -:  189:        item_hdr *hdr = (item_hdr *)ITEM_data(search);
        -:  190:        if (extstore_check(storage, hdr->page_id, hdr->page_version) != 0)
        -:  191:            is_valid = false;
        -:  192:    }
        -:  193:#endif
      360:  194:    if ((search->exptime != 0 && search->exptime < current_time)
      180:  195:        || is_flushed
        -:  196:#ifdef EXTSTORE
        -:  197:        || !is_valid
        -:  198:#endif
        -:  199:        ) {
      180:  200:        crawlers[i].reclaimed++;
      180:  201:        s->reclaimed++;
        -:  202:
      180:  203:        if (settings.verbose > 1) {
    #####:  204:            int ii;
    #####:  205:            char *key = ITEM_key(search);
    #####:  206:            fprintf(stderr, "LRU crawler found an expired item (flags: %d, slab: %d): ",
    #####:  207:                search->it_flags, search->slabs_clsid);
    #####:  208:            for (ii = 0; ii < search->nkey; ++ii) {
    #####:  209:                fprintf(stderr, "%c", key[ii]);
        -:  210:            }
    #####:  211:            fprintf(stderr, "\n");
        -:  212:        }
      180:  213:        if ((search->it_flags & ITEM_FETCHED) == 0 && !is_flushed) {
      180:  214:            crawlers[i].unfetched++;
        -:  215:        }
        -:  216:#ifdef EXTSTORE
        -:  217:        STORAGE_delete(storage, search);
        -:  218:#endif
      180:  219:        do_item_unlink_nolock(search, hv);
      180:  220:        do_item_remove(search);
        -:  221:    } else {
      180:  222:        s->seen++;
      180:  223:        refcount_decr(search);
      180:  224:        if (search->exptime == 0) {
       90:  225:            s->noexp++;
       90:  226:        } else if (search->exptime - current_time > 3599) {
    #####:  227:            s->ttl_hourplus++;
        -:  228:        } else {
       90:  229:            rel_time_t ttl_remain = search->exptime - current_time;
       90:  230:            int bucket = ttl_remain / 60;
       90:  231:            if (bucket <= 60) {
       90:  232:                s->histo[bucket]++;
        -:  233:            }
        -:  234:        }
        -:  235:    }
      360:  236:    pthread_mutex_unlock(&d->lock);
      360:  237:}
------------------
crawler_expired_eval:
      120:  181:static void crawler_expired_eval(crawler_module_t *cm, item *search, uint32_t hv, int i) {
      120:  182:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
      120:  183:    pthread_mutex_lock(&d->lock);
      120:  184:    crawlerstats_t *s = &d->crawlerstats[i];
      120:  185:    int is_flushed = item_is_flushed(search);
        -:  186:#ifdef EXTSTORE
        -:  187:    bool is_valid = true;
        -:  188:    if (search->it_flags & ITEM_HDR) {
        -:  189:        item_hdr *hdr = (item_hdr *)ITEM_data(search);
        -:  190:        if (extstore_check(storage, hdr->page_id, hdr->page_version) != 0)
        -:  191:            is_valid = false;
        -:  192:    }
        -:  193:#endif
      120:  194:    if ((search->exptime != 0 && search->exptime < current_time)
       60:  195:        || is_flushed
        -:  196:#ifdef EXTSTORE
        -:  197:        || !is_valid
        -:  198:#endif
        -:  199:        ) {
       60:  200:        crawlers[i].reclaimed++;
       60:  201:        s->reclaimed++;
        -:  202:
       60:  203:        if (settings.verbose > 1) {
    #####:  204:            int ii;
    #####:  205:            char *key = ITEM_key(search);
    #####:  206:            fprintf(stderr, "LRU crawler found an expired item (flags: %d, slab: %d): ",
    #####:  207:                search->it_flags, search->slabs_clsid);
    #####:  208:            for (ii = 0; ii < search->nkey; ++ii) {
    #####:  209:                fprintf(stderr, "%c", key[ii]);
        -:  210:            }
    #####:  211:            fprintf(stderr, "\n");
        -:  212:        }
       60:  213:        if ((search->it_flags & ITEM_FETCHED) == 0 && !is_flushed) {
       60:  214:            crawlers[i].unfetched++;
        -:  215:        }
        -:  216:#ifdef EXTSTORE
        -:  217:        STORAGE_delete(storage, search);
        -:  218:#endif
       60:  219:        do_item_unlink_nolock(search, hv);
       60:  220:        do_item_remove(search);
        -:  221:    } else {
       60:  222:        s->seen++;
       60:  223:        refcount_decr(search);
       60:  224:        if (search->exptime == 0) {
       30:  225:            s->noexp++;
       30:  226:        } else if (search->exptime - current_time > 3599) {
    #####:  227:            s->ttl_hourplus++;
        -:  228:        } else {
       30:  229:            rel_time_t ttl_remain = search->exptime - current_time;
       30:  230:            int bucket = ttl_remain / 60;
       30:  231:            if (bucket <= 60) {
       30:  232:                s->histo[bucket]++;
        -:  233:            }
        -:  234:        }
        -:  235:    }
      120:  236:    pthread_mutex_unlock(&d->lock);
      120:  237:}
------------------
crawler_expired_eval:
      120:  181:static void crawler_expired_eval(crawler_module_t *cm, item *search, uint32_t hv, int i) {
      120:  182:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
      120:  183:    pthread_mutex_lock(&d->lock);
      120:  184:    crawlerstats_t *s = &d->crawlerstats[i];
      120:  185:    int is_flushed = item_is_flushed(search);
        -:  186:#ifdef EXTSTORE
        -:  187:    bool is_valid = true;
        -:  188:    if (search->it_flags & ITEM_HDR) {
        -:  189:        item_hdr *hdr = (item_hdr *)ITEM_data(search);
        -:  190:        if (extstore_check(storage, hdr->page_id, hdr->page_version) != 0)
        -:  191:            is_valid = false;
        -:  192:    }
        -:  193:#endif
      120:  194:    if ((search->exptime != 0 && search->exptime < current_time)
       60:  195:        || is_flushed
        -:  196:#ifdef EXTSTORE
        -:  197:        || !is_valid
        -:  198:#endif
        -:  199:        ) {
       60:  200:        crawlers[i].reclaimed++;
       60:  201:        s->reclaimed++;
        -:  202:
       60:  203:        if (settings.verbose > 1) {
    #####:  204:            int ii;
    #####:  205:            char *key = ITEM_key(search);
    #####:  206:            fprintf(stderr, "LRU crawler found an expired item (flags: %d, slab: %d): ",
    #####:  207:                search->it_flags, search->slabs_clsid);
    #####:  208:            for (ii = 0; ii < search->nkey; ++ii) {
    #####:  209:                fprintf(stderr, "%c", key[ii]);
        -:  210:            }
    #####:  211:            fprintf(stderr, "\n");
        -:  212:        }
       60:  213:        if ((search->it_flags & ITEM_FETCHED) == 0 && !is_flushed) {
       60:  214:            crawlers[i].unfetched++;
        -:  215:        }
        -:  216:#ifdef EXTSTORE
        -:  217:        STORAGE_delete(storage, search);
        -:  218:#endif
       60:  219:        do_item_unlink_nolock(search, hv);
       60:  220:        do_item_remove(search);
        -:  221:    } else {
       60:  222:        s->seen++;
       60:  223:        refcount_decr(search);
       60:  224:        if (search->exptime == 0) {
       30:  225:            s->noexp++;
       30:  226:        } else if (search->exptime - current_time > 3599) {
    #####:  227:            s->ttl_hourplus++;
        -:  228:        } else {
       30:  229:            rel_time_t ttl_remain = search->exptime - current_time;
       30:  230:            int bucket = ttl_remain / 60;
       30:  231:            if (bucket <= 60) {
       30:  232:                s->histo[bucket]++;
        -:  233:            }
        -:  234:        }
        -:  235:    }
      120:  236:    pthread_mutex_unlock(&d->lock);
      120:  237:}
------------------
crawler_expired_eval:
      120:  181:static void crawler_expired_eval(crawler_module_t *cm, item *search, uint32_t hv, int i) {
      120:  182:    struct crawler_expired_data *d = (struct crawler_expired_data *) cm->data;
      120:  183:    pthread_mutex_lock(&d->lock);
      120:  184:    crawlerstats_t *s = &d->crawlerstats[i];
      120:  185:    int is_flushed = item_is_flushed(search);
        -:  186:#ifdef EXTSTORE
        -:  187:    bool is_valid = true;
        -:  188:    if (search->it_flags & ITEM_HDR) {
        -:  189:        item_hdr *hdr = (item_hdr *)ITEM_data(search);
        -:  190:        if (extstore_check(storage, hdr->page_id, hdr->page_version) != 0)
        -:  191:            is_valid = false;
        -:  192:    }
        -:  193:#endif
      120:  194:    if ((search->exptime != 0 && search->exptime < current_time)
       60:  195:        || is_flushed
        -:  196:#ifdef EXTSTORE
        -:  197:        || !is_valid
        -:  198:#endif
        -:  199:        ) {
       60:  200:        crawlers[i].reclaimed++;
       60:  201:        s->reclaimed++;
        -:  202:
       60:  203:        if (settings.verbose > 1) {
    #####:  204:            int ii;
    #####:  205:            char *key = ITEM_key(search);
    #####:  206:            fprintf(stderr, "LRU crawler found an expired item (flags: %d, slab: %d): ",
    #####:  207:                search->it_flags, search->slabs_clsid);
    #####:  208:            for (ii = 0; ii < search->nkey; ++ii) {
    #####:  209:                fprintf(stderr, "%c", key[ii]);
        -:  210:            }
    #####:  211:            fprintf(stderr, "\n");
        -:  212:        }
       60:  213:        if ((search->it_flags & ITEM_FETCHED) == 0 && !is_flushed) {
       60:  214:            crawlers[i].unfetched++;
        -:  215:        }
        -:  216:#ifdef EXTSTORE
        -:  217:        STORAGE_delete(storage, search);
        -:  218:#endif
       60:  219:        do_item_unlink_nolock(search, hv);
       60:  220:        do_item_remove(search);
        -:  221:    } else {
       60:  222:        s->seen++;
       60:  223:        refcount_decr(search);
       60:  224:        if (search->exptime == 0) {
       30:  225:            s->noexp++;
       30:  226:        } else if (search->exptime - current_time > 3599) {
    #####:  227:            s->ttl_hourplus++;
        -:  228:        } else {
       30:  229:            rel_time_t ttl_remain = search->exptime - current_time;
       30:  230:            int bucket = ttl_remain / 60;
       30:  231:            if (bucket <= 60) {
       30:  232:                s->histo[bucket]++;
        -:  233:            }
        -:  234:        }
        -:  235:    }
      120:  236:    pthread_mutex_unlock(&d->lock);
      120:  237:}
------------------
        -:  238:
      180:  239:static void crawler_metadump_eval(crawler_module_t *cm, item *it, uint32_t hv, int i) {
        -:  240:    //int slab_id = CLEAR_LRU(i);
      180:  241:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
      180:  242:    int is_flushed = item_is_flushed(it);
        -:  243:    /* Ignore expired content. */
      180:  244:    if ((it->exptime != 0 && it->exptime < current_time)
      180:  245:        || is_flushed) {
    #####:  246:        refcount_decr(it);
    #####:  247:        return;
        -:  248:    }
        -:  249:    // TODO: uriencode directly into the buffer.
      180:  250:    uriencode(ITEM_key(it), keybuf, it->nkey, KEY_MAX_URI_ENCODED_LENGTH);
      360:  251:    int total = snprintf(cm->c.cbuf, 4096,
        -:  252:            "key=%s exp=%ld la=%llu cas=%llu fetch=%s cls=%u size=%lu\n",
        -:  253:            keybuf,
       90:  254:            (it->exptime == 0) ? -1 : (long)(it->exptime + process_started),
      180:  255:            (unsigned long long)(it->time + process_started),
        -:  256:            (unsigned long long)ITEM_get_cas(it),
        -:  257:            (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
      180:  258:            ITEM_clsid(it),
      180:  259:            (unsigned long) ITEM_ntotal(it));
      180:  260:    refcount_decr(it);
        -:  261:    // TODO: some way of tracking the errors. these are very unlikely though.
      180:  262:    if (total >= LRU_CRAWLER_WRITEBUF - 1 || total <= 0) {
        -:  263:        /* Failed to write, don't push it. */
        -:  264:        return;
        -:  265:    }
      180:  266:    bipbuf_push(cm->c.buf, total);
        -:  267:}
------------------
crawler_metadump_eval:
       60:  239:static void crawler_metadump_eval(crawler_module_t *cm, item *it, uint32_t hv, int i) {
        -:  240:    //int slab_id = CLEAR_LRU(i);
       60:  241:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
       60:  242:    int is_flushed = item_is_flushed(it);
        -:  243:    /* Ignore expired content. */
       60:  244:    if ((it->exptime != 0 && it->exptime < current_time)
       60:  245:        || is_flushed) {
    #####:  246:        refcount_decr(it);
    #####:  247:        return;
        -:  248:    }
        -:  249:    // TODO: uriencode directly into the buffer.
       60:  250:    uriencode(ITEM_key(it), keybuf, it->nkey, KEY_MAX_URI_ENCODED_LENGTH);
      120:  251:    int total = snprintf(cm->c.cbuf, 4096,
        -:  252:            "key=%s exp=%ld la=%llu cas=%llu fetch=%s cls=%u size=%lu\n",
        -:  253:            keybuf,
       30:  254:            (it->exptime == 0) ? -1 : (long)(it->exptime + process_started),
       60:  255:            (unsigned long long)(it->time + process_started),
        -:  256:            (unsigned long long)ITEM_get_cas(it),
        -:  257:            (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
       60:  258:            ITEM_clsid(it),
       60:  259:            (unsigned long) ITEM_ntotal(it));
       60:  260:    refcount_decr(it);
        -:  261:    // TODO: some way of tracking the errors. these are very unlikely though.
       60:  262:    if (total >= LRU_CRAWLER_WRITEBUF - 1 || total <= 0) {
        -:  263:        /* Failed to write, don't push it. */
        -:  264:        return;
        -:  265:    }
       60:  266:    bipbuf_push(cm->c.buf, total);
        -:  267:}
------------------
crawler_metadump_eval:
       60:  239:static void crawler_metadump_eval(crawler_module_t *cm, item *it, uint32_t hv, int i) {
        -:  240:    //int slab_id = CLEAR_LRU(i);
       60:  241:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
       60:  242:    int is_flushed = item_is_flushed(it);
        -:  243:    /* Ignore expired content. */
       60:  244:    if ((it->exptime != 0 && it->exptime < current_time)
       60:  245:        || is_flushed) {
    #####:  246:        refcount_decr(it);
    #####:  247:        return;
        -:  248:    }
        -:  249:    // TODO: uriencode directly into the buffer.
       60:  250:    uriencode(ITEM_key(it), keybuf, it->nkey, KEY_MAX_URI_ENCODED_LENGTH);
      120:  251:    int total = snprintf(cm->c.cbuf, 4096,
        -:  252:            "key=%s exp=%ld la=%llu cas=%llu fetch=%s cls=%u size=%lu\n",
        -:  253:            keybuf,
       30:  254:            (it->exptime == 0) ? -1 : (long)(it->exptime + process_started),
       60:  255:            (unsigned long long)(it->time + process_started),
        -:  256:            (unsigned long long)ITEM_get_cas(it),
        -:  257:            (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
       60:  258:            ITEM_clsid(it),
       60:  259:            (unsigned long) ITEM_ntotal(it));
       60:  260:    refcount_decr(it);
        -:  261:    // TODO: some way of tracking the errors. these are very unlikely though.
       60:  262:    if (total >= LRU_CRAWLER_WRITEBUF - 1 || total <= 0) {
        -:  263:        /* Failed to write, don't push it. */
        -:  264:        return;
        -:  265:    }
       60:  266:    bipbuf_push(cm->c.buf, total);
        -:  267:}
------------------
crawler_metadump_eval:
       60:  239:static void crawler_metadump_eval(crawler_module_t *cm, item *it, uint32_t hv, int i) {
        -:  240:    //int slab_id = CLEAR_LRU(i);
       60:  241:    char keybuf[KEY_MAX_URI_ENCODED_LENGTH];
       60:  242:    int is_flushed = item_is_flushed(it);
        -:  243:    /* Ignore expired content. */
       60:  244:    if ((it->exptime != 0 && it->exptime < current_time)
       60:  245:        || is_flushed) {
    #####:  246:        refcount_decr(it);
    #####:  247:        return;
        -:  248:    }
        -:  249:    // TODO: uriencode directly into the buffer.
       60:  250:    uriencode(ITEM_key(it), keybuf, it->nkey, KEY_MAX_URI_ENCODED_LENGTH);
      120:  251:    int total = snprintf(cm->c.cbuf, 4096,
        -:  252:            "key=%s exp=%ld la=%llu cas=%llu fetch=%s cls=%u size=%lu\n",
        -:  253:            keybuf,
       30:  254:            (it->exptime == 0) ? -1 : (long)(it->exptime + process_started),
       60:  255:            (unsigned long long)(it->time + process_started),
        -:  256:            (unsigned long long)ITEM_get_cas(it),
        -:  257:            (it->it_flags & ITEM_FETCHED) ? "yes" : "no",
       60:  258:            ITEM_clsid(it),
       60:  259:            (unsigned long) ITEM_ntotal(it));
       60:  260:    refcount_decr(it);
        -:  261:    // TODO: some way of tracking the errors. these are very unlikely though.
       60:  262:    if (total >= LRU_CRAWLER_WRITEBUF - 1 || total <= 0) {
        -:  263:        /* Failed to write, don't push it. */
        -:  264:        return;
        -:  265:    }
       60:  266:    bipbuf_push(cm->c.buf, total);
        -:  267:}
------------------
        -:  268:
        3:  269:static void crawler_metadump_finalize(crawler_module_t *cm) {
        3:  270:    if (cm->c.c != NULL) {
        -:  271:        // Ensure space for final message.
        3:  272:        lru_crawler_client_getbuf(&cm->c);
        3:  273:        memcpy(cm->c.cbuf, "END\r\n", 5);
        3:  274:        bipbuf_push(cm->c.buf, 5);
        -:  275:    }
        3:  276:}
------------------
crawler_metadump_finalize:
        1:  269:static void crawler_metadump_finalize(crawler_module_t *cm) {
        1:  270:    if (cm->c.c != NULL) {
        -:  271:        // Ensure space for final message.
        1:  272:        lru_crawler_client_getbuf(&cm->c);
        1:  273:        memcpy(cm->c.cbuf, "END\r\n", 5);
        1:  274:        bipbuf_push(cm->c.buf, 5);
        -:  275:    }
        1:  276:}
------------------
crawler_metadump_finalize:
        1:  269:static void crawler_metadump_finalize(crawler_module_t *cm) {
        1:  270:    if (cm->c.c != NULL) {
        -:  271:        // Ensure space for final message.
        1:  272:        lru_crawler_client_getbuf(&cm->c);
        1:  273:        memcpy(cm->c.cbuf, "END\r\n", 5);
        1:  274:        bipbuf_push(cm->c.buf, 5);
        -:  275:    }
        1:  276:}
------------------
crawler_metadump_finalize:
        1:  269:static void crawler_metadump_finalize(crawler_module_t *cm) {
        1:  270:    if (cm->c.c != NULL) {
        -:  271:        // Ensure space for final message.
        1:  272:        lru_crawler_client_getbuf(&cm->c);
        1:  273:        memcpy(cm->c.cbuf, "END\r\n", 5);
        1:  274:        bipbuf_push(cm->c.buf, 5);
        -:  275:    }
        1:  276:}
------------------
        -:  277:
        3:  278:static int lru_crawler_poll(crawler_client_t *c) {
        3:  279:    unsigned char *data;
        3:  280:    unsigned int data_size = 0;
        3:  281:    struct pollfd to_poll[1];
        3:  282:    to_poll[0].fd = c->sfd;
        3:  283:    to_poll[0].events = POLLOUT;
        -:  284:
        3:  285:    int ret = poll(to_poll, 1, 1000);
        -:  286:
        3:  287:    if (ret < 0) {
        -:  288:        // fatal.
        -:  289:        return -1;
        -:  290:    }
        -:  291:
        3:  292:    if (ret == 0) return 0;
        -:  293:
        3:  294:    if (to_poll[0].revents & POLLIN) {
    #####:  295:        char buf[1];
    #####:  296:        int res = ((conn*)c->c)->read(c->c, buf, 1);
    #####:  297:        if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
    #####:  298:            lru_crawler_close_client(c);
    #####:  299:            return -1;
        -:  300:        }
        -:  301:    }
        3:  302:    if ((data = bipbuf_peek_all(c->buf, &data_size)) != NULL) {
        3:  303:        if (to_poll[0].revents & (POLLHUP|POLLERR)) {
    #####:  304:            lru_crawler_close_client(c);
    #####:  305:            return -1;
        3:  306:        } else if (to_poll[0].revents & POLLOUT) {
        3:  307:            int total = ((conn*)c->c)->write(c->c, data, data_size);
        3:  308:            if (total == -1) {
    #####:  309:                if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  310:                    lru_crawler_close_client(c);
    #####:  311:                    return -1;
        -:  312:                }
        3:  313:            } else if (total == 0) {
    #####:  314:                lru_crawler_close_client(c);
    #####:  315:                return -1;
        -:  316:            } else {
        3:  317:                bipbuf_poll(c->buf, total);
        -:  318:            }
        -:  319:        }
        -:  320:    }
        -:  321:    return 0;
        -:  322:}
------------------
lru_crawler_poll:
        1:  278:static int lru_crawler_poll(crawler_client_t *c) {
        1:  279:    unsigned char *data;
        1:  280:    unsigned int data_size = 0;
        1:  281:    struct pollfd to_poll[1];
        1:  282:    to_poll[0].fd = c->sfd;
        1:  283:    to_poll[0].events = POLLOUT;
        -:  284:
        1:  285:    int ret = poll(to_poll, 1, 1000);
        -:  286:
        1:  287:    if (ret < 0) {
        -:  288:        // fatal.
        -:  289:        return -1;
        -:  290:    }
        -:  291:
        1:  292:    if (ret == 0) return 0;
        -:  293:
        1:  294:    if (to_poll[0].revents & POLLIN) {
    #####:  295:        char buf[1];
    #####:  296:        int res = ((conn*)c->c)->read(c->c, buf, 1);
    #####:  297:        if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
    #####:  298:            lru_crawler_close_client(c);
    #####:  299:            return -1;
        -:  300:        }
        -:  301:    }
        1:  302:    if ((data = bipbuf_peek_all(c->buf, &data_size)) != NULL) {
        1:  303:        if (to_poll[0].revents & (POLLHUP|POLLERR)) {
    #####:  304:            lru_crawler_close_client(c);
    #####:  305:            return -1;
        1:  306:        } else if (to_poll[0].revents & POLLOUT) {
        1:  307:            int total = ((conn*)c->c)->write(c->c, data, data_size);
        1:  308:            if (total == -1) {
    #####:  309:                if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  310:                    lru_crawler_close_client(c);
    #####:  311:                    return -1;
        -:  312:                }
        1:  313:            } else if (total == 0) {
    #####:  314:                lru_crawler_close_client(c);
    #####:  315:                return -1;
        -:  316:            } else {
        1:  317:                bipbuf_poll(c->buf, total);
        -:  318:            }
        -:  319:        }
        -:  320:    }
        -:  321:    return 0;
        -:  322:}
------------------
lru_crawler_poll:
        1:  278:static int lru_crawler_poll(crawler_client_t *c) {
        1:  279:    unsigned char *data;
        1:  280:    unsigned int data_size = 0;
        1:  281:    struct pollfd to_poll[1];
        1:  282:    to_poll[0].fd = c->sfd;
        1:  283:    to_poll[0].events = POLLOUT;
        -:  284:
        1:  285:    int ret = poll(to_poll, 1, 1000);
        -:  286:
        1:  287:    if (ret < 0) {
        -:  288:        // fatal.
        -:  289:        return -1;
        -:  290:    }
        -:  291:
        1:  292:    if (ret == 0) return 0;
        -:  293:
        1:  294:    if (to_poll[0].revents & POLLIN) {
    #####:  295:        char buf[1];
    #####:  296:        int res = ((conn*)c->c)->read(c->c, buf, 1);
    #####:  297:        if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
    #####:  298:            lru_crawler_close_client(c);
    #####:  299:            return -1;
        -:  300:        }
        -:  301:    }
        1:  302:    if ((data = bipbuf_peek_all(c->buf, &data_size)) != NULL) {
        1:  303:        if (to_poll[0].revents & (POLLHUP|POLLERR)) {
    #####:  304:            lru_crawler_close_client(c);
    #####:  305:            return -1;
        1:  306:        } else if (to_poll[0].revents & POLLOUT) {
        1:  307:            int total = ((conn*)c->c)->write(c->c, data, data_size);
        1:  308:            if (total == -1) {
    #####:  309:                if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  310:                    lru_crawler_close_client(c);
    #####:  311:                    return -1;
        -:  312:                }
        1:  313:            } else if (total == 0) {
    #####:  314:                lru_crawler_close_client(c);
    #####:  315:                return -1;
        -:  316:            } else {
        1:  317:                bipbuf_poll(c->buf, total);
        -:  318:            }
        -:  319:        }
        -:  320:    }
        -:  321:    return 0;
        -:  322:}
------------------
lru_crawler_poll:
        1:  278:static int lru_crawler_poll(crawler_client_t *c) {
        1:  279:    unsigned char *data;
        1:  280:    unsigned int data_size = 0;
        1:  281:    struct pollfd to_poll[1];
        1:  282:    to_poll[0].fd = c->sfd;
        1:  283:    to_poll[0].events = POLLOUT;
        -:  284:
        1:  285:    int ret = poll(to_poll, 1, 1000);
        -:  286:
        1:  287:    if (ret < 0) {
        -:  288:        // fatal.
        -:  289:        return -1;
        -:  290:    }
        -:  291:
        1:  292:    if (ret == 0) return 0;
        -:  293:
        1:  294:    if (to_poll[0].revents & POLLIN) {
    #####:  295:        char buf[1];
    #####:  296:        int res = ((conn*)c->c)->read(c->c, buf, 1);
    #####:  297:        if (res == 0 || (res == -1 && (errno != EAGAIN && errno != EWOULDBLOCK))) {
    #####:  298:            lru_crawler_close_client(c);
    #####:  299:            return -1;
        -:  300:        }
        -:  301:    }
        1:  302:    if ((data = bipbuf_peek_all(c->buf, &data_size)) != NULL) {
        1:  303:        if (to_poll[0].revents & (POLLHUP|POLLERR)) {
    #####:  304:            lru_crawler_close_client(c);
    #####:  305:            return -1;
        1:  306:        } else if (to_poll[0].revents & POLLOUT) {
        1:  307:            int total = ((conn*)c->c)->write(c->c, data, data_size);
        1:  308:            if (total == -1) {
    #####:  309:                if (errno != EAGAIN && errno != EWOULDBLOCK) {
    #####:  310:                    lru_crawler_close_client(c);
    #####:  311:                    return -1;
        -:  312:                }
        1:  313:            } else if (total == 0) {
    #####:  314:                lru_crawler_close_client(c);
    #####:  315:                return -1;
        -:  316:            } else {
        1:  317:                bipbuf_poll(c->buf, total);
        -:  318:            }
        -:  319:        }
        -:  320:    }
        -:  321:    return 0;
        -:  322:}
------------------
        -:  323:
        -:  324:/* Grab some space to work with, if none exists, run the poll() loop and wait
        -:  325: * for it to clear up or close.
        -:  326: * Return NULL if closed.
        -:  327: */
      948:  328:static int lru_crawler_client_getbuf(crawler_client_t *c) {
      948:  329:    void *buf = NULL;
      948:  330:    if (c->c == NULL) return -1;
        -:  331:    /* not enough space. */
      948:  332:    while ((buf = bipbuf_request(c->buf, LRU_CRAWLER_WRITEBUF)) == NULL) {
        -:  333:        // TODO: max loops before closing.
    #####:  334:        int ret = lru_crawler_poll(c);
    #####:  335:        if (ret < 0) return ret;
        -:  336:    }
        -:  337:
      948:  338:    c->cbuf = buf;
      948:  339:    return 0;
        -:  340:}
------------------
lru_crawler_client_getbuf:
      316:  328:static int lru_crawler_client_getbuf(crawler_client_t *c) {
      316:  329:    void *buf = NULL;
      316:  330:    if (c->c == NULL) return -1;
        -:  331:    /* not enough space. */
      316:  332:    while ((buf = bipbuf_request(c->buf, LRU_CRAWLER_WRITEBUF)) == NULL) {
        -:  333:        // TODO: max loops before closing.
    #####:  334:        int ret = lru_crawler_poll(c);
    #####:  335:        if (ret < 0) return ret;
        -:  336:    }
        -:  337:
      316:  338:    c->cbuf = buf;
      316:  339:    return 0;
        -:  340:}
------------------
lru_crawler_client_getbuf:
      316:  328:static int lru_crawler_client_getbuf(crawler_client_t *c) {
      316:  329:    void *buf = NULL;
      316:  330:    if (c->c == NULL) return -1;
        -:  331:    /* not enough space. */
      316:  332:    while ((buf = bipbuf_request(c->buf, LRU_CRAWLER_WRITEBUF)) == NULL) {
        -:  333:        // TODO: max loops before closing.
    #####:  334:        int ret = lru_crawler_poll(c);
    #####:  335:        if (ret < 0) return ret;
        -:  336:    }
        -:  337:
      316:  338:    c->cbuf = buf;
      316:  339:    return 0;
        -:  340:}
------------------
lru_crawler_client_getbuf:
      316:  328:static int lru_crawler_client_getbuf(crawler_client_t *c) {
      316:  329:    void *buf = NULL;
      316:  330:    if (c->c == NULL) return -1;
        -:  331:    /* not enough space. */
      316:  332:    while ((buf = bipbuf_request(c->buf, LRU_CRAWLER_WRITEBUF)) == NULL) {
        -:  333:        // TODO: max loops before closing.
    #####:  334:        int ret = lru_crawler_poll(c);
    #####:  335:        if (ret < 0) return ret;
        -:  336:    }
        -:  337:
      316:  338:    c->cbuf = buf;
      316:  339:    return 0;
        -:  340:}
------------------
        -:  341:
    67344:  342:static void lru_crawler_class_done(int i) {
    67344:  343:    crawlers[i].it_flags = 0;
    67344:  344:    crawler_count--;
    67344:  345:    do_item_unlinktail_q((item *)&crawlers[i]);
    67344:  346:    do_item_stats_add_crawl(i, crawlers[i].reclaimed,
        -:  347:            crawlers[i].unfetched, crawlers[i].checked);
    67344:  348:    pthread_mutex_unlock(&lru_locks[i]);
    67344:  349:    if (active_crawler_mod.mod->doneclass != NULL)
    66579:  350:        active_crawler_mod.mod->doneclass(&active_crawler_mod, i);
    67344:  351:}
------------------
lru_crawler_class_done:
    22448:  342:static void lru_crawler_class_done(int i) {
    22448:  343:    crawlers[i].it_flags = 0;
    22448:  344:    crawler_count--;
    22448:  345:    do_item_unlinktail_q((item *)&crawlers[i]);
    22448:  346:    do_item_stats_add_crawl(i, crawlers[i].reclaimed,
        -:  347:            crawlers[i].unfetched, crawlers[i].checked);
    22448:  348:    pthread_mutex_unlock(&lru_locks[i]);
    22448:  349:    if (active_crawler_mod.mod->doneclass != NULL)
    22193:  350:        active_crawler_mod.mod->doneclass(&active_crawler_mod, i);
    22448:  351:}
------------------
lru_crawler_class_done:
    22448:  342:static void lru_crawler_class_done(int i) {
    22448:  343:    crawlers[i].it_flags = 0;
    22448:  344:    crawler_count--;
    22448:  345:    do_item_unlinktail_q((item *)&crawlers[i]);
    22448:  346:    do_item_stats_add_crawl(i, crawlers[i].reclaimed,
        -:  347:            crawlers[i].unfetched, crawlers[i].checked);
    22448:  348:    pthread_mutex_unlock(&lru_locks[i]);
    22448:  349:    if (active_crawler_mod.mod->doneclass != NULL)
    22193:  350:        active_crawler_mod.mod->doneclass(&active_crawler_mod, i);
    22448:  351:}
------------------
lru_crawler_class_done:
    22448:  342:static void lru_crawler_class_done(int i) {
    22448:  343:    crawlers[i].it_flags = 0;
    22448:  344:    crawler_count--;
    22448:  345:    do_item_unlinktail_q((item *)&crawlers[i]);
    22448:  346:    do_item_stats_add_crawl(i, crawlers[i].reclaimed,
        -:  347:            crawlers[i].unfetched, crawlers[i].checked);
    22448:  348:    pthread_mutex_unlock(&lru_locks[i]);
    22448:  349:    if (active_crawler_mod.mod->doneclass != NULL)
    22193:  350:        active_crawler_mod.mod->doneclass(&active_crawler_mod, i);
    22448:  351:}
------------------
        -:  352:
      267:  353:static void *item_crawler_thread(void *arg) {
      267:  354:    int i;
      267:  355:    int crawls_persleep = settings.crawls_persleep;
        -:  356:
      267:  357:    pthread_mutex_lock(&lru_crawler_lock);
      267:  358:    pthread_cond_signal(&lru_crawler_cond);
      267:  359:    settings.lru_crawler = true;
      267:  360:    if (settings.verbose > 2)
    #####:  361:        fprintf(stderr, "Starting LRU crawler background thread\n");
      540:  362:    while (do_run_lru_crawler_thread) {
      537:  363:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
        -:  364:
     1347:  365:    while (crawler_count) {
        -:  366:        item *search = NULL;
        -:  367:        void *hold_lock = NULL;
        -:  368:
   207360:  369:        for (i = POWER_SMALLEST; i < LARGEST_ID; i++) {
   206550:  370:            if (crawlers[i].it_flags != 1) {
        -:  371:                continue;
        -:  372:            }
        -:  373:
        -:  374:            /* Get memory from bipbuf, if client has no space, flush. */
    67884:  375:            if (active_crawler_mod.c.c != NULL) {
      945:  376:                int ret = lru_crawler_client_getbuf(&active_crawler_mod.c);
      945:  377:                if (ret != 0) {
    #####:  378:                    lru_crawler_class_done(i);
    #####:  379:                    continue;
        -:  380:                }
    66939:  381:            } else if (active_crawler_mod.mod->needs_client) {
    #####:  382:                lru_crawler_class_done(i);
    #####:  383:                continue;
        -:  384:            }
    67884:  385:            pthread_mutex_lock(&lru_locks[i]);
    67884:  386:            search = do_item_crawl_q((item *)&crawlers[i]);
    67884:  387:            if (search == NULL ||
      540:  388:                (crawlers[i].remaining && --crawlers[i].remaining < 1)) {
    67344:  389:                if (settings.verbose > 2)
    #####:  390:                    fprintf(stderr, "Nothing left to crawl for %d\n", i);
    67344:  391:                lru_crawler_class_done(i);
    67344:  392:                continue;
        -:  393:            }
      540:  394:            uint32_t hv = hash(ITEM_key(search), search->nkey);
        -:  395:            /* Attempt to hash item lock the "search" item. If locked, no
        -:  396:             * other callers can incr the refcount
        -:  397:             */
      540:  398:            if ((hold_lock = item_trylock(hv)) == NULL) {
    #####:  399:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  400:                continue;
        -:  401:            }
        -:  402:            /* Now see if the item is refcount locked */
      540:  403:            if (refcount_incr(search) != 2) {
    #####:  404:                refcount_decr(search);
    #####:  405:                if (hold_lock)
    #####:  406:                    item_trylock_unlock(hold_lock);
    #####:  407:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  408:                continue;
        -:  409:            }
        -:  410:
      540:  411:            crawlers[i].checked++;
        -:  412:            /* Frees the item or decrements the refcount. */
        -:  413:            /* Interface for this could improve: do the free/decr here
        -:  414:             * instead? */
      540:  415:            if (!active_crawler_mod.mod->needs_lock) {
      180:  416:                pthread_mutex_unlock(&lru_locks[i]);
        -:  417:            }
        -:  418:
      540:  419:            active_crawler_mod.mod->eval(&active_crawler_mod, search, hv, i);
        -:  420:
      540:  421:            if (hold_lock)
      540:  422:                item_trylock_unlock(hold_lock);
      540:  423:            if (active_crawler_mod.mod->needs_lock) {
      360:  424:                pthread_mutex_unlock(&lru_locks[i]);
        -:  425:            }
        -:  426:
     540*:  427:            if (crawls_persleep-- <= 0 && settings.lru_crawler_sleep) {
    #####:  428:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  429:                usleep(settings.lru_crawler_sleep);
    #####:  430:                pthread_mutex_lock(&lru_crawler_lock);
    #####:  431:                crawls_persleep = settings.crawls_persleep;
      540:  432:            } else if (!settings.lru_crawler_sleep) {
        -:  433:                // TODO: only cycle lock every N?
    #####:  434:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  435:                pthread_mutex_lock(&lru_crawler_lock);
        -:  436:            }
        -:  437:        }
        -:  438:    }
        -:  439:
      273:  440:    if (active_crawler_mod.mod != NULL) {
      270:  441:        if (active_crawler_mod.mod->finalize != NULL)
      270:  442:            active_crawler_mod.mod->finalize(&active_crawler_mod);
      273:  443:        while (active_crawler_mod.c.c != NULL && bipbuf_used(active_crawler_mod.c.buf)) {
        3:  444:            lru_crawler_poll(&active_crawler_mod.c);
        -:  445:        }
        -:  446:        // Double checking in case the client closed during the poll
      270:  447:        if (active_crawler_mod.c.c != NULL) {
        3:  448:            lru_crawler_release_client(&active_crawler_mod.c);
        -:  449:        }
      270:  450:        active_crawler_mod.mod = NULL;
        -:  451:    }
        -:  452:
      273:  453:    if (settings.verbose > 2)
    #####:  454:        fprintf(stderr, "LRU crawler thread sleeping\n");
        -:  455:
      273:  456:    STATS_LOCK();
      273:  457:    stats_state.lru_crawler_running = false;
      273:  458:    STATS_UNLOCK();
        -:  459:    }
        3:  460:    pthread_mutex_unlock(&lru_crawler_lock);
        3:  461:    if (settings.verbose > 2)
    #####:  462:        fprintf(stderr, "LRU crawler thread stopping\n");
        -:  463:
        3:  464:    return NULL;
        -:  465:}
------------------
item_crawler_thread:
       89:  353:static void *item_crawler_thread(void *arg) {
       89:  354:    int i;
       89:  355:    int crawls_persleep = settings.crawls_persleep;
        -:  356:
       89:  357:    pthread_mutex_lock(&lru_crawler_lock);
       89:  358:    pthread_cond_signal(&lru_crawler_cond);
       89:  359:    settings.lru_crawler = true;
       89:  360:    if (settings.verbose > 2)
    #####:  361:        fprintf(stderr, "Starting LRU crawler background thread\n");
      180:  362:    while (do_run_lru_crawler_thread) {
      179:  363:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
        -:  364:
      449:  365:    while (crawler_count) {
        -:  366:        item *search = NULL;
        -:  367:        void *hold_lock = NULL;
        -:  368:
    69120:  369:        for (i = POWER_SMALLEST; i < LARGEST_ID; i++) {
    68850:  370:            if (crawlers[i].it_flags != 1) {
        -:  371:                continue;
        -:  372:            }
        -:  373:
        -:  374:            /* Get memory from bipbuf, if client has no space, flush. */
    22628:  375:            if (active_crawler_mod.c.c != NULL) {
      315:  376:                int ret = lru_crawler_client_getbuf(&active_crawler_mod.c);
      315:  377:                if (ret != 0) {
    #####:  378:                    lru_crawler_class_done(i);
    #####:  379:                    continue;
        -:  380:                }
    22313:  381:            } else if (active_crawler_mod.mod->needs_client) {
    #####:  382:                lru_crawler_class_done(i);
    #####:  383:                continue;
        -:  384:            }
    22628:  385:            pthread_mutex_lock(&lru_locks[i]);
    22628:  386:            search = do_item_crawl_q((item *)&crawlers[i]);
    22628:  387:            if (search == NULL ||
      180:  388:                (crawlers[i].remaining && --crawlers[i].remaining < 1)) {
    22448:  389:                if (settings.verbose > 2)
    #####:  390:                    fprintf(stderr, "Nothing left to crawl for %d\n", i);
    22448:  391:                lru_crawler_class_done(i);
    22448:  392:                continue;
        -:  393:            }
      180:  394:            uint32_t hv = hash(ITEM_key(search), search->nkey);
        -:  395:            /* Attempt to hash item lock the "search" item. If locked, no
        -:  396:             * other callers can incr the refcount
        -:  397:             */
      180:  398:            if ((hold_lock = item_trylock(hv)) == NULL) {
    #####:  399:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  400:                continue;
        -:  401:            }
        -:  402:            /* Now see if the item is refcount locked */
      180:  403:            if (refcount_incr(search) != 2) {
    #####:  404:                refcount_decr(search);
    #####:  405:                if (hold_lock)
    #####:  406:                    item_trylock_unlock(hold_lock);
    #####:  407:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  408:                continue;
        -:  409:            }
        -:  410:
      180:  411:            crawlers[i].checked++;
        -:  412:            /* Frees the item or decrements the refcount. */
        -:  413:            /* Interface for this could improve: do the free/decr here
        -:  414:             * instead? */
      180:  415:            if (!active_crawler_mod.mod->needs_lock) {
       60:  416:                pthread_mutex_unlock(&lru_locks[i]);
        -:  417:            }
        -:  418:
      180:  419:            active_crawler_mod.mod->eval(&active_crawler_mod, search, hv, i);
        -:  420:
      180:  421:            if (hold_lock)
      180:  422:                item_trylock_unlock(hold_lock);
      180:  423:            if (active_crawler_mod.mod->needs_lock) {
      120:  424:                pthread_mutex_unlock(&lru_locks[i]);
        -:  425:            }
        -:  426:
     180*:  427:            if (crawls_persleep-- <= 0 && settings.lru_crawler_sleep) {
    #####:  428:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  429:                usleep(settings.lru_crawler_sleep);
    #####:  430:                pthread_mutex_lock(&lru_crawler_lock);
    #####:  431:                crawls_persleep = settings.crawls_persleep;
      180:  432:            } else if (!settings.lru_crawler_sleep) {
        -:  433:                // TODO: only cycle lock every N?
    #####:  434:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  435:                pthread_mutex_lock(&lru_crawler_lock);
        -:  436:            }
        -:  437:        }
        -:  438:    }
        -:  439:
       91:  440:    if (active_crawler_mod.mod != NULL) {
       90:  441:        if (active_crawler_mod.mod->finalize != NULL)
       90:  442:            active_crawler_mod.mod->finalize(&active_crawler_mod);
       91:  443:        while (active_crawler_mod.c.c != NULL && bipbuf_used(active_crawler_mod.c.buf)) {
        1:  444:            lru_crawler_poll(&active_crawler_mod.c);
        -:  445:        }
        -:  446:        // Double checking in case the client closed during the poll
       90:  447:        if (active_crawler_mod.c.c != NULL) {
        1:  448:            lru_crawler_release_client(&active_crawler_mod.c);
        -:  449:        }
       90:  450:        active_crawler_mod.mod = NULL;
        -:  451:    }
        -:  452:
       91:  453:    if (settings.verbose > 2)
    #####:  454:        fprintf(stderr, "LRU crawler thread sleeping\n");
        -:  455:
       91:  456:    STATS_LOCK();
       91:  457:    stats_state.lru_crawler_running = false;
       91:  458:    STATS_UNLOCK();
        -:  459:    }
        1:  460:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  461:    if (settings.verbose > 2)
    #####:  462:        fprintf(stderr, "LRU crawler thread stopping\n");
        -:  463:
        1:  464:    return NULL;
        -:  465:}
------------------
item_crawler_thread:
       89:  353:static void *item_crawler_thread(void *arg) {
       89:  354:    int i;
       89:  355:    int crawls_persleep = settings.crawls_persleep;
        -:  356:
       89:  357:    pthread_mutex_lock(&lru_crawler_lock);
       89:  358:    pthread_cond_signal(&lru_crawler_cond);
       89:  359:    settings.lru_crawler = true;
       89:  360:    if (settings.verbose > 2)
    #####:  361:        fprintf(stderr, "Starting LRU crawler background thread\n");
      180:  362:    while (do_run_lru_crawler_thread) {
      179:  363:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
        -:  364:
      449:  365:    while (crawler_count) {
        -:  366:        item *search = NULL;
        -:  367:        void *hold_lock = NULL;
        -:  368:
    69120:  369:        for (i = POWER_SMALLEST; i < LARGEST_ID; i++) {
    68850:  370:            if (crawlers[i].it_flags != 1) {
        -:  371:                continue;
        -:  372:            }
        -:  373:
        -:  374:            /* Get memory from bipbuf, if client has no space, flush. */
    22628:  375:            if (active_crawler_mod.c.c != NULL) {
      315:  376:                int ret = lru_crawler_client_getbuf(&active_crawler_mod.c);
      315:  377:                if (ret != 0) {
    #####:  378:                    lru_crawler_class_done(i);
    #####:  379:                    continue;
        -:  380:                }
    22313:  381:            } else if (active_crawler_mod.mod->needs_client) {
    #####:  382:                lru_crawler_class_done(i);
    #####:  383:                continue;
        -:  384:            }
    22628:  385:            pthread_mutex_lock(&lru_locks[i]);
    22628:  386:            search = do_item_crawl_q((item *)&crawlers[i]);
    22628:  387:            if (search == NULL ||
      180:  388:                (crawlers[i].remaining && --crawlers[i].remaining < 1)) {
    22448:  389:                if (settings.verbose > 2)
    #####:  390:                    fprintf(stderr, "Nothing left to crawl for %d\n", i);
    22448:  391:                lru_crawler_class_done(i);
    22448:  392:                continue;
        -:  393:            }
      180:  394:            uint32_t hv = hash(ITEM_key(search), search->nkey);
        -:  395:            /* Attempt to hash item lock the "search" item. If locked, no
        -:  396:             * other callers can incr the refcount
        -:  397:             */
      180:  398:            if ((hold_lock = item_trylock(hv)) == NULL) {
    #####:  399:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  400:                continue;
        -:  401:            }
        -:  402:            /* Now see if the item is refcount locked */
      180:  403:            if (refcount_incr(search) != 2) {
    #####:  404:                refcount_decr(search);
    #####:  405:                if (hold_lock)
    #####:  406:                    item_trylock_unlock(hold_lock);
    #####:  407:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  408:                continue;
        -:  409:            }
        -:  410:
      180:  411:            crawlers[i].checked++;
        -:  412:            /* Frees the item or decrements the refcount. */
        -:  413:            /* Interface for this could improve: do the free/decr here
        -:  414:             * instead? */
      180:  415:            if (!active_crawler_mod.mod->needs_lock) {
       60:  416:                pthread_mutex_unlock(&lru_locks[i]);
        -:  417:            }
        -:  418:
      180:  419:            active_crawler_mod.mod->eval(&active_crawler_mod, search, hv, i);
        -:  420:
      180:  421:            if (hold_lock)
      180:  422:                item_trylock_unlock(hold_lock);
      180:  423:            if (active_crawler_mod.mod->needs_lock) {
      120:  424:                pthread_mutex_unlock(&lru_locks[i]);
        -:  425:            }
        -:  426:
     180*:  427:            if (crawls_persleep-- <= 0 && settings.lru_crawler_sleep) {
    #####:  428:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  429:                usleep(settings.lru_crawler_sleep);
    #####:  430:                pthread_mutex_lock(&lru_crawler_lock);
    #####:  431:                crawls_persleep = settings.crawls_persleep;
      180:  432:            } else if (!settings.lru_crawler_sleep) {
        -:  433:                // TODO: only cycle lock every N?
    #####:  434:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  435:                pthread_mutex_lock(&lru_crawler_lock);
        -:  436:            }
        -:  437:        }
        -:  438:    }
        -:  439:
       91:  440:    if (active_crawler_mod.mod != NULL) {
       90:  441:        if (active_crawler_mod.mod->finalize != NULL)
       90:  442:            active_crawler_mod.mod->finalize(&active_crawler_mod);
       91:  443:        while (active_crawler_mod.c.c != NULL && bipbuf_used(active_crawler_mod.c.buf)) {
        1:  444:            lru_crawler_poll(&active_crawler_mod.c);
        -:  445:        }
        -:  446:        // Double checking in case the client closed during the poll
       90:  447:        if (active_crawler_mod.c.c != NULL) {
        1:  448:            lru_crawler_release_client(&active_crawler_mod.c);
        -:  449:        }
       90:  450:        active_crawler_mod.mod = NULL;
        -:  451:    }
        -:  452:
       91:  453:    if (settings.verbose > 2)
    #####:  454:        fprintf(stderr, "LRU crawler thread sleeping\n");
        -:  455:
       91:  456:    STATS_LOCK();
       91:  457:    stats_state.lru_crawler_running = false;
       91:  458:    STATS_UNLOCK();
        -:  459:    }
        1:  460:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  461:    if (settings.verbose > 2)
    #####:  462:        fprintf(stderr, "LRU crawler thread stopping\n");
        -:  463:
        1:  464:    return NULL;
        -:  465:}
------------------
item_crawler_thread:
       89:  353:static void *item_crawler_thread(void *arg) {
       89:  354:    int i;
       89:  355:    int crawls_persleep = settings.crawls_persleep;
        -:  356:
       89:  357:    pthread_mutex_lock(&lru_crawler_lock);
       89:  358:    pthread_cond_signal(&lru_crawler_cond);
       89:  359:    settings.lru_crawler = true;
       89:  360:    if (settings.verbose > 2)
    #####:  361:        fprintf(stderr, "Starting LRU crawler background thread\n");
      180:  362:    while (do_run_lru_crawler_thread) {
      179:  363:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
        -:  364:
      449:  365:    while (crawler_count) {
        -:  366:        item *search = NULL;
        -:  367:        void *hold_lock = NULL;
        -:  368:
    69120:  369:        for (i = POWER_SMALLEST; i < LARGEST_ID; i++) {
    68850:  370:            if (crawlers[i].it_flags != 1) {
        -:  371:                continue;
        -:  372:            }
        -:  373:
        -:  374:            /* Get memory from bipbuf, if client has no space, flush. */
    22628:  375:            if (active_crawler_mod.c.c != NULL) {
      315:  376:                int ret = lru_crawler_client_getbuf(&active_crawler_mod.c);
      315:  377:                if (ret != 0) {
    #####:  378:                    lru_crawler_class_done(i);
    #####:  379:                    continue;
        -:  380:                }
    22313:  381:            } else if (active_crawler_mod.mod->needs_client) {
    #####:  382:                lru_crawler_class_done(i);
    #####:  383:                continue;
        -:  384:            }
    22628:  385:            pthread_mutex_lock(&lru_locks[i]);
    22628:  386:            search = do_item_crawl_q((item *)&crawlers[i]);
    22628:  387:            if (search == NULL ||
      180:  388:                (crawlers[i].remaining && --crawlers[i].remaining < 1)) {
    22448:  389:                if (settings.verbose > 2)
    #####:  390:                    fprintf(stderr, "Nothing left to crawl for %d\n", i);
    22448:  391:                lru_crawler_class_done(i);
    22448:  392:                continue;
        -:  393:            }
      180:  394:            uint32_t hv = hash(ITEM_key(search), search->nkey);
        -:  395:            /* Attempt to hash item lock the "search" item. If locked, no
        -:  396:             * other callers can incr the refcount
        -:  397:             */
      180:  398:            if ((hold_lock = item_trylock(hv)) == NULL) {
    #####:  399:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  400:                continue;
        -:  401:            }
        -:  402:            /* Now see if the item is refcount locked */
      180:  403:            if (refcount_incr(search) != 2) {
    #####:  404:                refcount_decr(search);
    #####:  405:                if (hold_lock)
    #####:  406:                    item_trylock_unlock(hold_lock);
    #####:  407:                pthread_mutex_unlock(&lru_locks[i]);
    #####:  408:                continue;
        -:  409:            }
        -:  410:
      180:  411:            crawlers[i].checked++;
        -:  412:            /* Frees the item or decrements the refcount. */
        -:  413:            /* Interface for this could improve: do the free/decr here
        -:  414:             * instead? */
      180:  415:            if (!active_crawler_mod.mod->needs_lock) {
       60:  416:                pthread_mutex_unlock(&lru_locks[i]);
        -:  417:            }
        -:  418:
      180:  419:            active_crawler_mod.mod->eval(&active_crawler_mod, search, hv, i);
        -:  420:
      180:  421:            if (hold_lock)
      180:  422:                item_trylock_unlock(hold_lock);
      180:  423:            if (active_crawler_mod.mod->needs_lock) {
      120:  424:                pthread_mutex_unlock(&lru_locks[i]);
        -:  425:            }
        -:  426:
     180*:  427:            if (crawls_persleep-- <= 0 && settings.lru_crawler_sleep) {
    #####:  428:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  429:                usleep(settings.lru_crawler_sleep);
    #####:  430:                pthread_mutex_lock(&lru_crawler_lock);
    #####:  431:                crawls_persleep = settings.crawls_persleep;
      180:  432:            } else if (!settings.lru_crawler_sleep) {
        -:  433:                // TODO: only cycle lock every N?
    #####:  434:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  435:                pthread_mutex_lock(&lru_crawler_lock);
        -:  436:            }
        -:  437:        }
        -:  438:    }
        -:  439:
       91:  440:    if (active_crawler_mod.mod != NULL) {
       90:  441:        if (active_crawler_mod.mod->finalize != NULL)
       90:  442:            active_crawler_mod.mod->finalize(&active_crawler_mod);
       91:  443:        while (active_crawler_mod.c.c != NULL && bipbuf_used(active_crawler_mod.c.buf)) {
        1:  444:            lru_crawler_poll(&active_crawler_mod.c);
        -:  445:        }
        -:  446:        // Double checking in case the client closed during the poll
       90:  447:        if (active_crawler_mod.c.c != NULL) {
        1:  448:            lru_crawler_release_client(&active_crawler_mod.c);
        -:  449:        }
       90:  450:        active_crawler_mod.mod = NULL;
        -:  451:    }
        -:  452:
       91:  453:    if (settings.verbose > 2)
    #####:  454:        fprintf(stderr, "LRU crawler thread sleeping\n");
        -:  455:
       91:  456:    STATS_LOCK();
       91:  457:    stats_state.lru_crawler_running = false;
       91:  458:    STATS_UNLOCK();
        -:  459:    }
        1:  460:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  461:    if (settings.verbose > 2)
    #####:  462:        fprintf(stderr, "LRU crawler thread stopping\n");
        -:  463:
        1:  464:    return NULL;
        -:  465:}
------------------
        -:  466:
        -:  467:static pthread_t item_crawler_tid;
        -:  468:
        3:  469:int stop_item_crawler_thread(void) {
        3:  470:    int ret;
        3:  471:    pthread_mutex_lock(&lru_crawler_lock);
        3:  472:    do_run_lru_crawler_thread = 0;
        3:  473:    pthread_cond_signal(&lru_crawler_cond);
        3:  474:    pthread_mutex_unlock(&lru_crawler_lock);
        3:  475:    if ((ret = pthread_join(item_crawler_tid, NULL)) != 0) {
    #####:  476:        fprintf(stderr, "Failed to stop LRU crawler thread: %s\n", strerror(ret));
    #####:  477:        return -1;
        -:  478:    }
        3:  479:    settings.lru_crawler = false;
        3:  480:    return 0;
        -:  481:}
------------------
stop_item_crawler_thread:
        1:  469:int stop_item_crawler_thread(void) {
        1:  470:    int ret;
        1:  471:    pthread_mutex_lock(&lru_crawler_lock);
        1:  472:    do_run_lru_crawler_thread = 0;
        1:  473:    pthread_cond_signal(&lru_crawler_cond);
        1:  474:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  475:    if ((ret = pthread_join(item_crawler_tid, NULL)) != 0) {
    #####:  476:        fprintf(stderr, "Failed to stop LRU crawler thread: %s\n", strerror(ret));
    #####:  477:        return -1;
        -:  478:    }
        1:  479:    settings.lru_crawler = false;
        1:  480:    return 0;
        -:  481:}
------------------
stop_item_crawler_thread:
        1:  469:int stop_item_crawler_thread(void) {
        1:  470:    int ret;
        1:  471:    pthread_mutex_lock(&lru_crawler_lock);
        1:  472:    do_run_lru_crawler_thread = 0;
        1:  473:    pthread_cond_signal(&lru_crawler_cond);
        1:  474:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  475:    if ((ret = pthread_join(item_crawler_tid, NULL)) != 0) {
    #####:  476:        fprintf(stderr, "Failed to stop LRU crawler thread: %s\n", strerror(ret));
    #####:  477:        return -1;
        -:  478:    }
        1:  479:    settings.lru_crawler = false;
        1:  480:    return 0;
        -:  481:}
------------------
stop_item_crawler_thread:
        1:  469:int stop_item_crawler_thread(void) {
        1:  470:    int ret;
        1:  471:    pthread_mutex_lock(&lru_crawler_lock);
        1:  472:    do_run_lru_crawler_thread = 0;
        1:  473:    pthread_cond_signal(&lru_crawler_cond);
        1:  474:    pthread_mutex_unlock(&lru_crawler_lock);
        1:  475:    if ((ret = pthread_join(item_crawler_tid, NULL)) != 0) {
    #####:  476:        fprintf(stderr, "Failed to stop LRU crawler thread: %s\n", strerror(ret));
    #####:  477:        return -1;
        -:  478:    }
        1:  479:    settings.lru_crawler = false;
        1:  480:    return 0;
        -:  481:}
------------------
        -:  482:
        -:  483:/* Lock dance to "block" until thread is waiting on its condition:
        -:  484: * caller locks mtx. caller spawns thread.
        -:  485: * thread blocks on mutex.
        -:  486: * caller waits on condition, releases lock.
        -:  487: * thread gets lock, sends signal.
        -:  488: * caller can't wait, as thread has lock.
        -:  489: * thread waits on condition, releases lock
        -:  490: * caller wakes on condition, gets lock.
        -:  491: * caller immediately releases lock.
        -:  492: * thread is now safely waiting on condition before the caller returns.
        -:  493: */
      267:  494:int start_item_crawler_thread(void) {
      267:  495:    int ret;
        -:  496:
      267:  497:    if (settings.lru_crawler)
        -:  498:        return -1;
      267:  499:    pthread_mutex_lock(&lru_crawler_lock);
      267:  500:    do_run_lru_crawler_thread = 1;
      267:  501:    if ((ret = pthread_create(&item_crawler_tid, NULL,
        -:  502:        item_crawler_thread, NULL)) != 0) {
    #####:  503:        fprintf(stderr, "Can't create LRU crawler thread: %s\n",
        -:  504:            strerror(ret));
    #####:  505:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  506:        return -1;
        -:  507:    }
        -:  508:    /* Avoid returning until the crawler has actually started */
      267:  509:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
      267:  510:    pthread_mutex_unlock(&lru_crawler_lock);
        -:  511:
      267:  512:    return 0;
        -:  513:}
------------------
start_item_crawler_thread:
       89:  494:int start_item_crawler_thread(void) {
       89:  495:    int ret;
        -:  496:
       89:  497:    if (settings.lru_crawler)
        -:  498:        return -1;
       89:  499:    pthread_mutex_lock(&lru_crawler_lock);
       89:  500:    do_run_lru_crawler_thread = 1;
       89:  501:    if ((ret = pthread_create(&item_crawler_tid, NULL,
        -:  502:        item_crawler_thread, NULL)) != 0) {
    #####:  503:        fprintf(stderr, "Can't create LRU crawler thread: %s\n",
        -:  504:            strerror(ret));
    #####:  505:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  506:        return -1;
        -:  507:    }
        -:  508:    /* Avoid returning until the crawler has actually started */
       89:  509:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
       89:  510:    pthread_mutex_unlock(&lru_crawler_lock);
        -:  511:
       89:  512:    return 0;
        -:  513:}
------------------
start_item_crawler_thread:
       89:  494:int start_item_crawler_thread(void) {
       89:  495:    int ret;
        -:  496:
       89:  497:    if (settings.lru_crawler)
        -:  498:        return -1;
       89:  499:    pthread_mutex_lock(&lru_crawler_lock);
       89:  500:    do_run_lru_crawler_thread = 1;
       89:  501:    if ((ret = pthread_create(&item_crawler_tid, NULL,
        -:  502:        item_crawler_thread, NULL)) != 0) {
    #####:  503:        fprintf(stderr, "Can't create LRU crawler thread: %s\n",
        -:  504:            strerror(ret));
    #####:  505:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  506:        return -1;
        -:  507:    }
        -:  508:    /* Avoid returning until the crawler has actually started */
       89:  509:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
       89:  510:    pthread_mutex_unlock(&lru_crawler_lock);
        -:  511:
       89:  512:    return 0;
        -:  513:}
------------------
start_item_crawler_thread:
       89:  494:int start_item_crawler_thread(void) {
       89:  495:    int ret;
        -:  496:
       89:  497:    if (settings.lru_crawler)
        -:  498:        return -1;
       89:  499:    pthread_mutex_lock(&lru_crawler_lock);
       89:  500:    do_run_lru_crawler_thread = 1;
       89:  501:    if ((ret = pthread_create(&item_crawler_tid, NULL,
        -:  502:        item_crawler_thread, NULL)) != 0) {
    #####:  503:        fprintf(stderr, "Can't create LRU crawler thread: %s\n",
        -:  504:            strerror(ret));
    #####:  505:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  506:        return -1;
        -:  507:    }
        -:  508:    /* Avoid returning until the crawler has actually started */
       89:  509:    pthread_cond_wait(&lru_crawler_cond, &lru_crawler_lock);
       89:  510:    pthread_mutex_unlock(&lru_crawler_lock);
        -:  511:
       89:  512:    return 0;
        -:  513:}
------------------
        -:  514:
        -:  515:/* 'remaining' is passed in so the LRU maintainer thread can scrub the whole
        -:  516: * LRU every time.
        -:  517: */
    67344:  518:static int do_lru_crawler_start(uint32_t id, uint32_t remaining) {
    67344:  519:    uint32_t sid = id;
    67344:  520:    int starts = 0;
        -:  521:
    67344:  522:    pthread_mutex_lock(&lru_locks[sid]);
    67344:  523:    if (crawlers[sid].it_flags == 0) {
    67344:  524:        if (settings.verbose > 2)
    #####:  525:            fprintf(stderr, "Kicking LRU crawler off for LRU %u\n", sid);
    67344:  526:        crawlers[sid].nbytes = 0;
    67344:  527:        crawlers[sid].nkey = 0;
    67344:  528:        crawlers[sid].it_flags = 1; /* For a crawler, this means enabled. */
    67344:  529:        crawlers[sid].next = 0;
    67344:  530:        crawlers[sid].prev = 0;
    67344:  531:        crawlers[sid].time = 0;
    67344:  532:        if (remaining == LRU_CRAWLER_CAP_REMAINING) {
      765:  533:            remaining = do_get_lru_size(sid);
        -:  534:        }
        -:  535:        /* Values for remaining:
        -:  536:         * remaining = 0
        -:  537:         * - scan all elements, until a NULL is reached
        -:  538:         * - if empty, NULL is reached right away
        -:  539:         * remaining = n + 1
        -:  540:         * - first n elements are parsed (or until a NULL is reached)
        -:  541:         */
    67344:  542:        if (remaining) remaining++;
    67344:  543:        crawlers[sid].remaining = remaining;
    67344:  544:        crawlers[sid].slabs_clsid = sid;
    67344:  545:        crawlers[sid].reclaimed = 0;
    67344:  546:        crawlers[sid].unfetched = 0;
    67344:  547:        crawlers[sid].checked = 0;
    67344:  548:        do_item_linktail_q((item *)&crawlers[sid]);
    67344:  549:        crawler_count++;
    67344:  550:        starts++;
        -:  551:    }
    67344:  552:    pthread_mutex_unlock(&lru_locks[sid]);
    67344:  553:    if (starts) {
    67344:  554:        STATS_LOCK();
    67344:  555:        stats_state.lru_crawler_running = true;
    67344:  556:        stats.lru_crawler_starts++;
    67344:  557:        STATS_UNLOCK();
        -:  558:    }
    67344:  559:    return starts;
        -:  560:}
------------------
do_lru_crawler_start:
    22448:  518:static int do_lru_crawler_start(uint32_t id, uint32_t remaining) {
    22448:  519:    uint32_t sid = id;
    22448:  520:    int starts = 0;
        -:  521:
    22448:  522:    pthread_mutex_lock(&lru_locks[sid]);
    22448:  523:    if (crawlers[sid].it_flags == 0) {
    22448:  524:        if (settings.verbose > 2)
    #####:  525:            fprintf(stderr, "Kicking LRU crawler off for LRU %u\n", sid);
    22448:  526:        crawlers[sid].nbytes = 0;
    22448:  527:        crawlers[sid].nkey = 0;
    22448:  528:        crawlers[sid].it_flags = 1; /* For a crawler, this means enabled. */
    22448:  529:        crawlers[sid].next = 0;
    22448:  530:        crawlers[sid].prev = 0;
    22448:  531:        crawlers[sid].time = 0;
    22448:  532:        if (remaining == LRU_CRAWLER_CAP_REMAINING) {
      255:  533:            remaining = do_get_lru_size(sid);
        -:  534:        }
        -:  535:        /* Values for remaining:
        -:  536:         * remaining = 0
        -:  537:         * - scan all elements, until a NULL is reached
        -:  538:         * - if empty, NULL is reached right away
        -:  539:         * remaining = n + 1
        -:  540:         * - first n elements are parsed (or until a NULL is reached)
        -:  541:         */
    22448:  542:        if (remaining) remaining++;
    22448:  543:        crawlers[sid].remaining = remaining;
    22448:  544:        crawlers[sid].slabs_clsid = sid;
    22448:  545:        crawlers[sid].reclaimed = 0;
    22448:  546:        crawlers[sid].unfetched = 0;
    22448:  547:        crawlers[sid].checked = 0;
    22448:  548:        do_item_linktail_q((item *)&crawlers[sid]);
    22448:  549:        crawler_count++;
    22448:  550:        starts++;
        -:  551:    }
    22448:  552:    pthread_mutex_unlock(&lru_locks[sid]);
    22448:  553:    if (starts) {
    22448:  554:        STATS_LOCK();
    22448:  555:        stats_state.lru_crawler_running = true;
    22448:  556:        stats.lru_crawler_starts++;
    22448:  557:        STATS_UNLOCK();
        -:  558:    }
    22448:  559:    return starts;
        -:  560:}
------------------
do_lru_crawler_start:
    22448:  518:static int do_lru_crawler_start(uint32_t id, uint32_t remaining) {
    22448:  519:    uint32_t sid = id;
    22448:  520:    int starts = 0;
        -:  521:
    22448:  522:    pthread_mutex_lock(&lru_locks[sid]);
    22448:  523:    if (crawlers[sid].it_flags == 0) {
    22448:  524:        if (settings.verbose > 2)
    #####:  525:            fprintf(stderr, "Kicking LRU crawler off for LRU %u\n", sid);
    22448:  526:        crawlers[sid].nbytes = 0;
    22448:  527:        crawlers[sid].nkey = 0;
    22448:  528:        crawlers[sid].it_flags = 1; /* For a crawler, this means enabled. */
    22448:  529:        crawlers[sid].next = 0;
    22448:  530:        crawlers[sid].prev = 0;
    22448:  531:        crawlers[sid].time = 0;
    22448:  532:        if (remaining == LRU_CRAWLER_CAP_REMAINING) {
      255:  533:            remaining = do_get_lru_size(sid);
        -:  534:        }
        -:  535:        /* Values for remaining:
        -:  536:         * remaining = 0
        -:  537:         * - scan all elements, until a NULL is reached
        -:  538:         * - if empty, NULL is reached right away
        -:  539:         * remaining = n + 1
        -:  540:         * - first n elements are parsed (or until a NULL is reached)
        -:  541:         */
    22448:  542:        if (remaining) remaining++;
    22448:  543:        crawlers[sid].remaining = remaining;
    22448:  544:        crawlers[sid].slabs_clsid = sid;
    22448:  545:        crawlers[sid].reclaimed = 0;
    22448:  546:        crawlers[sid].unfetched = 0;
    22448:  547:        crawlers[sid].checked = 0;
    22448:  548:        do_item_linktail_q((item *)&crawlers[sid]);
    22448:  549:        crawler_count++;
    22448:  550:        starts++;
        -:  551:    }
    22448:  552:    pthread_mutex_unlock(&lru_locks[sid]);
    22448:  553:    if (starts) {
    22448:  554:        STATS_LOCK();
    22448:  555:        stats_state.lru_crawler_running = true;
    22448:  556:        stats.lru_crawler_starts++;
    22448:  557:        STATS_UNLOCK();
        -:  558:    }
    22448:  559:    return starts;
        -:  560:}
------------------
do_lru_crawler_start:
    22448:  518:static int do_lru_crawler_start(uint32_t id, uint32_t remaining) {
    22448:  519:    uint32_t sid = id;
    22448:  520:    int starts = 0;
        -:  521:
    22448:  522:    pthread_mutex_lock(&lru_locks[sid]);
    22448:  523:    if (crawlers[sid].it_flags == 0) {
    22448:  524:        if (settings.verbose > 2)
    #####:  525:            fprintf(stderr, "Kicking LRU crawler off for LRU %u\n", sid);
    22448:  526:        crawlers[sid].nbytes = 0;
    22448:  527:        crawlers[sid].nkey = 0;
    22448:  528:        crawlers[sid].it_flags = 1; /* For a crawler, this means enabled. */
    22448:  529:        crawlers[sid].next = 0;
    22448:  530:        crawlers[sid].prev = 0;
    22448:  531:        crawlers[sid].time = 0;
    22448:  532:        if (remaining == LRU_CRAWLER_CAP_REMAINING) {
      255:  533:            remaining = do_get_lru_size(sid);
        -:  534:        }
        -:  535:        /* Values for remaining:
        -:  536:         * remaining = 0
        -:  537:         * - scan all elements, until a NULL is reached
        -:  538:         * - if empty, NULL is reached right away
        -:  539:         * remaining = n + 1
        -:  540:         * - first n elements are parsed (or until a NULL is reached)
        -:  541:         */
    22448:  542:        if (remaining) remaining++;
    22448:  543:        crawlers[sid].remaining = remaining;
    22448:  544:        crawlers[sid].slabs_clsid = sid;
    22448:  545:        crawlers[sid].reclaimed = 0;
    22448:  546:        crawlers[sid].unfetched = 0;
    22448:  547:        crawlers[sid].checked = 0;
    22448:  548:        do_item_linktail_q((item *)&crawlers[sid]);
    22448:  549:        crawler_count++;
    22448:  550:        starts++;
        -:  551:    }
    22448:  552:    pthread_mutex_unlock(&lru_locks[sid]);
    22448:  553:    if (starts) {
    22448:  554:        STATS_LOCK();
    22448:  555:        stats_state.lru_crawler_running = true;
    22448:  556:        stats.lru_crawler_starts++;
    22448:  557:        STATS_UNLOCK();
        -:  558:    }
    22448:  559:    return starts;
        -:  560:}
------------------
        -:  561:
        -:  562:static int lru_crawler_set_client(crawler_module_t *cm, void *c, const int sfd) {
        3:  563:    crawler_client_t *crawlc = &cm->c;
        3:  564:    if (crawlc->c != NULL) {
        -:  565:        return -1;
        -:  566:    }
        3:  567:    crawlc->c = c;
        3:  568:    crawlc->sfd = sfd;
        -:  569:
        3:  570:    crawlc->buf = bipbuf_new(1024 * 128);
        3:  571:    if (crawlc->buf == NULL) {
        -:  572:        return -2;
        -:  573:    }
        -:  574:    return 0;
        -:  575:}
        -:  576:
      270:  577:int lru_crawler_start(uint8_t *ids, uint32_t remaining,
        -:  578:                             const enum crawler_run_type type, void *data,
        -:  579:                             void *c, const int sfd) {
      270:  580:    int starts = 0;
      270:  581:    bool is_running;
      270:  582:    static rel_time_t block_ae_until = 0;
      270:  583:    pthread_mutex_lock(&lru_crawler_lock);
      270:  584:    STATS_LOCK();
      270:  585:    is_running = stats_state.lru_crawler_running;
      270:  586:    STATS_UNLOCK();
     270*:  587:    if (is_running &&
    #####:  588:            !(type == CRAWLER_AUTOEXPIRE && active_crawler_type == CRAWLER_AUTOEXPIRE)) {
    #####:  589:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  590:        block_ae_until = current_time + 60;
    #####:  591:        return -1;
        -:  592:    }
        -:  593:
      270:  594:    if (type == CRAWLER_AUTOEXPIRE && block_ae_until > current_time) {
    #####:  595:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  596:        return -1;
        -:  597:    }
        -:  598:
        -:  599:    /* Configure the module */
      270:  600:    if (!is_running) {
     270*:  601:        assert(crawler_mod_regs[type] != NULL);
      270:  602:        active_crawler_mod.mod = crawler_mod_regs[type];
      270:  603:        active_crawler_type = type;
      270:  604:        if (active_crawler_mod.mod->init != NULL) {
      267:  605:            active_crawler_mod.mod->init(&active_crawler_mod, data);
        -:  606:        }
      270:  607:        if (active_crawler_mod.mod->needs_client) {
        3:  608:            if (c == NULL || sfd == 0) {
    #####:  609:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  610:                return -2;
        -:  611:            }
        3:  612:            if (lru_crawler_set_client(&active_crawler_mod, c, sfd) != 0) {
    #####:  613:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  614:                return -2;
        -:  615:            }
        -:  616:        }
        -:  617:    }
        -:  618:
        -:  619:    /* we allow the autocrawler to restart sub-LRU's before completion */
    69120:  620:    for (int sid = POWER_SMALLEST; sid < POWER_LARGEST; sid++) {
    68850:  621:        if (ids[sid])
    67344:  622:            starts += do_lru_crawler_start(sid, remaining);
        -:  623:    }
      270:  624:    if (starts) {
      270:  625:        pthread_cond_signal(&lru_crawler_cond);
        -:  626:    }
      270:  627:    pthread_mutex_unlock(&lru_crawler_lock);
      270:  628:    return starts;
        -:  629:}
------------------
lru_crawler_start:
       90:  577:int lru_crawler_start(uint8_t *ids, uint32_t remaining,
        -:  578:                             const enum crawler_run_type type, void *data,
        -:  579:                             void *c, const int sfd) {
       90:  580:    int starts = 0;
       90:  581:    bool is_running;
       90:  582:    static rel_time_t block_ae_until = 0;
       90:  583:    pthread_mutex_lock(&lru_crawler_lock);
       90:  584:    STATS_LOCK();
       90:  585:    is_running = stats_state.lru_crawler_running;
       90:  586:    STATS_UNLOCK();
      90*:  587:    if (is_running &&
    #####:  588:            !(type == CRAWLER_AUTOEXPIRE && active_crawler_type == CRAWLER_AUTOEXPIRE)) {
    #####:  589:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  590:        block_ae_until = current_time + 60;
    #####:  591:        return -1;
        -:  592:    }
        -:  593:
       90:  594:    if (type == CRAWLER_AUTOEXPIRE && block_ae_until > current_time) {
    #####:  595:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  596:        return -1;
        -:  597:    }
        -:  598:
        -:  599:    /* Configure the module */
       90:  600:    if (!is_running) {
      90*:  601:        assert(crawler_mod_regs[type] != NULL);
       90:  602:        active_crawler_mod.mod = crawler_mod_regs[type];
       90:  603:        active_crawler_type = type;
       90:  604:        if (active_crawler_mod.mod->init != NULL) {
       89:  605:            active_crawler_mod.mod->init(&active_crawler_mod, data);
        -:  606:        }
       90:  607:        if (active_crawler_mod.mod->needs_client) {
        1:  608:            if (c == NULL || sfd == 0) {
    #####:  609:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  610:                return -2;
        -:  611:            }
        1:  612:            if (lru_crawler_set_client(&active_crawler_mod, c, sfd) != 0) {
    #####:  613:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  614:                return -2;
        -:  615:            }
        -:  616:        }
        -:  617:    }
        -:  618:
        -:  619:    /* we allow the autocrawler to restart sub-LRU's before completion */
    23040:  620:    for (int sid = POWER_SMALLEST; sid < POWER_LARGEST; sid++) {
    22950:  621:        if (ids[sid])
    22448:  622:            starts += do_lru_crawler_start(sid, remaining);
        -:  623:    }
       90:  624:    if (starts) {
       90:  625:        pthread_cond_signal(&lru_crawler_cond);
        -:  626:    }
       90:  627:    pthread_mutex_unlock(&lru_crawler_lock);
       90:  628:    return starts;
        -:  629:}
------------------
lru_crawler_start:
       90:  577:int lru_crawler_start(uint8_t *ids, uint32_t remaining,
        -:  578:                             const enum crawler_run_type type, void *data,
        -:  579:                             void *c, const int sfd) {
       90:  580:    int starts = 0;
       90:  581:    bool is_running;
       90:  582:    static rel_time_t block_ae_until = 0;
       90:  583:    pthread_mutex_lock(&lru_crawler_lock);
       90:  584:    STATS_LOCK();
       90:  585:    is_running = stats_state.lru_crawler_running;
       90:  586:    STATS_UNLOCK();
      90*:  587:    if (is_running &&
    #####:  588:            !(type == CRAWLER_AUTOEXPIRE && active_crawler_type == CRAWLER_AUTOEXPIRE)) {
    #####:  589:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  590:        block_ae_until = current_time + 60;
    #####:  591:        return -1;
        -:  592:    }
        -:  593:
       90:  594:    if (type == CRAWLER_AUTOEXPIRE && block_ae_until > current_time) {
    #####:  595:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  596:        return -1;
        -:  597:    }
        -:  598:
        -:  599:    /* Configure the module */
       90:  600:    if (!is_running) {
      90*:  601:        assert(crawler_mod_regs[type] != NULL);
       90:  602:        active_crawler_mod.mod = crawler_mod_regs[type];
       90:  603:        active_crawler_type = type;
       90:  604:        if (active_crawler_mod.mod->init != NULL) {
       89:  605:            active_crawler_mod.mod->init(&active_crawler_mod, data);
        -:  606:        }
       90:  607:        if (active_crawler_mod.mod->needs_client) {
        1:  608:            if (c == NULL || sfd == 0) {
    #####:  609:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  610:                return -2;
        -:  611:            }
        1:  612:            if (lru_crawler_set_client(&active_crawler_mod, c, sfd) != 0) {
    #####:  613:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  614:                return -2;
        -:  615:            }
        -:  616:        }
        -:  617:    }
        -:  618:
        -:  619:    /* we allow the autocrawler to restart sub-LRU's before completion */
    23040:  620:    for (int sid = POWER_SMALLEST; sid < POWER_LARGEST; sid++) {
    22950:  621:        if (ids[sid])
    22448:  622:            starts += do_lru_crawler_start(sid, remaining);
        -:  623:    }
       90:  624:    if (starts) {
       90:  625:        pthread_cond_signal(&lru_crawler_cond);
        -:  626:    }
       90:  627:    pthread_mutex_unlock(&lru_crawler_lock);
       90:  628:    return starts;
        -:  629:}
------------------
lru_crawler_start:
       90:  577:int lru_crawler_start(uint8_t *ids, uint32_t remaining,
        -:  578:                             const enum crawler_run_type type, void *data,
        -:  579:                             void *c, const int sfd) {
       90:  580:    int starts = 0;
       90:  581:    bool is_running;
       90:  582:    static rel_time_t block_ae_until = 0;
       90:  583:    pthread_mutex_lock(&lru_crawler_lock);
       90:  584:    STATS_LOCK();
       90:  585:    is_running = stats_state.lru_crawler_running;
       90:  586:    STATS_UNLOCK();
      90*:  587:    if (is_running &&
    #####:  588:            !(type == CRAWLER_AUTOEXPIRE && active_crawler_type == CRAWLER_AUTOEXPIRE)) {
    #####:  589:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  590:        block_ae_until = current_time + 60;
    #####:  591:        return -1;
        -:  592:    }
        -:  593:
       90:  594:    if (type == CRAWLER_AUTOEXPIRE && block_ae_until > current_time) {
    #####:  595:        pthread_mutex_unlock(&lru_crawler_lock);
    #####:  596:        return -1;
        -:  597:    }
        -:  598:
        -:  599:    /* Configure the module */
       90:  600:    if (!is_running) {
      90*:  601:        assert(crawler_mod_regs[type] != NULL);
       90:  602:        active_crawler_mod.mod = crawler_mod_regs[type];
       90:  603:        active_crawler_type = type;
       90:  604:        if (active_crawler_mod.mod->init != NULL) {
       89:  605:            active_crawler_mod.mod->init(&active_crawler_mod, data);
        -:  606:        }
       90:  607:        if (active_crawler_mod.mod->needs_client) {
        1:  608:            if (c == NULL || sfd == 0) {
    #####:  609:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  610:                return -2;
        -:  611:            }
        1:  612:            if (lru_crawler_set_client(&active_crawler_mod, c, sfd) != 0) {
    #####:  613:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  614:                return -2;
        -:  615:            }
        -:  616:        }
        -:  617:    }
        -:  618:
        -:  619:    /* we allow the autocrawler to restart sub-LRU's before completion */
    23040:  620:    for (int sid = POWER_SMALLEST; sid < POWER_LARGEST; sid++) {
    22950:  621:        if (ids[sid])
    22448:  622:            starts += do_lru_crawler_start(sid, remaining);
        -:  623:    }
       90:  624:    if (starts) {
       90:  625:        pthread_cond_signal(&lru_crawler_cond);
        -:  626:    }
       90:  627:    pthread_mutex_unlock(&lru_crawler_lock);
       90:  628:    return starts;
        -:  629:}
------------------
        -:  630:
        -:  631:/*
        -:  632: * Also only clear the crawlerstats once per sid.
        -:  633: */
        9:  634:enum crawler_result_type lru_crawler_crawl(char *slabs, const enum crawler_run_type type,
        -:  635:        void *c, const int sfd, unsigned int remaining) {
        9:  636:    char *b = NULL;
        9:  637:    uint32_t sid = 0;
        9:  638:    int starts = 0;
        9:  639:    uint8_t tocrawl[POWER_LARGEST];
        -:  640:
        -:  641:    /* FIXME: I added this while debugging. Don't think it's needed? */
        9:  642:    memset(tocrawl, 0, sizeof(uint8_t) * POWER_LARGEST);
        9:  643:    if (strcmp(slabs, "all") == 0) {
      771:  644:        for (sid = 0; sid < POWER_LARGEST; sid++) {
      768:  645:            tocrawl[sid] = 1;
        -:  646:        }
        -:  647:    } else {
       12:  648:        for (char *p = strtok_r(slabs, ",", &b);
        -:  649:             p != NULL;
        6:  650:             p = strtok_r(NULL, ",", &b)) {
        -:  651:
        6:  652:            if (!safe_strtoul(p, &sid) || sid < POWER_SMALLEST
        6:  653:                    || sid >= MAX_NUMBER_OF_SLAB_CLASSES) {
    #####:  654:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  655:                return CRAWLER_BADCLASS;
        -:  656:            }
        6:  657:            tocrawl[sid | TEMP_LRU] = 1;
        6:  658:            tocrawl[sid | HOT_LRU] = 1;
        6:  659:            tocrawl[sid | WARM_LRU] = 1;
        6:  660:            tocrawl[sid | COLD_LRU] = 1;
        -:  661:        }
        -:  662:    }
        -:  663:
        9:  664:    starts = lru_crawler_start(tocrawl, remaining, type, NULL, c, sfd);
        9:  665:    if (starts == -1) {
        -:  666:        return CRAWLER_RUNNING;
        9:  667:    } else if (starts == -2) {
        -:  668:        return CRAWLER_ERROR; /* FIXME: not very helpful. */
        9:  669:    } else if (starts) {
        -:  670:        return CRAWLER_OK;
        -:  671:    } else {
    #####:  672:        return CRAWLER_NOTSTARTED;
        -:  673:    }
        -:  674:}
------------------
lru_crawler_crawl:
        3:  634:enum crawler_result_type lru_crawler_crawl(char *slabs, const enum crawler_run_type type,
        -:  635:        void *c, const int sfd, unsigned int remaining) {
        3:  636:    char *b = NULL;
        3:  637:    uint32_t sid = 0;
        3:  638:    int starts = 0;
        3:  639:    uint8_t tocrawl[POWER_LARGEST];
        -:  640:
        -:  641:    /* FIXME: I added this while debugging. Don't think it's needed? */
        3:  642:    memset(tocrawl, 0, sizeof(uint8_t) * POWER_LARGEST);
        3:  643:    if (strcmp(slabs, "all") == 0) {
      257:  644:        for (sid = 0; sid < POWER_LARGEST; sid++) {
      256:  645:            tocrawl[sid] = 1;
        -:  646:        }
        -:  647:    } else {
        4:  648:        for (char *p = strtok_r(slabs, ",", &b);
        -:  649:             p != NULL;
        2:  650:             p = strtok_r(NULL, ",", &b)) {
        -:  651:
        2:  652:            if (!safe_strtoul(p, &sid) || sid < POWER_SMALLEST
        2:  653:                    || sid >= MAX_NUMBER_OF_SLAB_CLASSES) {
    #####:  654:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  655:                return CRAWLER_BADCLASS;
        -:  656:            }
        2:  657:            tocrawl[sid | TEMP_LRU] = 1;
        2:  658:            tocrawl[sid | HOT_LRU] = 1;
        2:  659:            tocrawl[sid | WARM_LRU] = 1;
        2:  660:            tocrawl[sid | COLD_LRU] = 1;
        -:  661:        }
        -:  662:    }
        -:  663:
        3:  664:    starts = lru_crawler_start(tocrawl, remaining, type, NULL, c, sfd);
        3:  665:    if (starts == -1) {
        -:  666:        return CRAWLER_RUNNING;
        3:  667:    } else if (starts == -2) {
        -:  668:        return CRAWLER_ERROR; /* FIXME: not very helpful. */
        3:  669:    } else if (starts) {
        -:  670:        return CRAWLER_OK;
        -:  671:    } else {
    #####:  672:        return CRAWLER_NOTSTARTED;
        -:  673:    }
        -:  674:}
------------------
lru_crawler_crawl:
        3:  634:enum crawler_result_type lru_crawler_crawl(char *slabs, const enum crawler_run_type type,
        -:  635:        void *c, const int sfd, unsigned int remaining) {
        3:  636:    char *b = NULL;
        3:  637:    uint32_t sid = 0;
        3:  638:    int starts = 0;
        3:  639:    uint8_t tocrawl[POWER_LARGEST];
        -:  640:
        -:  641:    /* FIXME: I added this while debugging. Don't think it's needed? */
        3:  642:    memset(tocrawl, 0, sizeof(uint8_t) * POWER_LARGEST);
        3:  643:    if (strcmp(slabs, "all") == 0) {
      257:  644:        for (sid = 0; sid < POWER_LARGEST; sid++) {
      256:  645:            tocrawl[sid] = 1;
        -:  646:        }
        -:  647:    } else {
        4:  648:        for (char *p = strtok_r(slabs, ",", &b);
        -:  649:             p != NULL;
        2:  650:             p = strtok_r(NULL, ",", &b)) {
        -:  651:
        2:  652:            if (!safe_strtoul(p, &sid) || sid < POWER_SMALLEST
        2:  653:                    || sid >= MAX_NUMBER_OF_SLAB_CLASSES) {
    #####:  654:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  655:                return CRAWLER_BADCLASS;
        -:  656:            }
        2:  657:            tocrawl[sid | TEMP_LRU] = 1;
        2:  658:            tocrawl[sid | HOT_LRU] = 1;
        2:  659:            tocrawl[sid | WARM_LRU] = 1;
        2:  660:            tocrawl[sid | COLD_LRU] = 1;
        -:  661:        }
        -:  662:    }
        -:  663:
        3:  664:    starts = lru_crawler_start(tocrawl, remaining, type, NULL, c, sfd);
        3:  665:    if (starts == -1) {
        -:  666:        return CRAWLER_RUNNING;
        3:  667:    } else if (starts == -2) {
        -:  668:        return CRAWLER_ERROR; /* FIXME: not very helpful. */
        3:  669:    } else if (starts) {
        -:  670:        return CRAWLER_OK;
        -:  671:    } else {
    #####:  672:        return CRAWLER_NOTSTARTED;
        -:  673:    }
        -:  674:}
------------------
lru_crawler_crawl:
        3:  634:enum crawler_result_type lru_crawler_crawl(char *slabs, const enum crawler_run_type type,
        -:  635:        void *c, const int sfd, unsigned int remaining) {
        3:  636:    char *b = NULL;
        3:  637:    uint32_t sid = 0;
        3:  638:    int starts = 0;
        3:  639:    uint8_t tocrawl[POWER_LARGEST];
        -:  640:
        -:  641:    /* FIXME: I added this while debugging. Don't think it's needed? */
        3:  642:    memset(tocrawl, 0, sizeof(uint8_t) * POWER_LARGEST);
        3:  643:    if (strcmp(slabs, "all") == 0) {
      257:  644:        for (sid = 0; sid < POWER_LARGEST; sid++) {
      256:  645:            tocrawl[sid] = 1;
        -:  646:        }
        -:  647:    } else {
        4:  648:        for (char *p = strtok_r(slabs, ",", &b);
        -:  649:             p != NULL;
        2:  650:             p = strtok_r(NULL, ",", &b)) {
        -:  651:
        2:  652:            if (!safe_strtoul(p, &sid) || sid < POWER_SMALLEST
        2:  653:                    || sid >= MAX_NUMBER_OF_SLAB_CLASSES) {
    #####:  654:                pthread_mutex_unlock(&lru_crawler_lock);
    #####:  655:                return CRAWLER_BADCLASS;
        -:  656:            }
        2:  657:            tocrawl[sid | TEMP_LRU] = 1;
        2:  658:            tocrawl[sid | HOT_LRU] = 1;
        2:  659:            tocrawl[sid | WARM_LRU] = 1;
        2:  660:            tocrawl[sid | COLD_LRU] = 1;
        -:  661:        }
        -:  662:    }
        -:  663:
        3:  664:    starts = lru_crawler_start(tocrawl, remaining, type, NULL, c, sfd);
        3:  665:    if (starts == -1) {
        -:  666:        return CRAWLER_RUNNING;
        3:  667:    } else if (starts == -2) {
        -:  668:        return CRAWLER_ERROR; /* FIXME: not very helpful. */
        3:  669:    } else if (starts) {
        -:  670:        return CRAWLER_OK;
        -:  671:    } else {
    #####:  672:        return CRAWLER_NOTSTARTED;
        -:  673:    }
        -:  674:}
------------------
        -:  675:
        -:  676:/* If we hold this lock, crawler can't wake up or move */
    #####:  677:void lru_crawler_pause(void) {
    #####:  678:    pthread_mutex_lock(&lru_crawler_lock);
    #####:  679:}
------------------
lru_crawler_pause:
    #####:  677:void lru_crawler_pause(void) {
    #####:  678:    pthread_mutex_lock(&lru_crawler_lock);
    #####:  679:}
------------------
lru_crawler_pause:
    #####:  677:void lru_crawler_pause(void) {
    #####:  678:    pthread_mutex_lock(&lru_crawler_lock);
    #####:  679:}
------------------
lru_crawler_pause:
    #####:  677:void lru_crawler_pause(void) {
    #####:  678:    pthread_mutex_lock(&lru_crawler_lock);
    #####:  679:}
------------------
        -:  680:
    #####:  681:void lru_crawler_resume(void) {
    #####:  682:    pthread_mutex_unlock(&lru_crawler_lock);
    #####:  683:}
------------------
lru_crawler_resume:
    #####:  681:void lru_crawler_resume(void) {
    #####:  682:    pthread_mutex_unlock(&lru_crawler_lock);
    #####:  683:}
------------------
lru_crawler_resume:
    #####:  681:void lru_crawler_resume(void) {
    #####:  682:    pthread_mutex_unlock(&lru_crawler_lock);
    #####:  683:}
------------------
lru_crawler_resume:
    #####:  681:void lru_crawler_resume(void) {
    #####:  682:    pthread_mutex_unlock(&lru_crawler_lock);
    #####:  683:}
------------------
        -:  684:
      285:  685:int init_lru_crawler(void *arg) {
      285:  686:    if (lru_crawler_initialized == 0) {
        -:  687:#ifdef EXTSTORE
        -:  688:        storage = arg;
        -:  689:#endif
      285:  690:        if (pthread_cond_init(&lru_crawler_cond, NULL) != 0) {
    #####:  691:            fprintf(stderr, "Can't initialize lru crawler condition\n");
    #####:  692:            return -1;
        -:  693:        }
      285:  694:        pthread_mutex_init(&lru_crawler_lock, NULL);
      285:  695:        active_crawler_mod.c.c = NULL;
      285:  696:        active_crawler_mod.mod = NULL;
      285:  697:        active_crawler_mod.data = NULL;
      285:  698:        lru_crawler_initialized = 1;
        -:  699:    }
        -:  700:    return 0;
        -:  701:}
