        -:    0:Source:items.c
        -:    0:Programs:72
        -:    1:/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */
        -:    2:#include "memcached.h"
        -:    3:#include "bipbuffer.h"
        -:    4:#include "slab_automove.h"
        -:    5:#ifdef EXTSTORE
        -:    6:#include "storage.h"
        -:    7:#include "slab_automove_extstore.h"
        -:    8:#endif
        -:    9:#include <sys/stat.h>
        -:   10:#include <sys/socket.h>
        -:   11:#include <sys/resource.h>
        -:   12:#include <fcntl.h>
        -:   13:#include <netinet/in.h>
        -:   14:#include <errno.h>
        -:   15:#include <stdlib.h>
        -:   16:#include <stdio.h>
        -:   17:#include <signal.h>
        -:   18:#include <string.h>
        -:   19:#include <time.h>
        -:   20:#include <assert.h>
        -:   21:#include <unistd.h>
        -:   22:#include <poll.h>
        -:   23:
        -:   24:/* Forward Declarations */
        -:   25:static void item_link_q(item *it);
        -:   26:static void item_unlink_q(item *it);
        -:   27:
        -:   28:static unsigned int lru_type_map[4] = {HOT_LRU, WARM_LRU, COLD_LRU, TEMP_LRU};
        -:   29:
        -:   30:#define LARGEST_ID POWER_LARGEST
        -:   31:typedef struct {
        -:   32:    uint64_t evicted;
        -:   33:    uint64_t evicted_nonzero;
        -:   34:    uint64_t reclaimed;
        -:   35:    uint64_t outofmemory;
        -:   36:    uint64_t tailrepairs;
        -:   37:    uint64_t expired_unfetched; /* items reclaimed but never touched */
        -:   38:    uint64_t evicted_unfetched; /* items evicted but never touched */
        -:   39:    uint64_t evicted_active; /* items evicted that should have been shuffled */
        -:   40:    uint64_t crawler_reclaimed;
        -:   41:    uint64_t crawler_items_checked;
        -:   42:    uint64_t lrutail_reflocked;
        -:   43:    uint64_t moves_to_cold;
        -:   44:    uint64_t moves_to_warm;
        -:   45:    uint64_t moves_within_lru;
        -:   46:    uint64_t direct_reclaims;
        -:   47:    uint64_t hits_to_hot;
        -:   48:    uint64_t hits_to_warm;
        -:   49:    uint64_t hits_to_cold;
        -:   50:    uint64_t hits_to_temp;
        -:   51:    rel_time_t evicted_time;
        -:   52:} itemstats_t;
        -:   53:
        -:   54:static item *heads[LARGEST_ID];
        -:   55:static item *tails[LARGEST_ID];
        -:   56:static itemstats_t itemstats[LARGEST_ID];
        -:   57:static unsigned int sizes[LARGEST_ID];
        -:   58:static uint64_t sizes_bytes[LARGEST_ID];
        -:   59:static unsigned int *stats_sizes_hist = NULL;
        -:   60:static uint64_t stats_sizes_cas_min = 0;
        -:   61:static int stats_sizes_buckets = 0;
        -:   62:
        -:   63:static volatile int do_run_lru_maintainer_thread = 0;
        -:   64:static int lru_maintainer_initialized = 0;
        -:   65:static pthread_mutex_t lru_maintainer_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   66:static pthread_mutex_t cas_id_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   67:static pthread_mutex_t stats_sizes_lock = PTHREAD_MUTEX_INITIALIZER;
        -:   68:
       12:   69:void item_stats_reset(void) {
       12:   70:    int i;
     3084:   71:    for (i = 0; i < LARGEST_ID; i++) {
     3072:   72:        pthread_mutex_lock(&lru_locks[i]);
     3072:   73:        memset(&itemstats[i], 0, sizeof(itemstats_t));
     3072:   74:        pthread_mutex_unlock(&lru_locks[i]);
        -:   75:    }
       12:   76:}
------------------
item_stats_reset:
        3:   69:void item_stats_reset(void) {
        3:   70:    int i;
      771:   71:    for (i = 0; i < LARGEST_ID; i++) {
      768:   72:        pthread_mutex_lock(&lru_locks[i]);
      768:   73:        memset(&itemstats[i], 0, sizeof(itemstats_t));
      768:   74:        pthread_mutex_unlock(&lru_locks[i]);
        -:   75:    }
        3:   76:}
------------------
item_stats_reset:
        3:   69:void item_stats_reset(void) {
        3:   70:    int i;
      771:   71:    for (i = 0; i < LARGEST_ID; i++) {
      768:   72:        pthread_mutex_lock(&lru_locks[i]);
      768:   73:        memset(&itemstats[i], 0, sizeof(itemstats_t));
      768:   74:        pthread_mutex_unlock(&lru_locks[i]);
        -:   75:    }
        3:   76:}
------------------
item_stats_reset:
        3:   69:void item_stats_reset(void) {
        3:   70:    int i;
      771:   71:    for (i = 0; i < LARGEST_ID; i++) {
      768:   72:        pthread_mutex_lock(&lru_locks[i]);
      768:   73:        memset(&itemstats[i], 0, sizeof(itemstats_t));
      768:   74:        pthread_mutex_unlock(&lru_locks[i]);
        -:   75:    }
        3:   76:}
------------------
item_stats_reset:
        3:   69:void item_stats_reset(void) {
        3:   70:    int i;
      771:   71:    for (i = 0; i < LARGEST_ID; i++) {
      768:   72:        pthread_mutex_lock(&lru_locks[i]);
      768:   73:        memset(&itemstats[i], 0, sizeof(itemstats_t));
      768:   74:        pthread_mutex_unlock(&lru_locks[i]);
        -:   75:    }
        3:   76:}
------------------
        -:   77:
        -:   78:/* called with class lru lock held */
    89792:   79:void do_item_stats_add_crawl(const int i, const uint64_t reclaimed,
        -:   80:        const uint64_t unfetched, const uint64_t checked) {
    89792:   81:    itemstats[i].crawler_reclaimed += reclaimed;
    89792:   82:    itemstats[i].expired_unfetched += unfetched;
    89792:   83:    itemstats[i].crawler_items_checked += checked;
    89792:   84:}
------------------
do_item_stats_add_crawl:
    22448:   79:void do_item_stats_add_crawl(const int i, const uint64_t reclaimed,
        -:   80:        const uint64_t unfetched, const uint64_t checked) {
    22448:   81:    itemstats[i].crawler_reclaimed += reclaimed;
    22448:   82:    itemstats[i].expired_unfetched += unfetched;
    22448:   83:    itemstats[i].crawler_items_checked += checked;
    22448:   84:}
------------------
do_item_stats_add_crawl:
    22448:   79:void do_item_stats_add_crawl(const int i, const uint64_t reclaimed,
        -:   80:        const uint64_t unfetched, const uint64_t checked) {
    22448:   81:    itemstats[i].crawler_reclaimed += reclaimed;
    22448:   82:    itemstats[i].expired_unfetched += unfetched;
    22448:   83:    itemstats[i].crawler_items_checked += checked;
    22448:   84:}
------------------
do_item_stats_add_crawl:
    22448:   79:void do_item_stats_add_crawl(const int i, const uint64_t reclaimed,
        -:   80:        const uint64_t unfetched, const uint64_t checked) {
    22448:   81:    itemstats[i].crawler_reclaimed += reclaimed;
    22448:   82:    itemstats[i].expired_unfetched += unfetched;
    22448:   83:    itemstats[i].crawler_items_checked += checked;
    22448:   84:}
------------------
do_item_stats_add_crawl:
    22448:   79:void do_item_stats_add_crawl(const int i, const uint64_t reclaimed,
        -:   80:        const uint64_t unfetched, const uint64_t checked) {
    22448:   81:    itemstats[i].crawler_reclaimed += reclaimed;
    22448:   82:    itemstats[i].expired_unfetched += unfetched;
    22448:   83:    itemstats[i].crawler_items_checked += checked;
    22448:   84:}
------------------
        -:   85:
        -:   86:typedef struct _lru_bump_buf {
        -:   87:    struct _lru_bump_buf *prev;
        -:   88:    struct _lru_bump_buf *next;
        -:   89:    pthread_mutex_t mutex;
        -:   90:    bipbuf_t *buf;
        -:   91:    uint64_t dropped;
        -:   92:} lru_bump_buf;
        -:   93:
        -:   94:typedef struct {
        -:   95:    item *it;
        -:   96:    uint32_t hv;
        -:   97:} lru_bump_entry;
        -:   98:
        -:   99:static lru_bump_buf *bump_buf_head = NULL;
        -:  100:static lru_bump_buf *bump_buf_tail = NULL;
        -:  101:static pthread_mutex_t bump_buf_lock = PTHREAD_MUTEX_INITIALIZER;
        -:  102:/* TODO: tunable? Need bench results */
        -:  103:#define LRU_BUMP_BUF_SIZE 8192
        -:  104:
        -:  105:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv);
        -:  106:static uint64_t lru_total_bumps_dropped(void);
        -:  107:
        -:  108:/* Get the next CAS id for a new item. */
        -:  109:/* TODO: refactor some atomics for this. */
   417320:  110:uint64_t get_cas_id(void) {
   417320:  111:    static uint64_t cas_id = 0;
   417320:  112:    pthread_mutex_lock(&cas_id_lock);
   417320:  113:    uint64_t next_id = ++cas_id;
   417320:  114:    pthread_mutex_unlock(&cas_id_lock);
   417320:  115:    return next_id;
        -:  116:}
------------------
get_cas_id:
   104330:  110:uint64_t get_cas_id(void) {
   104330:  111:    static uint64_t cas_id = 0;
   104330:  112:    pthread_mutex_lock(&cas_id_lock);
   104330:  113:    uint64_t next_id = ++cas_id;
   104330:  114:    pthread_mutex_unlock(&cas_id_lock);
   104330:  115:    return next_id;
        -:  116:}
------------------
get_cas_id:
   104330:  110:uint64_t get_cas_id(void) {
   104330:  111:    static uint64_t cas_id = 0;
   104330:  112:    pthread_mutex_lock(&cas_id_lock);
   104330:  113:    uint64_t next_id = ++cas_id;
   104330:  114:    pthread_mutex_unlock(&cas_id_lock);
   104330:  115:    return next_id;
        -:  116:}
------------------
get_cas_id:
   104330:  110:uint64_t get_cas_id(void) {
   104330:  111:    static uint64_t cas_id = 0;
   104330:  112:    pthread_mutex_lock(&cas_id_lock);
   104330:  113:    uint64_t next_id = ++cas_id;
   104330:  114:    pthread_mutex_unlock(&cas_id_lock);
   104330:  115:    return next_id;
        -:  116:}
------------------
get_cas_id:
   104330:  110:uint64_t get_cas_id(void) {
   104330:  111:    static uint64_t cas_id = 0;
   104330:  112:    pthread_mutex_lock(&cas_id_lock);
   104330:  113:    uint64_t next_id = ++cas_id;
   104330:  114:    pthread_mutex_unlock(&cas_id_lock);
   104330:  115:    return next_id;
        -:  116:}
------------------
        -:  117:
   761504:  118:int item_is_flushed(item *it) {
   761504:  119:    rel_time_t oldest_live = settings.oldest_live;
   761504:  120:    uint64_t cas = ITEM_get_cas(it);
   761504:  121:    uint64_t oldest_cas = settings.oldest_cas;
   761504:  122:    if (oldest_live == 0 || oldest_live > current_time)
        -:  123:        return 0;
   247040:  124:    if ((it->time <= oldest_live)
   219304:  125:            || (oldest_cas != 0 && cas != 0 && cas < oldest_cas)) {
    28032:  126:        return 1;
        -:  127:    }
        -:  128:    return 0;
        -:  129:}
------------------
item_is_flushed:
   190376:  118:int item_is_flushed(item *it) {
   190376:  119:    rel_time_t oldest_live = settings.oldest_live;
   190376:  120:    uint64_t cas = ITEM_get_cas(it);
   190376:  121:    uint64_t oldest_cas = settings.oldest_cas;
   190376:  122:    if (oldest_live == 0 || oldest_live > current_time)
        -:  123:        return 0;
    61760:  124:    if ((it->time <= oldest_live)
    54826:  125:            || (oldest_cas != 0 && cas != 0 && cas < oldest_cas)) {
     7008:  126:        return 1;
        -:  127:    }
        -:  128:    return 0;
        -:  129:}
------------------
item_is_flushed:
   190376:  118:int item_is_flushed(item *it) {
   190376:  119:    rel_time_t oldest_live = settings.oldest_live;
   190376:  120:    uint64_t cas = ITEM_get_cas(it);
   190376:  121:    uint64_t oldest_cas = settings.oldest_cas;
   190376:  122:    if (oldest_live == 0 || oldest_live > current_time)
        -:  123:        return 0;
    61760:  124:    if ((it->time <= oldest_live)
    54826:  125:            || (oldest_cas != 0 && cas != 0 && cas < oldest_cas)) {
     7008:  126:        return 1;
        -:  127:    }
        -:  128:    return 0;
        -:  129:}
------------------
item_is_flushed:
   190376:  118:int item_is_flushed(item *it) {
   190376:  119:    rel_time_t oldest_live = settings.oldest_live;
   190376:  120:    uint64_t cas = ITEM_get_cas(it);
   190376:  121:    uint64_t oldest_cas = settings.oldest_cas;
   190376:  122:    if (oldest_live == 0 || oldest_live > current_time)
        -:  123:        return 0;
    61760:  124:    if ((it->time <= oldest_live)
    54826:  125:            || (oldest_cas != 0 && cas != 0 && cas < oldest_cas)) {
     7008:  126:        return 1;
        -:  127:    }
        -:  128:    return 0;
        -:  129:}
------------------
item_is_flushed:
   190376:  118:int item_is_flushed(item *it) {
   190376:  119:    rel_time_t oldest_live = settings.oldest_live;
   190376:  120:    uint64_t cas = ITEM_get_cas(it);
   190376:  121:    uint64_t oldest_cas = settings.oldest_cas;
   190376:  122:    if (oldest_live == 0 || oldest_live > current_time)
        -:  123:        return 0;
    61760:  124:    if ((it->time <= oldest_live)
    54826:  125:            || (oldest_cas != 0 && cas != 0 && cas < oldest_cas)) {
     7008:  126:        return 1;
        -:  127:    }
        -:  128:    return 0;
        -:  129:}
------------------
        -:  130:
        -:  131:static unsigned int temp_lru_size(int slabs_clsid) {
    11564:  132:    int id = CLEAR_LRU(slabs_clsid);
    11564:  133:    id |= TEMP_LRU;
    11564:  134:    unsigned int ret;
    11564:  135:    pthread_mutex_lock(&lru_locks[id]);
    11564:  136:    ret = sizes_bytes[id];
    11564:  137:    pthread_mutex_unlock(&lru_locks[id]);
    11564:  138:    return ret;
        -:  139:}
        -:  140:
        -:  141:/* must be locked before call */
     1020:  142:unsigned int do_get_lru_size(uint32_t id) {
     1020:  143:    return sizes[id];
        -:  144:}
------------------
do_get_lru_size:
      255:  142:unsigned int do_get_lru_size(uint32_t id) {
      255:  143:    return sizes[id];
        -:  144:}
------------------
do_get_lru_size:
      255:  142:unsigned int do_get_lru_size(uint32_t id) {
      255:  143:    return sizes[id];
        -:  144:}
------------------
do_get_lru_size:
      255:  142:unsigned int do_get_lru_size(uint32_t id) {
      255:  143:    return sizes[id];
        -:  144:}
------------------
do_get_lru_size:
      255:  142:unsigned int do_get_lru_size(uint32_t id) {
      255:  143:    return sizes[id];
        -:  144:}
------------------
        -:  145:
        -:  146:/* Enable this for reference-count debugging. */
        -:  147:#if 0
        -:  148:# define DEBUG_REFCNT(it,op) \
        -:  149:                fprintf(stderr, "item %x refcnt(%c) %d %c%c%c\n", \
        -:  150:                        it, op, it->refcount, \
        -:  151:                        (it->it_flags & ITEM_LINKED) ? 'L' : ' ', \
        -:  152:                        (it->it_flags & ITEM_SLABBED) ? 'S' : ' ')
        -:  153:#else
        -:  154:# define DEBUG_REFCNT(it,op) while(0)
        -:  155:#endif
        -:  156:
        -:  157:/**
        -:  158: * Generates the variable-sized part of the header for an object.
        -:  159: *
        -:  160: * key     - The key
        -:  161: * nkey    - The length of the key
        -:  162: * flags   - key flags
        -:  163: * nbytes  - Number of bytes to hold value and addition CRLF terminator
        -:  164: * suffix  - Buffer for the "VALUE" line suffix (flags, size).
        -:  165: * nsuffix - The length of the suffix is stored here.
        -:  166: *
        -:  167: * Returns the total size of the header.
        -:  168: */
        -:  169:static size_t item_make_header(const uint8_t nkey, const unsigned int flags, const int nbytes,
        -:  170:                     char *suffix, uint8_t *nsuffix) {
   476816:  171:    if (flags == 0) {
        -:  172:        *nsuffix = 0;
        -:  173:    } else {
    79564:  174:        *nsuffix = sizeof(flags);
        -:  175:    }
   476816:  176:    return sizeof(item) + nkey + *nsuffix + nbytes;
        -:  177:}
        -:  178:
  1021448:  179:item *do_item_alloc_pull(const size_t ntotal, const unsigned int id) {
  1021448:  180:    item *it = NULL;
  1021448:  181:    int i;
        -:  182:    /* If no memory is available, attempt a direct LRU juggle/eviction */
        -:  183:    /* This is a race in order to simplify lru_pull_tail; in cases where
        -:  184:     * locked items are on the tail, you want them to fall out and cause
        -:  185:     * occasional OOM's, rather than internally work around them.
        -:  186:     * This also gives one fewer code path for slab alloc/free
        -:  187:     */
  1134900:  188:    for (i = 0; i < 10; i++) {
  1134880:  189:        uint64_t total_bytes;
        -:  190:        /* Try to reclaim memory first */
  1134880:  191:        if (!settings.lru_segmented) {
    83572:  192:            lru_pull_tail(id, COLD_LRU, 0, 0, 0, NULL);
        -:  193:        }
  1134880:  194:        it = slabs_alloc(ntotal, id, &total_bytes, 0);
        -:  195:
  1134880:  196:        if (settings.temp_lru)
     1960:  197:            total_bytes -= temp_lru_size(id);
        -:  198:
  1134880:  199:        if (it == NULL) {
   113452:  200:            if (lru_pull_tail(id, COLD_LRU, total_bytes, LRU_PULL_EVICT, 0, NULL) <= 0) {
    43260:  201:                if (settings.lru_segmented) {
    43260:  202:                    lru_pull_tail(id, HOT_LRU, total_bytes, 0, 0, NULL);
        -:  203:                } else {
        -:  204:                    break;
        -:  205:                }
        -:  206:            }
        -:  207:        } else {
        -:  208:            break;
        -:  209:        }
        -:  210:    }
        -:  211:
  1021448:  212:    if (i > 0) {
    70212:  213:        pthread_mutex_lock(&lru_locks[id]);
    70212:  214:        itemstats[id].direct_reclaims += i;
    70212:  215:        pthread_mutex_unlock(&lru_locks[id]);
        -:  216:    }
        -:  217:
  1021448:  218:    return it;
        -:  219:}
------------------
do_item_alloc_pull:
   255362:  179:item *do_item_alloc_pull(const size_t ntotal, const unsigned int id) {
   255362:  180:    item *it = NULL;
   255362:  181:    int i;
        -:  182:    /* If no memory is available, attempt a direct LRU juggle/eviction */
        -:  183:    /* This is a race in order to simplify lru_pull_tail; in cases where
        -:  184:     * locked items are on the tail, you want them to fall out and cause
        -:  185:     * occasional OOM's, rather than internally work around them.
        -:  186:     * This also gives one fewer code path for slab alloc/free
        -:  187:     */
   283725:  188:    for (i = 0; i < 10; i++) {
   283720:  189:        uint64_t total_bytes;
        -:  190:        /* Try to reclaim memory first */
   283720:  191:        if (!settings.lru_segmented) {
    20893:  192:            lru_pull_tail(id, COLD_LRU, 0, 0, 0, NULL);
        -:  193:        }
   283720:  194:        it = slabs_alloc(ntotal, id, &total_bytes, 0);
        -:  195:
   283720:  196:        if (settings.temp_lru)
      490:  197:            total_bytes -= temp_lru_size(id);
        -:  198:
   283720:  199:        if (it == NULL) {
    28363:  200:            if (lru_pull_tail(id, COLD_LRU, total_bytes, LRU_PULL_EVICT, 0, NULL) <= 0) {
    10815:  201:                if (settings.lru_segmented) {
    10815:  202:                    lru_pull_tail(id, HOT_LRU, total_bytes, 0, 0, NULL);
        -:  203:                } else {
        -:  204:                    break;
        -:  205:                }
        -:  206:            }
        -:  207:        } else {
        -:  208:            break;
        -:  209:        }
        -:  210:    }
        -:  211:
   255362:  212:    if (i > 0) {
    17553:  213:        pthread_mutex_lock(&lru_locks[id]);
    17553:  214:        itemstats[id].direct_reclaims += i;
    17553:  215:        pthread_mutex_unlock(&lru_locks[id]);
        -:  216:    }
        -:  217:
   255362:  218:    return it;
        -:  219:}
------------------
do_item_alloc_pull:
   255362:  179:item *do_item_alloc_pull(const size_t ntotal, const unsigned int id) {
   255362:  180:    item *it = NULL;
   255362:  181:    int i;
        -:  182:    /* If no memory is available, attempt a direct LRU juggle/eviction */
        -:  183:    /* This is a race in order to simplify lru_pull_tail; in cases where
        -:  184:     * locked items are on the tail, you want them to fall out and cause
        -:  185:     * occasional OOM's, rather than internally work around them.
        -:  186:     * This also gives one fewer code path for slab alloc/free
        -:  187:     */
   283725:  188:    for (i = 0; i < 10; i++) {
   283720:  189:        uint64_t total_bytes;
        -:  190:        /* Try to reclaim memory first */
   283720:  191:        if (!settings.lru_segmented) {
    20893:  192:            lru_pull_tail(id, COLD_LRU, 0, 0, 0, NULL);
        -:  193:        }
   283720:  194:        it = slabs_alloc(ntotal, id, &total_bytes, 0);
        -:  195:
   283720:  196:        if (settings.temp_lru)
      490:  197:            total_bytes -= temp_lru_size(id);
        -:  198:
   283720:  199:        if (it == NULL) {
    28363:  200:            if (lru_pull_tail(id, COLD_LRU, total_bytes, LRU_PULL_EVICT, 0, NULL) <= 0) {
    10815:  201:                if (settings.lru_segmented) {
    10815:  202:                    lru_pull_tail(id, HOT_LRU, total_bytes, 0, 0, NULL);
        -:  203:                } else {
        -:  204:                    break;
        -:  205:                }
        -:  206:            }
        -:  207:        } else {
        -:  208:            break;
        -:  209:        }
        -:  210:    }
        -:  211:
   255362:  212:    if (i > 0) {
    17553:  213:        pthread_mutex_lock(&lru_locks[id]);
    17553:  214:        itemstats[id].direct_reclaims += i;
    17553:  215:        pthread_mutex_unlock(&lru_locks[id]);
        -:  216:    }
        -:  217:
   255362:  218:    return it;
        -:  219:}
------------------
do_item_alloc_pull:
   255362:  179:item *do_item_alloc_pull(const size_t ntotal, const unsigned int id) {
   255362:  180:    item *it = NULL;
   255362:  181:    int i;
        -:  182:    /* If no memory is available, attempt a direct LRU juggle/eviction */
        -:  183:    /* This is a race in order to simplify lru_pull_tail; in cases where
        -:  184:     * locked items are on the tail, you want them to fall out and cause
        -:  185:     * occasional OOM's, rather than internally work around them.
        -:  186:     * This also gives one fewer code path for slab alloc/free
        -:  187:     */
   283725:  188:    for (i = 0; i < 10; i++) {
   283720:  189:        uint64_t total_bytes;
        -:  190:        /* Try to reclaim memory first */
   283720:  191:        if (!settings.lru_segmented) {
    20893:  192:            lru_pull_tail(id, COLD_LRU, 0, 0, 0, NULL);
        -:  193:        }
   283720:  194:        it = slabs_alloc(ntotal, id, &total_bytes, 0);
        -:  195:
   283720:  196:        if (settings.temp_lru)
      490:  197:            total_bytes -= temp_lru_size(id);
        -:  198:
   283720:  199:        if (it == NULL) {
    28363:  200:            if (lru_pull_tail(id, COLD_LRU, total_bytes, LRU_PULL_EVICT, 0, NULL) <= 0) {
    10815:  201:                if (settings.lru_segmented) {
    10815:  202:                    lru_pull_tail(id, HOT_LRU, total_bytes, 0, 0, NULL);
        -:  203:                } else {
        -:  204:                    break;
        -:  205:                }
        -:  206:            }
        -:  207:        } else {
        -:  208:            break;
        -:  209:        }
        -:  210:    }
        -:  211:
   255362:  212:    if (i > 0) {
    17553:  213:        pthread_mutex_lock(&lru_locks[id]);
    17553:  214:        itemstats[id].direct_reclaims += i;
    17553:  215:        pthread_mutex_unlock(&lru_locks[id]);
        -:  216:    }
        -:  217:
   255362:  218:    return it;
        -:  219:}
------------------
do_item_alloc_pull:
   255362:  179:item *do_item_alloc_pull(const size_t ntotal, const unsigned int id) {
   255362:  180:    item *it = NULL;
   255362:  181:    int i;
        -:  182:    /* If no memory is available, attempt a direct LRU juggle/eviction */
        -:  183:    /* This is a race in order to simplify lru_pull_tail; in cases where
        -:  184:     * locked items are on the tail, you want them to fall out and cause
        -:  185:     * occasional OOM's, rather than internally work around them.
        -:  186:     * This also gives one fewer code path for slab alloc/free
        -:  187:     */
   283725:  188:    for (i = 0; i < 10; i++) {
   283720:  189:        uint64_t total_bytes;
        -:  190:        /* Try to reclaim memory first */
   283720:  191:        if (!settings.lru_segmented) {
    20893:  192:            lru_pull_tail(id, COLD_LRU, 0, 0, 0, NULL);
        -:  193:        }
   283720:  194:        it = slabs_alloc(ntotal, id, &total_bytes, 0);
        -:  195:
   283720:  196:        if (settings.temp_lru)
      490:  197:            total_bytes -= temp_lru_size(id);
        -:  198:
   283720:  199:        if (it == NULL) {
    28363:  200:            if (lru_pull_tail(id, COLD_LRU, total_bytes, LRU_PULL_EVICT, 0, NULL) <= 0) {
    10815:  201:                if (settings.lru_segmented) {
    10815:  202:                    lru_pull_tail(id, HOT_LRU, total_bytes, 0, 0, NULL);
        -:  203:                } else {
        -:  204:                    break;
        -:  205:                }
        -:  206:            }
        -:  207:        } else {
        -:  208:            break;
        -:  209:        }
        -:  210:    }
        -:  211:
   255362:  212:    if (i > 0) {
    17553:  213:        pthread_mutex_lock(&lru_locks[id]);
    17553:  214:        itemstats[id].direct_reclaims += i;
    17553:  215:        pthread_mutex_unlock(&lru_locks[id]);
        -:  216:    }
        -:  217:
   255362:  218:    return it;
        -:  219:}
------------------
        -:  220:
        -:  221:/* Chain another chunk onto this chunk. */
        -:  222:/* slab mover: if it finds a chunk without ITEM_CHUNK flag, and no ITEM_LINKED
        -:  223: * flag, it counts as busy and skips.
        -:  224: * I think it might still not be safe to do linking outside of the slab lock
        -:  225: */
   544684:  226:item_chunk *do_item_alloc_chunk(item_chunk *ch, const size_t bytes_remain) {
        -:  227:    // TODO: Should be a cleaner way of finding real size with slabber calls
   544684:  228:    size_t size = bytes_remain + sizeof(item_chunk);
   544684:  229:    if (size > settings.slab_chunk_size_max)
   303960:  230:        size = settings.slab_chunk_size_max;
   544684:  231:    unsigned int id = slabs_clsid(size);
        -:  232:
   544684:  233:    item_chunk *nch = (item_chunk *) do_item_alloc_pull(size, id);
   544684:  234:    if (nch == NULL)
        -:  235:        return NULL;
        -:  236:
        -:  237:    // link in.
        -:  238:    // ITEM_CHUNK[ED] bits need to be protected by the slabs lock.
   544684:  239:    slabs_mlock();
   544684:  240:    nch->head = ch->head;
   544684:  241:    ch->next = nch;
   544684:  242:    nch->prev = ch;
   544684:  243:    nch->next = 0;
   544684:  244:    nch->used = 0;
   544684:  245:    nch->slabs_clsid = id;
   544684:  246:    nch->size = size - sizeof(item_chunk);
   544684:  247:    nch->it_flags |= ITEM_CHUNK;
   544684:  248:    slabs_munlock();
   544684:  249:    return nch;
        -:  250:}
------------------
do_item_alloc_chunk:
   136171:  226:item_chunk *do_item_alloc_chunk(item_chunk *ch, const size_t bytes_remain) {
        -:  227:    // TODO: Should be a cleaner way of finding real size with slabber calls
   136171:  228:    size_t size = bytes_remain + sizeof(item_chunk);
   136171:  229:    if (size > settings.slab_chunk_size_max)
    75990:  230:        size = settings.slab_chunk_size_max;
   136171:  231:    unsigned int id = slabs_clsid(size);
        -:  232:
   136171:  233:    item_chunk *nch = (item_chunk *) do_item_alloc_pull(size, id);
   136171:  234:    if (nch == NULL)
        -:  235:        return NULL;
        -:  236:
        -:  237:    // link in.
        -:  238:    // ITEM_CHUNK[ED] bits need to be protected by the slabs lock.
   136171:  239:    slabs_mlock();
   136171:  240:    nch->head = ch->head;
   136171:  241:    ch->next = nch;
   136171:  242:    nch->prev = ch;
   136171:  243:    nch->next = 0;
   136171:  244:    nch->used = 0;
   136171:  245:    nch->slabs_clsid = id;
   136171:  246:    nch->size = size - sizeof(item_chunk);
   136171:  247:    nch->it_flags |= ITEM_CHUNK;
   136171:  248:    slabs_munlock();
   136171:  249:    return nch;
        -:  250:}
------------------
do_item_alloc_chunk:
   136171:  226:item_chunk *do_item_alloc_chunk(item_chunk *ch, const size_t bytes_remain) {
        -:  227:    // TODO: Should be a cleaner way of finding real size with slabber calls
   136171:  228:    size_t size = bytes_remain + sizeof(item_chunk);
   136171:  229:    if (size > settings.slab_chunk_size_max)
    75990:  230:        size = settings.slab_chunk_size_max;
   136171:  231:    unsigned int id = slabs_clsid(size);
        -:  232:
   136171:  233:    item_chunk *nch = (item_chunk *) do_item_alloc_pull(size, id);
   136171:  234:    if (nch == NULL)
        -:  235:        return NULL;
        -:  236:
        -:  237:    // link in.
        -:  238:    // ITEM_CHUNK[ED] bits need to be protected by the slabs lock.
   136171:  239:    slabs_mlock();
   136171:  240:    nch->head = ch->head;
   136171:  241:    ch->next = nch;
   136171:  242:    nch->prev = ch;
   136171:  243:    nch->next = 0;
   136171:  244:    nch->used = 0;
   136171:  245:    nch->slabs_clsid = id;
   136171:  246:    nch->size = size - sizeof(item_chunk);
   136171:  247:    nch->it_flags |= ITEM_CHUNK;
   136171:  248:    slabs_munlock();
   136171:  249:    return nch;
        -:  250:}
------------------
do_item_alloc_chunk:
   136171:  226:item_chunk *do_item_alloc_chunk(item_chunk *ch, const size_t bytes_remain) {
        -:  227:    // TODO: Should be a cleaner way of finding real size with slabber calls
   136171:  228:    size_t size = bytes_remain + sizeof(item_chunk);
   136171:  229:    if (size > settings.slab_chunk_size_max)
    75990:  230:        size = settings.slab_chunk_size_max;
   136171:  231:    unsigned int id = slabs_clsid(size);
        -:  232:
   136171:  233:    item_chunk *nch = (item_chunk *) do_item_alloc_pull(size, id);
   136171:  234:    if (nch == NULL)
        -:  235:        return NULL;
        -:  236:
        -:  237:    // link in.
        -:  238:    // ITEM_CHUNK[ED] bits need to be protected by the slabs lock.
   136171:  239:    slabs_mlock();
   136171:  240:    nch->head = ch->head;
   136171:  241:    ch->next = nch;
   136171:  242:    nch->prev = ch;
   136171:  243:    nch->next = 0;
   136171:  244:    nch->used = 0;
   136171:  245:    nch->slabs_clsid = id;
   136171:  246:    nch->size = size - sizeof(item_chunk);
   136171:  247:    nch->it_flags |= ITEM_CHUNK;
   136171:  248:    slabs_munlock();
   136171:  249:    return nch;
        -:  250:}
------------------
do_item_alloc_chunk:
   136171:  226:item_chunk *do_item_alloc_chunk(item_chunk *ch, const size_t bytes_remain) {
        -:  227:    // TODO: Should be a cleaner way of finding real size with slabber calls
   136171:  228:    size_t size = bytes_remain + sizeof(item_chunk);
   136171:  229:    if (size > settings.slab_chunk_size_max)
    75990:  230:        size = settings.slab_chunk_size_max;
   136171:  231:    unsigned int id = slabs_clsid(size);
        -:  232:
   136171:  233:    item_chunk *nch = (item_chunk *) do_item_alloc_pull(size, id);
   136171:  234:    if (nch == NULL)
        -:  235:        return NULL;
        -:  236:
        -:  237:    // link in.
        -:  238:    // ITEM_CHUNK[ED] bits need to be protected by the slabs lock.
   136171:  239:    slabs_mlock();
   136171:  240:    nch->head = ch->head;
   136171:  241:    ch->next = nch;
   136171:  242:    nch->prev = ch;
   136171:  243:    nch->next = 0;
   136171:  244:    nch->used = 0;
   136171:  245:    nch->slabs_clsid = id;
   136171:  246:    nch->size = size - sizeof(item_chunk);
   136171:  247:    nch->it_flags |= ITEM_CHUNK;
   136171:  248:    slabs_munlock();
   136171:  249:    return nch;
        -:  250:}
------------------
        -:  251:
   476784:  252:item *do_item_alloc(char *key, const size_t nkey, const unsigned int flags,
        -:  253:                    const rel_time_t exptime, const int nbytes) {
   476784:  254:    uint8_t nsuffix;
   476784:  255:    item *it = NULL;
   476784:  256:    char suffix[40];
        -:  257:    // Avoid potential underflows.
   476784:  258:    if (nbytes < 2)
        -:  259:        return 0;
        -:  260:
   476780:  261:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes, suffix, &nsuffix);
   476780:  262:    if (settings.use_cas) {
   476776:  263:        ntotal += sizeof(uint64_t);
        -:  264:    }
        -:  265:
   476780:  266:    unsigned int id = slabs_clsid(ntotal);
   476780:  267:    unsigned int hdr_id = 0;
   476780:  268:    if (id == 0)
        -:  269:        return 0;
        -:  270:
        -:  271:    /* This is a large item. Allocate a header object now, lazily allocate
        -:  272:     *  chunks while reading the upload.
        -:  273:     */
   476764:  274:    if (ntotal > settings.slab_chunk_size_max) {
        -:  275:        /* We still link this item into the LRU for the larger slab class, but
        -:  276:         * we're pulling a header from an entirely different slab class. The
        -:  277:         * free routines handle large items specifically.
        -:  278:         */
    78532:  279:        int htotal = nkey + 1 + nsuffix + sizeof(item) + sizeof(item_chunk);
    78532:  280:        if (settings.use_cas) {
    78532:  281:            htotal += sizeof(uint64_t);
        -:  282:        }
        -:  283:#ifdef NEED_ALIGN
        -:  284:        // header chunk needs to be padded on some systems
        -:  285:        int remain = htotal % 8;
        -:  286:        if (remain != 0) {
        -:  287:            htotal += 8 - remain;
        -:  288:        }
        -:  289:#endif
    78532:  290:        hdr_id = slabs_clsid(htotal);
    78532:  291:        it = do_item_alloc_pull(htotal, hdr_id);
        -:  292:        /* setting ITEM_CHUNKED is fine here because we aren't LINKED yet. */
    78532:  293:        if (it != NULL)
    78532:  294:            it->it_flags |= ITEM_CHUNKED;
        -:  295:    } else {
   398232:  296:        it = do_item_alloc_pull(ntotal, id);
        -:  297:    }
        -:  298:
   476764:  299:    if (it == NULL) {
       20:  300:        pthread_mutex_lock(&lru_locks[id]);
       20:  301:        itemstats[id].outofmemory++;
       20:  302:        pthread_mutex_unlock(&lru_locks[id]);
       20:  303:        return NULL;
        -:  304:    }
        -:  305:
  476744*:  306:    assert(it->slabs_clsid == 0);
        -:  307:    //assert(it != heads[id]);
        -:  308:
        -:  309:    /* Refcount is seeded to 1 by slabs_alloc() */
   476744:  310:    it->next = it->prev = 0;
        -:  311:
        -:  312:    /* Items are initially loaded into the HOT_LRU. This is '0' but I want at
        -:  313:     * least a note here. Compiler (hopefully?) optimizes this out.
        -:  314:     */
   476744:  315:    if (settings.temp_lru &&
      404:  316:            exptime - current_time <= settings.temporary_ttl) {
        4:  317:        id |= TEMP_LRU;
   476740:  318:    } else if (settings.lru_segmented) {
        -:  319:        id |= HOT_LRU;
        -:  320:    } else {
        -:  321:        /* There is only COLD in compat-mode */
    81780:  322:        id |= COLD_LRU;
        -:  323:    }
   476744:  324:    it->slabs_clsid = id;
        -:  325:
   476744:  326:    DEBUG_REFCNT(it, '*');
   476744:  327:    it->it_flags |= settings.use_cas ? ITEM_CAS : 0;
   476744:  328:    it->it_flags |= nsuffix != 0 ? ITEM_CFLAGS : 0;
   476744:  329:    it->nkey = nkey;
   476744:  330:    it->nbytes = nbytes;
   476744:  331:    memcpy(ITEM_key(it), key, nkey);
   476744:  332:    it->exptime = exptime;
   476744:  333:    if (nsuffix > 0) {
    79556:  334:        memcpy(ITEM_suffix(it), &flags, sizeof(flags));
        -:  335:    }
        -:  336:
        -:  337:    /* Initialize internal chunk. */
   476744:  338:    if (it->it_flags & ITEM_CHUNKED) {
    78532:  339:        item_chunk *chunk = (item_chunk *) ITEM_schunk(it);
        -:  340:
    78532:  341:        chunk->next = 0;
    78532:  342:        chunk->prev = 0;
    78532:  343:        chunk->used = 0;
    78532:  344:        chunk->size = 0;
    78532:  345:        chunk->head = it;
    78532:  346:        chunk->orig_clsid = hdr_id;
        -:  347:    }
   476744:  348:    it->h_next = 0;
        -:  349:
   476744:  350:    return it;
        -:  351:}
------------------
do_item_alloc:
   119196:  252:item *do_item_alloc(char *key, const size_t nkey, const unsigned int flags,
        -:  253:                    const rel_time_t exptime, const int nbytes) {
   119196:  254:    uint8_t nsuffix;
   119196:  255:    item *it = NULL;
   119196:  256:    char suffix[40];
        -:  257:    // Avoid potential underflows.
   119196:  258:    if (nbytes < 2)
        -:  259:        return 0;
        -:  260:
   119195:  261:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes, suffix, &nsuffix);
   119195:  262:    if (settings.use_cas) {
   119194:  263:        ntotal += sizeof(uint64_t);
        -:  264:    }
        -:  265:
   119195:  266:    unsigned int id = slabs_clsid(ntotal);
   119195:  267:    unsigned int hdr_id = 0;
   119195:  268:    if (id == 0)
        -:  269:        return 0;
        -:  270:
        -:  271:    /* This is a large item. Allocate a header object now, lazily allocate
        -:  272:     *  chunks while reading the upload.
        -:  273:     */
   119191:  274:    if (ntotal > settings.slab_chunk_size_max) {
        -:  275:        /* We still link this item into the LRU for the larger slab class, but
        -:  276:         * we're pulling a header from an entirely different slab class. The
        -:  277:         * free routines handle large items specifically.
        -:  278:         */
    19633:  279:        int htotal = nkey + 1 + nsuffix + sizeof(item) + sizeof(item_chunk);
    19633:  280:        if (settings.use_cas) {
    19633:  281:            htotal += sizeof(uint64_t);
        -:  282:        }
        -:  283:#ifdef NEED_ALIGN
        -:  284:        // header chunk needs to be padded on some systems
        -:  285:        int remain = htotal % 8;
        -:  286:        if (remain != 0) {
        -:  287:            htotal += 8 - remain;
        -:  288:        }
        -:  289:#endif
    19633:  290:        hdr_id = slabs_clsid(htotal);
    19633:  291:        it = do_item_alloc_pull(htotal, hdr_id);
        -:  292:        /* setting ITEM_CHUNKED is fine here because we aren't LINKED yet. */
    19633:  293:        if (it != NULL)
    19633:  294:            it->it_flags |= ITEM_CHUNKED;
        -:  295:    } else {
    99558:  296:        it = do_item_alloc_pull(ntotal, id);
        -:  297:    }
        -:  298:
   119191:  299:    if (it == NULL) {
        5:  300:        pthread_mutex_lock(&lru_locks[id]);
        5:  301:        itemstats[id].outofmemory++;
        5:  302:        pthread_mutex_unlock(&lru_locks[id]);
        5:  303:        return NULL;
        -:  304:    }
        -:  305:
  119186*:  306:    assert(it->slabs_clsid == 0);
        -:  307:    //assert(it != heads[id]);
        -:  308:
        -:  309:    /* Refcount is seeded to 1 by slabs_alloc() */
   119186:  310:    it->next = it->prev = 0;
        -:  311:
        -:  312:    /* Items are initially loaded into the HOT_LRU. This is '0' but I want at
        -:  313:     * least a note here. Compiler (hopefully?) optimizes this out.
        -:  314:     */
   119186:  315:    if (settings.temp_lru &&
      101:  316:            exptime - current_time <= settings.temporary_ttl) {
        1:  317:        id |= TEMP_LRU;
   119185:  318:    } else if (settings.lru_segmented) {
        -:  319:        id |= HOT_LRU;
        -:  320:    } else {
        -:  321:        /* There is only COLD in compat-mode */
    20445:  322:        id |= COLD_LRU;
        -:  323:    }
   119186:  324:    it->slabs_clsid = id;
        -:  325:
   119186:  326:    DEBUG_REFCNT(it, '*');
   119186:  327:    it->it_flags |= settings.use_cas ? ITEM_CAS : 0;
   119186:  328:    it->it_flags |= nsuffix != 0 ? ITEM_CFLAGS : 0;
   119186:  329:    it->nkey = nkey;
   119186:  330:    it->nbytes = nbytes;
   119186:  331:    memcpy(ITEM_key(it), key, nkey);
   119186:  332:    it->exptime = exptime;
   119186:  333:    if (nsuffix > 0) {
    19889:  334:        memcpy(ITEM_suffix(it), &flags, sizeof(flags));
        -:  335:    }
        -:  336:
        -:  337:    /* Initialize internal chunk. */
   119186:  338:    if (it->it_flags & ITEM_CHUNKED) {
    19633:  339:        item_chunk *chunk = (item_chunk *) ITEM_schunk(it);
        -:  340:
    19633:  341:        chunk->next = 0;
    19633:  342:        chunk->prev = 0;
    19633:  343:        chunk->used = 0;
    19633:  344:        chunk->size = 0;
    19633:  345:        chunk->head = it;
    19633:  346:        chunk->orig_clsid = hdr_id;
        -:  347:    }
   119186:  348:    it->h_next = 0;
        -:  349:
   119186:  350:    return it;
        -:  351:}
------------------
do_item_alloc:
   119196:  252:item *do_item_alloc(char *key, const size_t nkey, const unsigned int flags,
        -:  253:                    const rel_time_t exptime, const int nbytes) {
   119196:  254:    uint8_t nsuffix;
   119196:  255:    item *it = NULL;
   119196:  256:    char suffix[40];
        -:  257:    // Avoid potential underflows.
   119196:  258:    if (nbytes < 2)
        -:  259:        return 0;
        -:  260:
   119195:  261:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes, suffix, &nsuffix);
   119195:  262:    if (settings.use_cas) {
   119194:  263:        ntotal += sizeof(uint64_t);
        -:  264:    }
        -:  265:
   119195:  266:    unsigned int id = slabs_clsid(ntotal);
   119195:  267:    unsigned int hdr_id = 0;
   119195:  268:    if (id == 0)
        -:  269:        return 0;
        -:  270:
        -:  271:    /* This is a large item. Allocate a header object now, lazily allocate
        -:  272:     *  chunks while reading the upload.
        -:  273:     */
   119191:  274:    if (ntotal > settings.slab_chunk_size_max) {
        -:  275:        /* We still link this item into the LRU for the larger slab class, but
        -:  276:         * we're pulling a header from an entirely different slab class. The
        -:  277:         * free routines handle large items specifically.
        -:  278:         */
    19633:  279:        int htotal = nkey + 1 + nsuffix + sizeof(item) + sizeof(item_chunk);
    19633:  280:        if (settings.use_cas) {
    19633:  281:            htotal += sizeof(uint64_t);
        -:  282:        }
        -:  283:#ifdef NEED_ALIGN
        -:  284:        // header chunk needs to be padded on some systems
        -:  285:        int remain = htotal % 8;
        -:  286:        if (remain != 0) {
        -:  287:            htotal += 8 - remain;
        -:  288:        }
        -:  289:#endif
    19633:  290:        hdr_id = slabs_clsid(htotal);
    19633:  291:        it = do_item_alloc_pull(htotal, hdr_id);
        -:  292:        /* setting ITEM_CHUNKED is fine here because we aren't LINKED yet. */
    19633:  293:        if (it != NULL)
    19633:  294:            it->it_flags |= ITEM_CHUNKED;
        -:  295:    } else {
    99558:  296:        it = do_item_alloc_pull(ntotal, id);
        -:  297:    }
        -:  298:
   119191:  299:    if (it == NULL) {
        5:  300:        pthread_mutex_lock(&lru_locks[id]);
        5:  301:        itemstats[id].outofmemory++;
        5:  302:        pthread_mutex_unlock(&lru_locks[id]);
        5:  303:        return NULL;
        -:  304:    }
        -:  305:
  119186*:  306:    assert(it->slabs_clsid == 0);
        -:  307:    //assert(it != heads[id]);
        -:  308:
        -:  309:    /* Refcount is seeded to 1 by slabs_alloc() */
   119186:  310:    it->next = it->prev = 0;
        -:  311:
        -:  312:    /* Items are initially loaded into the HOT_LRU. This is '0' but I want at
        -:  313:     * least a note here. Compiler (hopefully?) optimizes this out.
        -:  314:     */
   119186:  315:    if (settings.temp_lru &&
      101:  316:            exptime - current_time <= settings.temporary_ttl) {
        1:  317:        id |= TEMP_LRU;
   119185:  318:    } else if (settings.lru_segmented) {
        -:  319:        id |= HOT_LRU;
        -:  320:    } else {
        -:  321:        /* There is only COLD in compat-mode */
    20445:  322:        id |= COLD_LRU;
        -:  323:    }
   119186:  324:    it->slabs_clsid = id;
        -:  325:
   119186:  326:    DEBUG_REFCNT(it, '*');
   119186:  327:    it->it_flags |= settings.use_cas ? ITEM_CAS : 0;
   119186:  328:    it->it_flags |= nsuffix != 0 ? ITEM_CFLAGS : 0;
   119186:  329:    it->nkey = nkey;
   119186:  330:    it->nbytes = nbytes;
   119186:  331:    memcpy(ITEM_key(it), key, nkey);
   119186:  332:    it->exptime = exptime;
   119186:  333:    if (nsuffix > 0) {
    19889:  334:        memcpy(ITEM_suffix(it), &flags, sizeof(flags));
        -:  335:    }
        -:  336:
        -:  337:    /* Initialize internal chunk. */
   119186:  338:    if (it->it_flags & ITEM_CHUNKED) {
    19633:  339:        item_chunk *chunk = (item_chunk *) ITEM_schunk(it);
        -:  340:
    19633:  341:        chunk->next = 0;
    19633:  342:        chunk->prev = 0;
    19633:  343:        chunk->used = 0;
    19633:  344:        chunk->size = 0;
    19633:  345:        chunk->head = it;
    19633:  346:        chunk->orig_clsid = hdr_id;
        -:  347:    }
   119186:  348:    it->h_next = 0;
        -:  349:
   119186:  350:    return it;
        -:  351:}
------------------
do_item_alloc:
   119196:  252:item *do_item_alloc(char *key, const size_t nkey, const unsigned int flags,
        -:  253:                    const rel_time_t exptime, const int nbytes) {
   119196:  254:    uint8_t nsuffix;
   119196:  255:    item *it = NULL;
   119196:  256:    char suffix[40];
        -:  257:    // Avoid potential underflows.
   119196:  258:    if (nbytes < 2)
        -:  259:        return 0;
        -:  260:
   119195:  261:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes, suffix, &nsuffix);
   119195:  262:    if (settings.use_cas) {
   119194:  263:        ntotal += sizeof(uint64_t);
        -:  264:    }
        -:  265:
   119195:  266:    unsigned int id = slabs_clsid(ntotal);
   119195:  267:    unsigned int hdr_id = 0;
   119195:  268:    if (id == 0)
        -:  269:        return 0;
        -:  270:
        -:  271:    /* This is a large item. Allocate a header object now, lazily allocate
        -:  272:     *  chunks while reading the upload.
        -:  273:     */
   119191:  274:    if (ntotal > settings.slab_chunk_size_max) {
        -:  275:        /* We still link this item into the LRU for the larger slab class, but
        -:  276:         * we're pulling a header from an entirely different slab class. The
        -:  277:         * free routines handle large items specifically.
        -:  278:         */
    19633:  279:        int htotal = nkey + 1 + nsuffix + sizeof(item) + sizeof(item_chunk);
    19633:  280:        if (settings.use_cas) {
    19633:  281:            htotal += sizeof(uint64_t);
        -:  282:        }
        -:  283:#ifdef NEED_ALIGN
        -:  284:        // header chunk needs to be padded on some systems
        -:  285:        int remain = htotal % 8;
        -:  286:        if (remain != 0) {
        -:  287:            htotal += 8 - remain;
        -:  288:        }
        -:  289:#endif
    19633:  290:        hdr_id = slabs_clsid(htotal);
    19633:  291:        it = do_item_alloc_pull(htotal, hdr_id);
        -:  292:        /* setting ITEM_CHUNKED is fine here because we aren't LINKED yet. */
    19633:  293:        if (it != NULL)
    19633:  294:            it->it_flags |= ITEM_CHUNKED;
        -:  295:    } else {
    99558:  296:        it = do_item_alloc_pull(ntotal, id);
        -:  297:    }
        -:  298:
   119191:  299:    if (it == NULL) {
        5:  300:        pthread_mutex_lock(&lru_locks[id]);
        5:  301:        itemstats[id].outofmemory++;
        5:  302:        pthread_mutex_unlock(&lru_locks[id]);
        5:  303:        return NULL;
        -:  304:    }
        -:  305:
  119186*:  306:    assert(it->slabs_clsid == 0);
        -:  307:    //assert(it != heads[id]);
        -:  308:
        -:  309:    /* Refcount is seeded to 1 by slabs_alloc() */
   119186:  310:    it->next = it->prev = 0;
        -:  311:
        -:  312:    /* Items are initially loaded into the HOT_LRU. This is '0' but I want at
        -:  313:     * least a note here. Compiler (hopefully?) optimizes this out.
        -:  314:     */
   119186:  315:    if (settings.temp_lru &&
      101:  316:            exptime - current_time <= settings.temporary_ttl) {
        1:  317:        id |= TEMP_LRU;
   119185:  318:    } else if (settings.lru_segmented) {
        -:  319:        id |= HOT_LRU;
        -:  320:    } else {
        -:  321:        /* There is only COLD in compat-mode */
    20445:  322:        id |= COLD_LRU;
        -:  323:    }
   119186:  324:    it->slabs_clsid = id;
        -:  325:
   119186:  326:    DEBUG_REFCNT(it, '*');
   119186:  327:    it->it_flags |= settings.use_cas ? ITEM_CAS : 0;
   119186:  328:    it->it_flags |= nsuffix != 0 ? ITEM_CFLAGS : 0;
   119186:  329:    it->nkey = nkey;
   119186:  330:    it->nbytes = nbytes;
   119186:  331:    memcpy(ITEM_key(it), key, nkey);
   119186:  332:    it->exptime = exptime;
   119186:  333:    if (nsuffix > 0) {
    19889:  334:        memcpy(ITEM_suffix(it), &flags, sizeof(flags));
        -:  335:    }
        -:  336:
        -:  337:    /* Initialize internal chunk. */
   119186:  338:    if (it->it_flags & ITEM_CHUNKED) {
    19633:  339:        item_chunk *chunk = (item_chunk *) ITEM_schunk(it);
        -:  340:
    19633:  341:        chunk->next = 0;
    19633:  342:        chunk->prev = 0;
    19633:  343:        chunk->used = 0;
    19633:  344:        chunk->size = 0;
    19633:  345:        chunk->head = it;
    19633:  346:        chunk->orig_clsid = hdr_id;
        -:  347:    }
   119186:  348:    it->h_next = 0;
        -:  349:
   119186:  350:    return it;
        -:  351:}
------------------
do_item_alloc:
   119196:  252:item *do_item_alloc(char *key, const size_t nkey, const unsigned int flags,
        -:  253:                    const rel_time_t exptime, const int nbytes) {
   119196:  254:    uint8_t nsuffix;
   119196:  255:    item *it = NULL;
   119196:  256:    char suffix[40];
        -:  257:    // Avoid potential underflows.
   119196:  258:    if (nbytes < 2)
        -:  259:        return 0;
        -:  260:
   119195:  261:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes, suffix, &nsuffix);
   119195:  262:    if (settings.use_cas) {
   119194:  263:        ntotal += sizeof(uint64_t);
        -:  264:    }
        -:  265:
   119195:  266:    unsigned int id = slabs_clsid(ntotal);
   119195:  267:    unsigned int hdr_id = 0;
   119195:  268:    if (id == 0)
        -:  269:        return 0;
        -:  270:
        -:  271:    /* This is a large item. Allocate a header object now, lazily allocate
        -:  272:     *  chunks while reading the upload.
        -:  273:     */
   119191:  274:    if (ntotal > settings.slab_chunk_size_max) {
        -:  275:        /* We still link this item into the LRU for the larger slab class, but
        -:  276:         * we're pulling a header from an entirely different slab class. The
        -:  277:         * free routines handle large items specifically.
        -:  278:         */
    19633:  279:        int htotal = nkey + 1 + nsuffix + sizeof(item) + sizeof(item_chunk);
    19633:  280:        if (settings.use_cas) {
    19633:  281:            htotal += sizeof(uint64_t);
        -:  282:        }
        -:  283:#ifdef NEED_ALIGN
        -:  284:        // header chunk needs to be padded on some systems
        -:  285:        int remain = htotal % 8;
        -:  286:        if (remain != 0) {
        -:  287:            htotal += 8 - remain;
        -:  288:        }
        -:  289:#endif
    19633:  290:        hdr_id = slabs_clsid(htotal);
    19633:  291:        it = do_item_alloc_pull(htotal, hdr_id);
        -:  292:        /* setting ITEM_CHUNKED is fine here because we aren't LINKED yet. */
    19633:  293:        if (it != NULL)
    19633:  294:            it->it_flags |= ITEM_CHUNKED;
        -:  295:    } else {
    99558:  296:        it = do_item_alloc_pull(ntotal, id);
        -:  297:    }
        -:  298:
   119191:  299:    if (it == NULL) {
        5:  300:        pthread_mutex_lock(&lru_locks[id]);
        5:  301:        itemstats[id].outofmemory++;
        5:  302:        pthread_mutex_unlock(&lru_locks[id]);
        5:  303:        return NULL;
        -:  304:    }
        -:  305:
  119186*:  306:    assert(it->slabs_clsid == 0);
        -:  307:    //assert(it != heads[id]);
        -:  308:
        -:  309:    /* Refcount is seeded to 1 by slabs_alloc() */
   119186:  310:    it->next = it->prev = 0;
        -:  311:
        -:  312:    /* Items are initially loaded into the HOT_LRU. This is '0' but I want at
        -:  313:     * least a note here. Compiler (hopefully?) optimizes this out.
        -:  314:     */
   119186:  315:    if (settings.temp_lru &&
      101:  316:            exptime - current_time <= settings.temporary_ttl) {
        1:  317:        id |= TEMP_LRU;
   119185:  318:    } else if (settings.lru_segmented) {
        -:  319:        id |= HOT_LRU;
        -:  320:    } else {
        -:  321:        /* There is only COLD in compat-mode */
    20445:  322:        id |= COLD_LRU;
        -:  323:    }
   119186:  324:    it->slabs_clsid = id;
        -:  325:
   119186:  326:    DEBUG_REFCNT(it, '*');
   119186:  327:    it->it_flags |= settings.use_cas ? ITEM_CAS : 0;
   119186:  328:    it->it_flags |= nsuffix != 0 ? ITEM_CFLAGS : 0;
   119186:  329:    it->nkey = nkey;
   119186:  330:    it->nbytes = nbytes;
   119186:  331:    memcpy(ITEM_key(it), key, nkey);
   119186:  332:    it->exptime = exptime;
   119186:  333:    if (nsuffix > 0) {
    19889:  334:        memcpy(ITEM_suffix(it), &flags, sizeof(flags));
        -:  335:    }
        -:  336:
        -:  337:    /* Initialize internal chunk. */
   119186:  338:    if (it->it_flags & ITEM_CHUNKED) {
    19633:  339:        item_chunk *chunk = (item_chunk *) ITEM_schunk(it);
        -:  340:
    19633:  341:        chunk->next = 0;
    19633:  342:        chunk->prev = 0;
    19633:  343:        chunk->used = 0;
    19633:  344:        chunk->size = 0;
    19633:  345:        chunk->head = it;
    19633:  346:        chunk->orig_clsid = hdr_id;
        -:  347:    }
   119186:  348:    it->h_next = 0;
        -:  349:
   119186:  350:    return it;
        -:  351:}
------------------
        -:  352:
   317788:  353:void item_free(item *it) {
   317788:  354:    size_t ntotal = ITEM_ntotal(it);
   317788:  355:    unsigned int clsid;
  317788*:  356:    assert((it->it_flags & ITEM_LINKED) == 0);
  317788*:  357:    assert(it != heads[it->slabs_clsid]);
  317788*:  358:    assert(it != tails[it->slabs_clsid]);
  317788*:  359:    assert(it->refcount == 0);
        -:  360:
        -:  361:    /* so slab size changer can tell later if item is already free or not */
   317788:  362:    clsid = ITEM_clsid(it);
   317788:  363:    DEBUG_REFCNT(it, 'F');
   317788:  364:    slabs_free(it, ntotal, clsid);
   317788:  365:}
------------------
item_free:
    79447:  353:void item_free(item *it) {
    79447:  354:    size_t ntotal = ITEM_ntotal(it);
    79447:  355:    unsigned int clsid;
   79447*:  356:    assert((it->it_flags & ITEM_LINKED) == 0);
   79447*:  357:    assert(it != heads[it->slabs_clsid]);
   79447*:  358:    assert(it != tails[it->slabs_clsid]);
   79447*:  359:    assert(it->refcount == 0);
        -:  360:
        -:  361:    /* so slab size changer can tell later if item is already free or not */
    79447:  362:    clsid = ITEM_clsid(it);
    79447:  363:    DEBUG_REFCNT(it, 'F');
    79447:  364:    slabs_free(it, ntotal, clsid);
    79447:  365:}
------------------
item_free:
    79447:  353:void item_free(item *it) {
    79447:  354:    size_t ntotal = ITEM_ntotal(it);
    79447:  355:    unsigned int clsid;
   79447*:  356:    assert((it->it_flags & ITEM_LINKED) == 0);
   79447*:  357:    assert(it != heads[it->slabs_clsid]);
   79447*:  358:    assert(it != tails[it->slabs_clsid]);
   79447*:  359:    assert(it->refcount == 0);
        -:  360:
        -:  361:    /* so slab size changer can tell later if item is already free or not */
    79447:  362:    clsid = ITEM_clsid(it);
    79447:  363:    DEBUG_REFCNT(it, 'F');
    79447:  364:    slabs_free(it, ntotal, clsid);
    79447:  365:}
------------------
item_free:
    79447:  353:void item_free(item *it) {
    79447:  354:    size_t ntotal = ITEM_ntotal(it);
    79447:  355:    unsigned int clsid;
   79447*:  356:    assert((it->it_flags & ITEM_LINKED) == 0);
   79447*:  357:    assert(it != heads[it->slabs_clsid]);
   79447*:  358:    assert(it != tails[it->slabs_clsid]);
   79447*:  359:    assert(it->refcount == 0);
        -:  360:
        -:  361:    /* so slab size changer can tell later if item is already free or not */
    79447:  362:    clsid = ITEM_clsid(it);
    79447:  363:    DEBUG_REFCNT(it, 'F');
    79447:  364:    slabs_free(it, ntotal, clsid);
    79447:  365:}
------------------
item_free:
    79447:  353:void item_free(item *it) {
    79447:  354:    size_t ntotal = ITEM_ntotal(it);
    79447:  355:    unsigned int clsid;
   79447*:  356:    assert((it->it_flags & ITEM_LINKED) == 0);
   79447*:  357:    assert(it != heads[it->slabs_clsid]);
   79447*:  358:    assert(it != tails[it->slabs_clsid]);
   79447*:  359:    assert(it->refcount == 0);
        -:  360:
        -:  361:    /* so slab size changer can tell later if item is already free or not */
    79447:  362:    clsid = ITEM_clsid(it);
    79447:  363:    DEBUG_REFCNT(it, 'F');
    79447:  364:    slabs_free(it, ntotal, clsid);
    79447:  365:}
------------------
        -:  366:
        -:  367:/**
        -:  368: * Returns true if an item will fit in the cache (its size does not exceed
        -:  369: * the maximum for a cache entry.)
        -:  370: */
       40:  371:bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {
       40:  372:    char prefix[40];
       40:  373:    uint8_t nsuffix;
       40:  374:    if (nbytes < 2)
        -:  375:        return false;
        -:  376:
       36:  377:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes,
        -:  378:                                     prefix, &nsuffix);
       36:  379:    if (settings.use_cas) {
       36:  380:        ntotal += sizeof(uint64_t);
        -:  381:    }
        -:  382:
       36:  383:    return slabs_clsid(ntotal) != 0;
        -:  384:}
------------------
item_size_ok:
       10:  371:bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {
       10:  372:    char prefix[40];
       10:  373:    uint8_t nsuffix;
       10:  374:    if (nbytes < 2)
        -:  375:        return false;
        -:  376:
        9:  377:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes,
        -:  378:                                     prefix, &nsuffix);
        9:  379:    if (settings.use_cas) {
        9:  380:        ntotal += sizeof(uint64_t);
        -:  381:    }
        -:  382:
        9:  383:    return slabs_clsid(ntotal) != 0;
        -:  384:}
------------------
item_size_ok:
       10:  371:bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {
       10:  372:    char prefix[40];
       10:  373:    uint8_t nsuffix;
       10:  374:    if (nbytes < 2)
        -:  375:        return false;
        -:  376:
        9:  377:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes,
        -:  378:                                     prefix, &nsuffix);
        9:  379:    if (settings.use_cas) {
        9:  380:        ntotal += sizeof(uint64_t);
        -:  381:    }
        -:  382:
        9:  383:    return slabs_clsid(ntotal) != 0;
        -:  384:}
------------------
item_size_ok:
       10:  371:bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {
       10:  372:    char prefix[40];
       10:  373:    uint8_t nsuffix;
       10:  374:    if (nbytes < 2)
        -:  375:        return false;
        -:  376:
        9:  377:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes,
        -:  378:                                     prefix, &nsuffix);
        9:  379:    if (settings.use_cas) {
        9:  380:        ntotal += sizeof(uint64_t);
        -:  381:    }
        -:  382:
        9:  383:    return slabs_clsid(ntotal) != 0;
        -:  384:}
------------------
item_size_ok:
       10:  371:bool item_size_ok(const size_t nkey, const int flags, const int nbytes) {
       10:  372:    char prefix[40];
       10:  373:    uint8_t nsuffix;
       10:  374:    if (nbytes < 2)
        -:  375:        return false;
        -:  376:
        9:  377:    size_t ntotal = item_make_header(nkey + 1, flags, nbytes,
        -:  378:                                     prefix, &nsuffix);
        9:  379:    if (settings.use_cas) {
        9:  380:        ntotal += sizeof(uint64_t);
        -:  381:    }
        -:  382:
        9:  383:    return slabs_clsid(ntotal) != 0;
        -:  384:}
------------------
        -:  385:
   572872:  386:static void do_item_link_q(item *it) { /* item is the new head */
   572872:  387:    item **head, **tail;
  572872*:  388:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  389:
   572872:  390:    head = &heads[it->slabs_clsid];
   572872:  391:    tail = &tails[it->slabs_clsid];
  572872*:  392:    assert(it != *head);
  572872*:  393:    assert((*head && *tail) || (*head == 0 && *tail == 0));
   572872:  394:    it->prev = 0;
   572872:  395:    it->next = *head;
   572872:  396:    if (it->next) it->next->prev = it;
   572872:  397:    *head = it;
   572872:  398:    if (*tail == 0) *tail = it;
   572872:  399:    sizes[it->slabs_clsid]++;
        -:  400:#ifdef EXTSTORE
        -:  401:    if (it->it_flags & ITEM_HDR) {
        -:  402:        sizes_bytes[it->slabs_clsid] += (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  403:    } else {
        -:  404:        sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  405:    }
        -:  406:#else
   572872:  407:    sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  408:#endif
        -:  409:
   572872:  410:    return;
        -:  411:}
------------------
do_item_link_q:
   143218:  386:static void do_item_link_q(item *it) { /* item is the new head */
   143218:  387:    item **head, **tail;
  143218*:  388:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  389:
   143218:  390:    head = &heads[it->slabs_clsid];
   143218:  391:    tail = &tails[it->slabs_clsid];
  143218*:  392:    assert(it != *head);
  143218*:  393:    assert((*head && *tail) || (*head == 0 && *tail == 0));
   143218:  394:    it->prev = 0;
   143218:  395:    it->next = *head;
   143218:  396:    if (it->next) it->next->prev = it;
   143218:  397:    *head = it;
   143218:  398:    if (*tail == 0) *tail = it;
   143218:  399:    sizes[it->slabs_clsid]++;
        -:  400:#ifdef EXTSTORE
        -:  401:    if (it->it_flags & ITEM_HDR) {
        -:  402:        sizes_bytes[it->slabs_clsid] += (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  403:    } else {
        -:  404:        sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  405:    }
        -:  406:#else
   143218:  407:    sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  408:#endif
        -:  409:
   143218:  410:    return;
        -:  411:}
------------------
do_item_link_q:
   143218:  386:static void do_item_link_q(item *it) { /* item is the new head */
   143218:  387:    item **head, **tail;
  143218*:  388:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  389:
   143218:  390:    head = &heads[it->slabs_clsid];
   143218:  391:    tail = &tails[it->slabs_clsid];
  143218*:  392:    assert(it != *head);
  143218*:  393:    assert((*head && *tail) || (*head == 0 && *tail == 0));
   143218:  394:    it->prev = 0;
   143218:  395:    it->next = *head;
   143218:  396:    if (it->next) it->next->prev = it;
   143218:  397:    *head = it;
   143218:  398:    if (*tail == 0) *tail = it;
   143218:  399:    sizes[it->slabs_clsid]++;
        -:  400:#ifdef EXTSTORE
        -:  401:    if (it->it_flags & ITEM_HDR) {
        -:  402:        sizes_bytes[it->slabs_clsid] += (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  403:    } else {
        -:  404:        sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  405:    }
        -:  406:#else
   143218:  407:    sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  408:#endif
        -:  409:
   143218:  410:    return;
        -:  411:}
------------------
do_item_link_q:
   143218:  386:static void do_item_link_q(item *it) { /* item is the new head */
   143218:  387:    item **head, **tail;
  143218*:  388:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  389:
   143218:  390:    head = &heads[it->slabs_clsid];
   143218:  391:    tail = &tails[it->slabs_clsid];
  143218*:  392:    assert(it != *head);
  143218*:  393:    assert((*head && *tail) || (*head == 0 && *tail == 0));
   143218:  394:    it->prev = 0;
   143218:  395:    it->next = *head;
   143218:  396:    if (it->next) it->next->prev = it;
   143218:  397:    *head = it;
   143218:  398:    if (*tail == 0) *tail = it;
   143218:  399:    sizes[it->slabs_clsid]++;
        -:  400:#ifdef EXTSTORE
        -:  401:    if (it->it_flags & ITEM_HDR) {
        -:  402:        sizes_bytes[it->slabs_clsid] += (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  403:    } else {
        -:  404:        sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  405:    }
        -:  406:#else
   143218:  407:    sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  408:#endif
        -:  409:
   143218:  410:    return;
        -:  411:}
------------------
do_item_link_q:
   143218:  386:static void do_item_link_q(item *it) { /* item is the new head */
   143218:  387:    item **head, **tail;
  143218*:  388:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  389:
   143218:  390:    head = &heads[it->slabs_clsid];
   143218:  391:    tail = &tails[it->slabs_clsid];
  143218*:  392:    assert(it != *head);
  143218*:  393:    assert((*head && *tail) || (*head == 0 && *tail == 0));
   143218:  394:    it->prev = 0;
   143218:  395:    it->next = *head;
   143218:  396:    if (it->next) it->next->prev = it;
   143218:  397:    *head = it;
   143218:  398:    if (*tail == 0) *tail = it;
   143218:  399:    sizes[it->slabs_clsid]++;
        -:  400:#ifdef EXTSTORE
        -:  401:    if (it->it_flags & ITEM_HDR) {
        -:  402:        sizes_bytes[it->slabs_clsid] += (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  403:    } else {
        -:  404:        sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  405:    }
        -:  406:#else
   143218:  407:    sizes_bytes[it->slabs_clsid] += ITEM_ntotal(it);
        -:  408:#endif
        -:  409:
   143218:  410:    return;
        -:  411:}
------------------
        -:  412:
   572868:  413:static void item_link_q(item *it) {
   572868:  414:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   572868:  415:    do_item_link_q(it);
   572868:  416:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   572868:  417:}
------------------
item_link_q:
   143217:  413:static void item_link_q(item *it) {
   143217:  414:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   143217:  415:    do_item_link_q(it);
   143217:  416:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   143217:  417:}
------------------
item_link_q:
   143217:  413:static void item_link_q(item *it) {
   143217:  414:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   143217:  415:    do_item_link_q(it);
   143217:  416:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   143217:  417:}
------------------
item_link_q:
   143217:  413:static void item_link_q(item *it) {
   143217:  414:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   143217:  415:    do_item_link_q(it);
   143217:  416:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   143217:  417:}
------------------
item_link_q:
   143217:  413:static void item_link_q(item *it) {
   143217:  414:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   143217:  415:    do_item_link_q(it);
   143217:  416:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   143217:  417:}
------------------
        -:  418:
        4:  419:static void item_link_q_warm(item *it) {
        4:  420:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
        4:  421:    do_item_link_q(it);
        4:  422:    itemstats[it->slabs_clsid].moves_to_warm++;
        4:  423:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
        4:  424:}
------------------
item_link_q_warm:
        1:  419:static void item_link_q_warm(item *it) {
        1:  420:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
        1:  421:    do_item_link_q(it);
        1:  422:    itemstats[it->slabs_clsid].moves_to_warm++;
        1:  423:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
        1:  424:}
------------------
item_link_q_warm:
        1:  419:static void item_link_q_warm(item *it) {
        1:  420:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
        1:  421:    do_item_link_q(it);
        1:  422:    itemstats[it->slabs_clsid].moves_to_warm++;
        1:  423:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
        1:  424:}
------------------
item_link_q_warm:
        1:  419:static void item_link_q_warm(item *it) {
        1:  420:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
        1:  421:    do_item_link_q(it);
        1:  422:    itemstats[it->slabs_clsid].moves_to_warm++;
        1:  423:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
        1:  424:}
------------------
item_link_q_warm:
        1:  419:static void item_link_q_warm(item *it) {
        1:  420:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
        1:  421:    do_item_link_q(it);
        1:  422:    itemstats[it->slabs_clsid].moves_to_warm++;
        1:  423:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
        1:  424:}
------------------
        -:  425:
   415600:  426:static void do_item_unlink_q(item *it) {
   415600:  427:    item **head, **tail;
   415600:  428:    head = &heads[it->slabs_clsid];
   415600:  429:    tail = &tails[it->slabs_clsid];
        -:  430:
   415600:  431:    if (*head == it) {
  188680*:  432:        assert(it->prev == 0);
   188680:  433:        *head = it->next;
        -:  434:    }
   415600:  435:    if (*tail == it) {
  309372*:  436:        assert(it->next == 0);
   309372:  437:        *tail = it->prev;
        -:  438:    }
  415600*:  439:    assert(it->next != it);
  415600*:  440:    assert(it->prev != it);
        -:  441:
   415600:  442:    if (it->next) it->next->prev = it->prev;
   415600:  443:    if (it->prev) it->prev->next = it->next;
   415600:  444:    sizes[it->slabs_clsid]--;
        -:  445:#ifdef EXTSTORE
        -:  446:    if (it->it_flags & ITEM_HDR) {
        -:  447:        sizes_bytes[it->slabs_clsid] -= (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  448:    } else {
        -:  449:        sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  450:    }
        -:  451:#else
   415600:  452:    sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  453:#endif
        -:  454:
   415600:  455:    return;
        -:  456:}
------------------
do_item_unlink_q:
   103900:  426:static void do_item_unlink_q(item *it) {
   103900:  427:    item **head, **tail;
   103900:  428:    head = &heads[it->slabs_clsid];
   103900:  429:    tail = &tails[it->slabs_clsid];
        -:  430:
   103900:  431:    if (*head == it) {
   47170*:  432:        assert(it->prev == 0);
    47170:  433:        *head = it->next;
        -:  434:    }
   103900:  435:    if (*tail == it) {
   77343*:  436:        assert(it->next == 0);
    77343:  437:        *tail = it->prev;
        -:  438:    }
  103900*:  439:    assert(it->next != it);
  103900*:  440:    assert(it->prev != it);
        -:  441:
   103900:  442:    if (it->next) it->next->prev = it->prev;
   103900:  443:    if (it->prev) it->prev->next = it->next;
   103900:  444:    sizes[it->slabs_clsid]--;
        -:  445:#ifdef EXTSTORE
        -:  446:    if (it->it_flags & ITEM_HDR) {
        -:  447:        sizes_bytes[it->slabs_clsid] -= (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  448:    } else {
        -:  449:        sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  450:    }
        -:  451:#else
   103900:  452:    sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  453:#endif
        -:  454:
   103900:  455:    return;
        -:  456:}
------------------
do_item_unlink_q:
   103900:  426:static void do_item_unlink_q(item *it) {
   103900:  427:    item **head, **tail;
   103900:  428:    head = &heads[it->slabs_clsid];
   103900:  429:    tail = &tails[it->slabs_clsid];
        -:  430:
   103900:  431:    if (*head == it) {
   47170*:  432:        assert(it->prev == 0);
    47170:  433:        *head = it->next;
        -:  434:    }
   103900:  435:    if (*tail == it) {
   77343*:  436:        assert(it->next == 0);
    77343:  437:        *tail = it->prev;
        -:  438:    }
  103900*:  439:    assert(it->next != it);
  103900*:  440:    assert(it->prev != it);
        -:  441:
   103900:  442:    if (it->next) it->next->prev = it->prev;
   103900:  443:    if (it->prev) it->prev->next = it->next;
   103900:  444:    sizes[it->slabs_clsid]--;
        -:  445:#ifdef EXTSTORE
        -:  446:    if (it->it_flags & ITEM_HDR) {
        -:  447:        sizes_bytes[it->slabs_clsid] -= (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  448:    } else {
        -:  449:        sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  450:    }
        -:  451:#else
   103900:  452:    sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  453:#endif
        -:  454:
   103900:  455:    return;
        -:  456:}
------------------
do_item_unlink_q:
   103900:  426:static void do_item_unlink_q(item *it) {
   103900:  427:    item **head, **tail;
   103900:  428:    head = &heads[it->slabs_clsid];
   103900:  429:    tail = &tails[it->slabs_clsid];
        -:  430:
   103900:  431:    if (*head == it) {
   47170*:  432:        assert(it->prev == 0);
    47170:  433:        *head = it->next;
        -:  434:    }
   103900:  435:    if (*tail == it) {
   77343*:  436:        assert(it->next == 0);
    77343:  437:        *tail = it->prev;
        -:  438:    }
  103900*:  439:    assert(it->next != it);
  103900*:  440:    assert(it->prev != it);
        -:  441:
   103900:  442:    if (it->next) it->next->prev = it->prev;
   103900:  443:    if (it->prev) it->prev->next = it->next;
   103900:  444:    sizes[it->slabs_clsid]--;
        -:  445:#ifdef EXTSTORE
        -:  446:    if (it->it_flags & ITEM_HDR) {
        -:  447:        sizes_bytes[it->slabs_clsid] -= (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  448:    } else {
        -:  449:        sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  450:    }
        -:  451:#else
   103900:  452:    sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  453:#endif
        -:  454:
   103900:  455:    return;
        -:  456:}
------------------
do_item_unlink_q:
   103900:  426:static void do_item_unlink_q(item *it) {
   103900:  427:    item **head, **tail;
   103900:  428:    head = &heads[it->slabs_clsid];
   103900:  429:    tail = &tails[it->slabs_clsid];
        -:  430:
   103900:  431:    if (*head == it) {
   47170*:  432:        assert(it->prev == 0);
    47170:  433:        *head = it->next;
        -:  434:    }
   103900:  435:    if (*tail == it) {
   77343*:  436:        assert(it->next == 0);
    77343:  437:        *tail = it->prev;
        -:  438:    }
  103900*:  439:    assert(it->next != it);
  103900*:  440:    assert(it->prev != it);
        -:  441:
   103900:  442:    if (it->next) it->next->prev = it->prev;
   103900:  443:    if (it->prev) it->prev->next = it->next;
   103900:  444:    sizes[it->slabs_clsid]--;
        -:  445:#ifdef EXTSTORE
        -:  446:    if (it->it_flags & ITEM_HDR) {
        -:  447:        sizes_bytes[it->slabs_clsid] -= (ITEM_ntotal(it) - it->nbytes) + sizeof(item_hdr);
        -:  448:    } else {
        -:  449:        sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  450:    }
        -:  451:#else
   103900:  452:    sizes_bytes[it->slabs_clsid] -= ITEM_ntotal(it);
        -:  453:#endif
        -:  454:
   103900:  455:    return;
        -:  456:}
------------------
        -:  457:
   161268:  458:static void item_unlink_q(item *it) {
   161268:  459:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
   161268:  460:    do_item_unlink_q(it);
   161268:  461:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
   161268:  462:}
------------------
item_unlink_q:
    40317:  458:static void item_unlink_q(item *it) {
    40317:  459:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
    40317:  460:    do_item_unlink_q(it);
    40317:  461:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
    40317:  462:}
------------------
item_unlink_q:
    40317:  458:static void item_unlink_q(item *it) {
    40317:  459:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
    40317:  460:    do_item_unlink_q(it);
    40317:  461:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
    40317:  462:}
------------------
item_unlink_q:
    40317:  458:static void item_unlink_q(item *it) {
    40317:  459:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
    40317:  460:    do_item_unlink_q(it);
    40317:  461:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
    40317:  462:}
------------------
item_unlink_q:
    40317:  458:static void item_unlink_q(item *it) {
    40317:  459:    pthread_mutex_lock(&lru_locks[it->slabs_clsid]);
    40317:  460:    do_item_unlink_q(it);
    40317:  461:    pthread_mutex_unlock(&lru_locks[it->slabs_clsid]);
    40317:  462:}
------------------
        -:  463:
   416868:  464:int do_item_link(item *it, const uint32_t hv) {
   416868:  465:    MEMCACHED_ITEM_LINK(ITEM_key(it), it->nkey, it->nbytes);
  416868*:  466:    assert((it->it_flags & (ITEM_LINKED|ITEM_SLABBED)) == 0);
   416868:  467:    it->it_flags |= ITEM_LINKED;
   416868:  468:    it->time = current_time;
        -:  469:
   416868:  470:    STATS_LOCK();
   416868:  471:    stats_state.curr_bytes += ITEM_ntotal(it);
   416868:  472:    stats_state.curr_items += 1;
   416868:  473:    stats.total_items += 1;
   416868:  474:    STATS_UNLOCK();
        -:  475:
        -:  476:    /* Allocate a new CAS ID on link. */
   416868:  477:    ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
   416868:  478:    assoc_insert(it, hv);
   416868:  479:    item_link_q(it);
   416868:  480:    refcount_incr(it);
   416868:  481:    item_stats_sizes_add(it);
        -:  482:
   416868:  483:    return 1;
        -:  484:}
------------------
do_item_link:
   104217:  464:int do_item_link(item *it, const uint32_t hv) {
   104217:  465:    MEMCACHED_ITEM_LINK(ITEM_key(it), it->nkey, it->nbytes);
  104217*:  466:    assert((it->it_flags & (ITEM_LINKED|ITEM_SLABBED)) == 0);
   104217:  467:    it->it_flags |= ITEM_LINKED;
   104217:  468:    it->time = current_time;
        -:  469:
   104217:  470:    STATS_LOCK();
   104217:  471:    stats_state.curr_bytes += ITEM_ntotal(it);
   104217:  472:    stats_state.curr_items += 1;
   104217:  473:    stats.total_items += 1;
   104217:  474:    STATS_UNLOCK();
        -:  475:
        -:  476:    /* Allocate a new CAS ID on link. */
   104217:  477:    ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
   104217:  478:    assoc_insert(it, hv);
   104217:  479:    item_link_q(it);
   104217:  480:    refcount_incr(it);
   104217:  481:    item_stats_sizes_add(it);
        -:  482:
   104217:  483:    return 1;
        -:  484:}
------------------
do_item_link:
   104217:  464:int do_item_link(item *it, const uint32_t hv) {
   104217:  465:    MEMCACHED_ITEM_LINK(ITEM_key(it), it->nkey, it->nbytes);
  104217*:  466:    assert((it->it_flags & (ITEM_LINKED|ITEM_SLABBED)) == 0);
   104217:  467:    it->it_flags |= ITEM_LINKED;
   104217:  468:    it->time = current_time;
        -:  469:
   104217:  470:    STATS_LOCK();
   104217:  471:    stats_state.curr_bytes += ITEM_ntotal(it);
   104217:  472:    stats_state.curr_items += 1;
   104217:  473:    stats.total_items += 1;
   104217:  474:    STATS_UNLOCK();
        -:  475:
        -:  476:    /* Allocate a new CAS ID on link. */
   104217:  477:    ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
   104217:  478:    assoc_insert(it, hv);
   104217:  479:    item_link_q(it);
   104217:  480:    refcount_incr(it);
   104217:  481:    item_stats_sizes_add(it);
        -:  482:
   104217:  483:    return 1;
        -:  484:}
------------------
do_item_link:
   104217:  464:int do_item_link(item *it, const uint32_t hv) {
   104217:  465:    MEMCACHED_ITEM_LINK(ITEM_key(it), it->nkey, it->nbytes);
  104217*:  466:    assert((it->it_flags & (ITEM_LINKED|ITEM_SLABBED)) == 0);
   104217:  467:    it->it_flags |= ITEM_LINKED;
   104217:  468:    it->time = current_time;
        -:  469:
   104217:  470:    STATS_LOCK();
   104217:  471:    stats_state.curr_bytes += ITEM_ntotal(it);
   104217:  472:    stats_state.curr_items += 1;
   104217:  473:    stats.total_items += 1;
   104217:  474:    STATS_UNLOCK();
        -:  475:
        -:  476:    /* Allocate a new CAS ID on link. */
   104217:  477:    ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
   104217:  478:    assoc_insert(it, hv);
   104217:  479:    item_link_q(it);
   104217:  480:    refcount_incr(it);
   104217:  481:    item_stats_sizes_add(it);
        -:  482:
   104217:  483:    return 1;
        -:  484:}
------------------
do_item_link:
   104217:  464:int do_item_link(item *it, const uint32_t hv) {
   104217:  465:    MEMCACHED_ITEM_LINK(ITEM_key(it), it->nkey, it->nbytes);
  104217*:  466:    assert((it->it_flags & (ITEM_LINKED|ITEM_SLABBED)) == 0);
   104217:  467:    it->it_flags |= ITEM_LINKED;
   104217:  468:    it->time = current_time;
        -:  469:
   104217:  470:    STATS_LOCK();
   104217:  471:    stats_state.curr_bytes += ITEM_ntotal(it);
   104217:  472:    stats_state.curr_items += 1;
   104217:  473:    stats.total_items += 1;
   104217:  474:    STATS_UNLOCK();
        -:  475:
        -:  476:    /* Allocate a new CAS ID on link. */
   104217:  477:    ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);
   104217:  478:    assoc_insert(it, hv);
   104217:  479:    item_link_q(it);
   104217:  480:    refcount_incr(it);
   104217:  481:    item_stats_sizes_add(it);
        -:  482:
   104217:  483:    return 1;
        -:  484:}
------------------
        -:  485:
   161264:  486:void do_item_unlink(item *it, const uint32_t hv) {
   161264:  487:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
   161264:  488:    if ((it->it_flags & ITEM_LINKED) != 0) {
   161264:  489:        it->it_flags &= ~ITEM_LINKED;
   161264:  490:        STATS_LOCK();
   161264:  491:        stats_state.curr_bytes -= ITEM_ntotal(it);
   161264:  492:        stats_state.curr_items -= 1;
   161264:  493:        STATS_UNLOCK();
   161264:  494:        item_stats_sizes_remove(it);
   161264:  495:        assoc_delete(ITEM_key(it), it->nkey, hv);
   161264:  496:        item_unlink_q(it);
   161264:  497:        do_item_remove(it);
        -:  498:    }
   161264:  499:}
------------------
do_item_unlink:
    40316:  486:void do_item_unlink(item *it, const uint32_t hv) {
    40316:  487:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    40316:  488:    if ((it->it_flags & ITEM_LINKED) != 0) {
    40316:  489:        it->it_flags &= ~ITEM_LINKED;
    40316:  490:        STATS_LOCK();
    40316:  491:        stats_state.curr_bytes -= ITEM_ntotal(it);
    40316:  492:        stats_state.curr_items -= 1;
    40316:  493:        STATS_UNLOCK();
    40316:  494:        item_stats_sizes_remove(it);
    40316:  495:        assoc_delete(ITEM_key(it), it->nkey, hv);
    40316:  496:        item_unlink_q(it);
    40316:  497:        do_item_remove(it);
        -:  498:    }
    40316:  499:}
------------------
do_item_unlink:
    40316:  486:void do_item_unlink(item *it, const uint32_t hv) {
    40316:  487:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    40316:  488:    if ((it->it_flags & ITEM_LINKED) != 0) {
    40316:  489:        it->it_flags &= ~ITEM_LINKED;
    40316:  490:        STATS_LOCK();
    40316:  491:        stats_state.curr_bytes -= ITEM_ntotal(it);
    40316:  492:        stats_state.curr_items -= 1;
    40316:  493:        STATS_UNLOCK();
    40316:  494:        item_stats_sizes_remove(it);
    40316:  495:        assoc_delete(ITEM_key(it), it->nkey, hv);
    40316:  496:        item_unlink_q(it);
    40316:  497:        do_item_remove(it);
        -:  498:    }
    40316:  499:}
------------------
do_item_unlink:
    40316:  486:void do_item_unlink(item *it, const uint32_t hv) {
    40316:  487:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    40316:  488:    if ((it->it_flags & ITEM_LINKED) != 0) {
    40316:  489:        it->it_flags &= ~ITEM_LINKED;
    40316:  490:        STATS_LOCK();
    40316:  491:        stats_state.curr_bytes -= ITEM_ntotal(it);
    40316:  492:        stats_state.curr_items -= 1;
    40316:  493:        STATS_UNLOCK();
    40316:  494:        item_stats_sizes_remove(it);
    40316:  495:        assoc_delete(ITEM_key(it), it->nkey, hv);
    40316:  496:        item_unlink_q(it);
    40316:  497:        do_item_remove(it);
        -:  498:    }
    40316:  499:}
------------------
do_item_unlink:
    40316:  486:void do_item_unlink(item *it, const uint32_t hv) {
    40316:  487:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    40316:  488:    if ((it->it_flags & ITEM_LINKED) != 0) {
    40316:  489:        it->it_flags &= ~ITEM_LINKED;
    40316:  490:        STATS_LOCK();
    40316:  491:        stats_state.curr_bytes -= ITEM_ntotal(it);
    40316:  492:        stats_state.curr_items -= 1;
    40316:  493:        STATS_UNLOCK();
    40316:  494:        item_stats_sizes_remove(it);
    40316:  495:        assoc_delete(ITEM_key(it), it->nkey, hv);
    40316:  496:        item_unlink_q(it);
    40316:  497:        do_item_remove(it);
        -:  498:    }
    40316:  499:}
------------------
        -:  500:
        -:  501:/* FIXME: Is it necessary to keep this copy/pasted code? */
    98332:  502:void do_item_unlink_nolock(item *it, const uint32_t hv) {
    98332:  503:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    98332:  504:    if ((it->it_flags & ITEM_LINKED) != 0) {
    98332:  505:        it->it_flags &= ~ITEM_LINKED;
    98332:  506:        STATS_LOCK();
    98332:  507:        stats_state.curr_bytes -= ITEM_ntotal(it);
    98332:  508:        stats_state.curr_items -= 1;
    98332:  509:        STATS_UNLOCK();
    98332:  510:        item_stats_sizes_remove(it);
    98332:  511:        assoc_delete(ITEM_key(it), it->nkey, hv);
    98332:  512:        do_item_unlink_q(it);
    98332:  513:        do_item_remove(it);
        -:  514:    }
    98332:  515:}
------------------
do_item_unlink_nolock:
    24583:  502:void do_item_unlink_nolock(item *it, const uint32_t hv) {
    24583:  503:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    24583:  504:    if ((it->it_flags & ITEM_LINKED) != 0) {
    24583:  505:        it->it_flags &= ~ITEM_LINKED;
    24583:  506:        STATS_LOCK();
    24583:  507:        stats_state.curr_bytes -= ITEM_ntotal(it);
    24583:  508:        stats_state.curr_items -= 1;
    24583:  509:        STATS_UNLOCK();
    24583:  510:        item_stats_sizes_remove(it);
    24583:  511:        assoc_delete(ITEM_key(it), it->nkey, hv);
    24583:  512:        do_item_unlink_q(it);
    24583:  513:        do_item_remove(it);
        -:  514:    }
    24583:  515:}
------------------
do_item_unlink_nolock:
    24583:  502:void do_item_unlink_nolock(item *it, const uint32_t hv) {
    24583:  503:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    24583:  504:    if ((it->it_flags & ITEM_LINKED) != 0) {
    24583:  505:        it->it_flags &= ~ITEM_LINKED;
    24583:  506:        STATS_LOCK();
    24583:  507:        stats_state.curr_bytes -= ITEM_ntotal(it);
    24583:  508:        stats_state.curr_items -= 1;
    24583:  509:        STATS_UNLOCK();
    24583:  510:        item_stats_sizes_remove(it);
    24583:  511:        assoc_delete(ITEM_key(it), it->nkey, hv);
    24583:  512:        do_item_unlink_q(it);
    24583:  513:        do_item_remove(it);
        -:  514:    }
    24583:  515:}
------------------
do_item_unlink_nolock:
    24583:  502:void do_item_unlink_nolock(item *it, const uint32_t hv) {
    24583:  503:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    24583:  504:    if ((it->it_flags & ITEM_LINKED) != 0) {
    24583:  505:        it->it_flags &= ~ITEM_LINKED;
    24583:  506:        STATS_LOCK();
    24583:  507:        stats_state.curr_bytes -= ITEM_ntotal(it);
    24583:  508:        stats_state.curr_items -= 1;
    24583:  509:        STATS_UNLOCK();
    24583:  510:        item_stats_sizes_remove(it);
    24583:  511:        assoc_delete(ITEM_key(it), it->nkey, hv);
    24583:  512:        do_item_unlink_q(it);
    24583:  513:        do_item_remove(it);
        -:  514:    }
    24583:  515:}
------------------
do_item_unlink_nolock:
    24583:  502:void do_item_unlink_nolock(item *it, const uint32_t hv) {
    24583:  503:    MEMCACHED_ITEM_UNLINK(ITEM_key(it), it->nkey, it->nbytes);
    24583:  504:    if ((it->it_flags & ITEM_LINKED) != 0) {
    24583:  505:        it->it_flags &= ~ITEM_LINKED;
    24583:  506:        STATS_LOCK();
    24583:  507:        stats_state.curr_bytes -= ITEM_ntotal(it);
    24583:  508:        stats_state.curr_items -= 1;
    24583:  509:        STATS_UNLOCK();
    24583:  510:        item_stats_sizes_remove(it);
    24583:  511:        assoc_delete(ITEM_key(it), it->nkey, hv);
    24583:  512:        do_item_unlink_q(it);
    24583:  513:        do_item_remove(it);
        -:  514:    }
    24583:  515:}
------------------
        -:  516:
  1490352:  517:void do_item_remove(item *it) {
  1490352:  518:    MEMCACHED_ITEM_REMOVE(ITEM_key(it), it->nkey, it->nbytes);
 1490352*:  519:    assert((it->it_flags & ITEM_SLABBED) == 0);
 1490352*:  520:    assert(it->refcount > 0);
        -:  521:
  1490352:  522:    if (refcount_decr(it) == 0) {
   317788:  523:        item_free(it);
        -:  524:    }
  1490352:  525:}
------------------
do_item_remove:
   372588:  517:void do_item_remove(item *it) {
   372588:  518:    MEMCACHED_ITEM_REMOVE(ITEM_key(it), it->nkey, it->nbytes);
  372588*:  519:    assert((it->it_flags & ITEM_SLABBED) == 0);
  372588*:  520:    assert(it->refcount > 0);
        -:  521:
   372588:  522:    if (refcount_decr(it) == 0) {
    79447:  523:        item_free(it);
        -:  524:    }
   372588:  525:}
------------------
do_item_remove:
   372588:  517:void do_item_remove(item *it) {
   372588:  518:    MEMCACHED_ITEM_REMOVE(ITEM_key(it), it->nkey, it->nbytes);
  372588*:  519:    assert((it->it_flags & ITEM_SLABBED) == 0);
  372588*:  520:    assert(it->refcount > 0);
        -:  521:
   372588:  522:    if (refcount_decr(it) == 0) {
    79447:  523:        item_free(it);
        -:  524:    }
   372588:  525:}
------------------
do_item_remove:
   372588:  517:void do_item_remove(item *it) {
   372588:  518:    MEMCACHED_ITEM_REMOVE(ITEM_key(it), it->nkey, it->nbytes);
  372588*:  519:    assert((it->it_flags & ITEM_SLABBED) == 0);
  372588*:  520:    assert(it->refcount > 0);
        -:  521:
   372588:  522:    if (refcount_decr(it) == 0) {
    79447:  523:        item_free(it);
        -:  524:    }
   372588:  525:}
------------------
do_item_remove:
   372588:  517:void do_item_remove(item *it) {
   372588:  518:    MEMCACHED_ITEM_REMOVE(ITEM_key(it), it->nkey, it->nbytes);
  372588*:  519:    assert((it->it_flags & ITEM_SLABBED) == 0);
  372588*:  520:    assert(it->refcount > 0);
        -:  521:
   372588:  522:    if (refcount_decr(it) == 0) {
    79447:  523:        item_free(it);
        -:  524:    }
   372588:  525:}
------------------
        -:  526:
        -:  527:/* Copy/paste to avoid adding two extra branches for all common calls, since
        -:  528: * _nolock is only used in an uncommon case where we want to relink. */
        4:  529:void do_item_update_nolock(item *it) {
        4:  530:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        4:  531:    if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  532:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  533:
    #####:  534:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  535:            do_item_unlink_q(it);
    #####:  536:            it->time = current_time;
    #####:  537:            do_item_link_q(it);
        -:  538:        }
        -:  539:    }
        4:  540:}
------------------
do_item_update_nolock:
        1:  529:void do_item_update_nolock(item *it) {
        1:  530:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        1:  531:    if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  532:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  533:
    #####:  534:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  535:            do_item_unlink_q(it);
    #####:  536:            it->time = current_time;
    #####:  537:            do_item_link_q(it);
        -:  538:        }
        -:  539:    }
        1:  540:}
------------------
do_item_update_nolock:
        1:  529:void do_item_update_nolock(item *it) {
        1:  530:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        1:  531:    if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  532:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  533:
    #####:  534:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  535:            do_item_unlink_q(it);
    #####:  536:            it->time = current_time;
    #####:  537:            do_item_link_q(it);
        -:  538:        }
        -:  539:    }
        1:  540:}
------------------
do_item_update_nolock:
        1:  529:void do_item_update_nolock(item *it) {
        1:  530:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        1:  531:    if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  532:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  533:
    #####:  534:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  535:            do_item_unlink_q(it);
    #####:  536:            it->time = current_time;
    #####:  537:            do_item_link_q(it);
        -:  538:        }
        -:  539:    }
        1:  540:}
------------------
do_item_update_nolock:
        1:  529:void do_item_update_nolock(item *it) {
        1:  530:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        1:  531:    if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  532:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  533:
    #####:  534:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  535:            do_item_unlink_q(it);
    #####:  536:            it->time = current_time;
    #####:  537:            do_item_link_q(it);
        -:  538:        }
        -:  539:    }
        1:  540:}
------------------
        -:  541:
        -:  542:/* Bump the last accessed time, or relink if we're in compat mode */
     3680:  543:void do_item_update(item *it) {
     3680:  544:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        -:  545:
        -:  546:    /* Hits to COLD_LRU immediately move to WARM. */
     3680:  547:    if (settings.lru_segmented) {
     388*:  548:        assert((it->it_flags & ITEM_SLABBED) == 0);
      388:  549:        if ((it->it_flags & ITEM_LINKED) != 0) {
      384:  550:            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
        4:  551:                it->time = current_time;
        4:  552:                item_unlink_q(it);
        4:  553:                it->slabs_clsid = ITEM_clsid(it);
        4:  554:                it->slabs_clsid |= WARM_LRU;
        4:  555:                it->it_flags &= ~ITEM_ACTIVE;
        4:  556:                item_link_q_warm(it);
      380:  557:            } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  558:                it->time = current_time;
        -:  559:            }
        -:  560:        }
     3292:  561:    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  562:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  563:
    #####:  564:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  565:            it->time = current_time;
    #####:  566:            item_unlink_q(it);
    #####:  567:            item_link_q(it);
        -:  568:        }
        -:  569:    }
     3680:  570:}
------------------
do_item_update:
      920:  543:void do_item_update(item *it) {
      920:  544:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        -:  545:
        -:  546:    /* Hits to COLD_LRU immediately move to WARM. */
      920:  547:    if (settings.lru_segmented) {
      97*:  548:        assert((it->it_flags & ITEM_SLABBED) == 0);
       97:  549:        if ((it->it_flags & ITEM_LINKED) != 0) {
       96:  550:            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
        1:  551:                it->time = current_time;
        1:  552:                item_unlink_q(it);
        1:  553:                it->slabs_clsid = ITEM_clsid(it);
        1:  554:                it->slabs_clsid |= WARM_LRU;
        1:  555:                it->it_flags &= ~ITEM_ACTIVE;
        1:  556:                item_link_q_warm(it);
       95:  557:            } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  558:                it->time = current_time;
        -:  559:            }
        -:  560:        }
      823:  561:    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  562:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  563:
    #####:  564:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  565:            it->time = current_time;
    #####:  566:            item_unlink_q(it);
    #####:  567:            item_link_q(it);
        -:  568:        }
        -:  569:    }
      920:  570:}
------------------
do_item_update:
      920:  543:void do_item_update(item *it) {
      920:  544:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        -:  545:
        -:  546:    /* Hits to COLD_LRU immediately move to WARM. */
      920:  547:    if (settings.lru_segmented) {
      97*:  548:        assert((it->it_flags & ITEM_SLABBED) == 0);
       97:  549:        if ((it->it_flags & ITEM_LINKED) != 0) {
       96:  550:            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
        1:  551:                it->time = current_time;
        1:  552:                item_unlink_q(it);
        1:  553:                it->slabs_clsid = ITEM_clsid(it);
        1:  554:                it->slabs_clsid |= WARM_LRU;
        1:  555:                it->it_flags &= ~ITEM_ACTIVE;
        1:  556:                item_link_q_warm(it);
       95:  557:            } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  558:                it->time = current_time;
        -:  559:            }
        -:  560:        }
      823:  561:    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  562:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  563:
    #####:  564:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  565:            it->time = current_time;
    #####:  566:            item_unlink_q(it);
    #####:  567:            item_link_q(it);
        -:  568:        }
        -:  569:    }
      920:  570:}
------------------
do_item_update:
      920:  543:void do_item_update(item *it) {
      920:  544:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        -:  545:
        -:  546:    /* Hits to COLD_LRU immediately move to WARM. */
      920:  547:    if (settings.lru_segmented) {
      97*:  548:        assert((it->it_flags & ITEM_SLABBED) == 0);
       97:  549:        if ((it->it_flags & ITEM_LINKED) != 0) {
       96:  550:            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
        1:  551:                it->time = current_time;
        1:  552:                item_unlink_q(it);
        1:  553:                it->slabs_clsid = ITEM_clsid(it);
        1:  554:                it->slabs_clsid |= WARM_LRU;
        1:  555:                it->it_flags &= ~ITEM_ACTIVE;
        1:  556:                item_link_q_warm(it);
       95:  557:            } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  558:                it->time = current_time;
        -:  559:            }
        -:  560:        }
      823:  561:    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  562:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  563:
    #####:  564:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  565:            it->time = current_time;
    #####:  566:            item_unlink_q(it);
    #####:  567:            item_link_q(it);
        -:  568:        }
        -:  569:    }
      920:  570:}
------------------
do_item_update:
      920:  543:void do_item_update(item *it) {
      920:  544:    MEMCACHED_ITEM_UPDATE(ITEM_key(it), it->nkey, it->nbytes);
        -:  545:
        -:  546:    /* Hits to COLD_LRU immediately move to WARM. */
      920:  547:    if (settings.lru_segmented) {
      97*:  548:        assert((it->it_flags & ITEM_SLABBED) == 0);
       97:  549:        if ((it->it_flags & ITEM_LINKED) != 0) {
       96:  550:            if (ITEM_lruid(it) == COLD_LRU && (it->it_flags & ITEM_ACTIVE)) {
        1:  551:                it->time = current_time;
        1:  552:                item_unlink_q(it);
        1:  553:                it->slabs_clsid = ITEM_clsid(it);
        1:  554:                it->slabs_clsid |= WARM_LRU;
        1:  555:                it->it_flags &= ~ITEM_ACTIVE;
        1:  556:                item_link_q_warm(it);
       95:  557:            } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  558:                it->time = current_time;
        -:  559:            }
        -:  560:        }
      823:  561:    } else if (it->time < current_time - ITEM_UPDATE_INTERVAL) {
    #####:  562:        assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  563:
    #####:  564:        if ((it->it_flags & ITEM_LINKED) != 0) {
    #####:  565:            it->time = current_time;
    #####:  566:            item_unlink_q(it);
    #####:  567:            item_link_q(it);
        -:  568:        }
        -:  569:    }
      920:  570:}
------------------
        -:  571:
   148648:  572:int do_item_replace(item *it, item *new_it, const uint32_t hv) {
        -:  573:    MEMCACHED_ITEM_REPLACE(ITEM_key(it), it->nkey, it->nbytes,
   148648:  574:                           ITEM_key(new_it), new_it->nkey, new_it->nbytes);
  148648*:  575:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  576:
   148648:  577:    do_item_unlink(it, hv);
   148648:  578:    return do_item_link(new_it, hv);
        -:  579:}
------------------
do_item_replace:
    37162:  572:int do_item_replace(item *it, item *new_it, const uint32_t hv) {
        -:  573:    MEMCACHED_ITEM_REPLACE(ITEM_key(it), it->nkey, it->nbytes,
    37162:  574:                           ITEM_key(new_it), new_it->nkey, new_it->nbytes);
   37162*:  575:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  576:
    37162:  577:    do_item_unlink(it, hv);
    37162:  578:    return do_item_link(new_it, hv);
        -:  579:}
------------------
do_item_replace:
    37162:  572:int do_item_replace(item *it, item *new_it, const uint32_t hv) {
        -:  573:    MEMCACHED_ITEM_REPLACE(ITEM_key(it), it->nkey, it->nbytes,
    37162:  574:                           ITEM_key(new_it), new_it->nkey, new_it->nbytes);
   37162*:  575:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  576:
    37162:  577:    do_item_unlink(it, hv);
    37162:  578:    return do_item_link(new_it, hv);
        -:  579:}
------------------
do_item_replace:
    37162:  572:int do_item_replace(item *it, item *new_it, const uint32_t hv) {
        -:  573:    MEMCACHED_ITEM_REPLACE(ITEM_key(it), it->nkey, it->nbytes,
    37162:  574:                           ITEM_key(new_it), new_it->nkey, new_it->nbytes);
   37162*:  575:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  576:
    37162:  577:    do_item_unlink(it, hv);
    37162:  578:    return do_item_link(new_it, hv);
        -:  579:}
------------------
do_item_replace:
    37162:  572:int do_item_replace(item *it, item *new_it, const uint32_t hv) {
        -:  573:    MEMCACHED_ITEM_REPLACE(ITEM_key(it), it->nkey, it->nbytes,
    37162:  574:                           ITEM_key(new_it), new_it->nkey, new_it->nbytes);
   37162*:  575:    assert((it->it_flags & ITEM_SLABBED) == 0);
        -:  576:
    37162:  577:    do_item_unlink(it, hv);
    37162:  578:    return do_item_link(new_it, hv);
        -:  579:}
------------------
        -:  580:
        -:  581:/*@null@*/
        -:  582:/* This is walking the line of violating lock order, but I think it's safe.
        -:  583: * If the LRU lock is held, an item in the LRU cannot be wiped and freed.
        -:  584: * The data could possibly be overwritten, but this is only accessing the
        -:  585: * headers.
        -:  586: * It may not be the best idea to leave it like this, but for now it's safe.
        -:  587: */
        8:  588:char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {
        8:  589:    unsigned int memlimit = 2 * 1024 * 1024;   /* 2MB max response size */
        8:  590:    char *buffer;
        8:  591:    unsigned int bufcurr;
        8:  592:    item *it;
        8:  593:    unsigned int len;
        8:  594:    unsigned int shown = 0;
        8:  595:    char key_temp[KEY_MAX_LENGTH + 1];
        8:  596:    char temp[512];
        8:  597:    unsigned int id = slabs_clsid;
        8:  598:    id |= COLD_LRU;
        -:  599:
        8:  600:    pthread_mutex_lock(&lru_locks[id]);
        8:  601:    it = heads[id];
        -:  602:
        8:  603:    buffer = malloc((size_t)memlimit);
        8:  604:    if (buffer == 0) {
        -:  605:        return NULL;
        -:  606:    }
        -:  607:    bufcurr = 0;
        -:  608:
       12:  609:    while (it != NULL && (limit == 0 || shown < limit)) {
       4*:  610:        assert(it->nkey <= KEY_MAX_LENGTH);
       4*:  611:        if (it->nbytes == 0 && it->nkey == 0) {
    #####:  612:            it = it->next;
    #####:  613:            continue;
        -:  614:        }
        -:  615:        /* Copy the key since it may not be null-terminated in the struct */
        4:  616:        strncpy(key_temp, ITEM_key(it), it->nkey);
        4:  617:        key_temp[it->nkey] = 0x00; /* terminate */
      16*:  618:        len = snprintf(temp, sizeof(temp), "ITEM %s [%d b; %llu s]\r\n",
        4:  619:                       key_temp, it->nbytes - 2,
        4:  620:                       it->exptime == 0 ? 0 :
    #####:  621:                       (unsigned long long)it->exptime + process_started);
        4:  622:        if (bufcurr + len + 6 > memlimit)  /* 6 is END\r\n\0 */
        -:  623:            break;
        4:  624:        memcpy(buffer + bufcurr, temp, len);
        4:  625:        bufcurr += len;
        4:  626:        shown++;
        4:  627:        it = it->next;
        -:  628:    }
        -:  629:
        8:  630:    memcpy(buffer + bufcurr, "END\r\n", 6);
        8:  631:    bufcurr += 5;
        -:  632:
        8:  633:    *bytes = bufcurr;
        8:  634:    pthread_mutex_unlock(&lru_locks[id]);
        8:  635:    return buffer;
        -:  636:}
------------------
item_cachedump:
        2:  588:char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {
        2:  589:    unsigned int memlimit = 2 * 1024 * 1024;   /* 2MB max response size */
        2:  590:    char *buffer;
        2:  591:    unsigned int bufcurr;
        2:  592:    item *it;
        2:  593:    unsigned int len;
        2:  594:    unsigned int shown = 0;
        2:  595:    char key_temp[KEY_MAX_LENGTH + 1];
        2:  596:    char temp[512];
        2:  597:    unsigned int id = slabs_clsid;
        2:  598:    id |= COLD_LRU;
        -:  599:
        2:  600:    pthread_mutex_lock(&lru_locks[id]);
        2:  601:    it = heads[id];
        -:  602:
        2:  603:    buffer = malloc((size_t)memlimit);
        2:  604:    if (buffer == 0) {
        -:  605:        return NULL;
        -:  606:    }
        -:  607:    bufcurr = 0;
        -:  608:
        3:  609:    while (it != NULL && (limit == 0 || shown < limit)) {
       1*:  610:        assert(it->nkey <= KEY_MAX_LENGTH);
       1*:  611:        if (it->nbytes == 0 && it->nkey == 0) {
    #####:  612:            it = it->next;
    #####:  613:            continue;
        -:  614:        }
        -:  615:        /* Copy the key since it may not be null-terminated in the struct */
        1:  616:        strncpy(key_temp, ITEM_key(it), it->nkey);
        1:  617:        key_temp[it->nkey] = 0x00; /* terminate */
       4*:  618:        len = snprintf(temp, sizeof(temp), "ITEM %s [%d b; %llu s]\r\n",
        1:  619:                       key_temp, it->nbytes - 2,
        1:  620:                       it->exptime == 0 ? 0 :
    #####:  621:                       (unsigned long long)it->exptime + process_started);
        1:  622:        if (bufcurr + len + 6 > memlimit)  /* 6 is END\r\n\0 */
        -:  623:            break;
        1:  624:        memcpy(buffer + bufcurr, temp, len);
        1:  625:        bufcurr += len;
        1:  626:        shown++;
        1:  627:        it = it->next;
        -:  628:    }
        -:  629:
        2:  630:    memcpy(buffer + bufcurr, "END\r\n", 6);
        2:  631:    bufcurr += 5;
        -:  632:
        2:  633:    *bytes = bufcurr;
        2:  634:    pthread_mutex_unlock(&lru_locks[id]);
        2:  635:    return buffer;
        -:  636:}
------------------
item_cachedump:
        2:  588:char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {
        2:  589:    unsigned int memlimit = 2 * 1024 * 1024;   /* 2MB max response size */
        2:  590:    char *buffer;
        2:  591:    unsigned int bufcurr;
        2:  592:    item *it;
        2:  593:    unsigned int len;
        2:  594:    unsigned int shown = 0;
        2:  595:    char key_temp[KEY_MAX_LENGTH + 1];
        2:  596:    char temp[512];
        2:  597:    unsigned int id = slabs_clsid;
        2:  598:    id |= COLD_LRU;
        -:  599:
        2:  600:    pthread_mutex_lock(&lru_locks[id]);
        2:  601:    it = heads[id];
        -:  602:
        2:  603:    buffer = malloc((size_t)memlimit);
        2:  604:    if (buffer == 0) {
        -:  605:        return NULL;
        -:  606:    }
        -:  607:    bufcurr = 0;
        -:  608:
        3:  609:    while (it != NULL && (limit == 0 || shown < limit)) {
       1*:  610:        assert(it->nkey <= KEY_MAX_LENGTH);
       1*:  611:        if (it->nbytes == 0 && it->nkey == 0) {
    #####:  612:            it = it->next;
    #####:  613:            continue;
        -:  614:        }
        -:  615:        /* Copy the key since it may not be null-terminated in the struct */
        1:  616:        strncpy(key_temp, ITEM_key(it), it->nkey);
        1:  617:        key_temp[it->nkey] = 0x00; /* terminate */
       4*:  618:        len = snprintf(temp, sizeof(temp), "ITEM %s [%d b; %llu s]\r\n",
        1:  619:                       key_temp, it->nbytes - 2,
        1:  620:                       it->exptime == 0 ? 0 :
    #####:  621:                       (unsigned long long)it->exptime + process_started);
        1:  622:        if (bufcurr + len + 6 > memlimit)  /* 6 is END\r\n\0 */
        -:  623:            break;
        1:  624:        memcpy(buffer + bufcurr, temp, len);
        1:  625:        bufcurr += len;
        1:  626:        shown++;
        1:  627:        it = it->next;
        -:  628:    }
        -:  629:
        2:  630:    memcpy(buffer + bufcurr, "END\r\n", 6);
        2:  631:    bufcurr += 5;
        -:  632:
        2:  633:    *bytes = bufcurr;
        2:  634:    pthread_mutex_unlock(&lru_locks[id]);
        2:  635:    return buffer;
        -:  636:}
------------------
item_cachedump:
        2:  588:char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {
        2:  589:    unsigned int memlimit = 2 * 1024 * 1024;   /* 2MB max response size */
        2:  590:    char *buffer;
        2:  591:    unsigned int bufcurr;
        2:  592:    item *it;
        2:  593:    unsigned int len;
        2:  594:    unsigned int shown = 0;
        2:  595:    char key_temp[KEY_MAX_LENGTH + 1];
        2:  596:    char temp[512];
        2:  597:    unsigned int id = slabs_clsid;
        2:  598:    id |= COLD_LRU;
        -:  599:
        2:  600:    pthread_mutex_lock(&lru_locks[id]);
        2:  601:    it = heads[id];
        -:  602:
        2:  603:    buffer = malloc((size_t)memlimit);
        2:  604:    if (buffer == 0) {
        -:  605:        return NULL;
        -:  606:    }
        -:  607:    bufcurr = 0;
        -:  608:
        3:  609:    while (it != NULL && (limit == 0 || shown < limit)) {
       1*:  610:        assert(it->nkey <= KEY_MAX_LENGTH);
       1*:  611:        if (it->nbytes == 0 && it->nkey == 0) {
    #####:  612:            it = it->next;
    #####:  613:            continue;
        -:  614:        }
        -:  615:        /* Copy the key since it may not be null-terminated in the struct */
        1:  616:        strncpy(key_temp, ITEM_key(it), it->nkey);
        1:  617:        key_temp[it->nkey] = 0x00; /* terminate */
       4*:  618:        len = snprintf(temp, sizeof(temp), "ITEM %s [%d b; %llu s]\r\n",
        1:  619:                       key_temp, it->nbytes - 2,
        1:  620:                       it->exptime == 0 ? 0 :
    #####:  621:                       (unsigned long long)it->exptime + process_started);
        1:  622:        if (bufcurr + len + 6 > memlimit)  /* 6 is END\r\n\0 */
        -:  623:            break;
        1:  624:        memcpy(buffer + bufcurr, temp, len);
        1:  625:        bufcurr += len;
        1:  626:        shown++;
        1:  627:        it = it->next;
        -:  628:    }
        -:  629:
        2:  630:    memcpy(buffer + bufcurr, "END\r\n", 6);
        2:  631:    bufcurr += 5;
        -:  632:
        2:  633:    *bytes = bufcurr;
        2:  634:    pthread_mutex_unlock(&lru_locks[id]);
        2:  635:    return buffer;
        -:  636:}
------------------
item_cachedump:
        2:  588:char *item_cachedump(const unsigned int slabs_clsid, const unsigned int limit, unsigned int *bytes) {
        2:  589:    unsigned int memlimit = 2 * 1024 * 1024;   /* 2MB max response size */
        2:  590:    char *buffer;
        2:  591:    unsigned int bufcurr;
        2:  592:    item *it;
        2:  593:    unsigned int len;
        2:  594:    unsigned int shown = 0;
        2:  595:    char key_temp[KEY_MAX_LENGTH + 1];
        2:  596:    char temp[512];
        2:  597:    unsigned int id = slabs_clsid;
        2:  598:    id |= COLD_LRU;
        -:  599:
        2:  600:    pthread_mutex_lock(&lru_locks[id]);
        2:  601:    it = heads[id];
        -:  602:
        2:  603:    buffer = malloc((size_t)memlimit);
        2:  604:    if (buffer == 0) {
        -:  605:        return NULL;
        -:  606:    }
        -:  607:    bufcurr = 0;
        -:  608:
        3:  609:    while (it != NULL && (limit == 0 || shown < limit)) {
       1*:  610:        assert(it->nkey <= KEY_MAX_LENGTH);
       1*:  611:        if (it->nbytes == 0 && it->nkey == 0) {
    #####:  612:            it = it->next;
    #####:  613:            continue;
        -:  614:        }
        -:  615:        /* Copy the key since it may not be null-terminated in the struct */
        1:  616:        strncpy(key_temp, ITEM_key(it), it->nkey);
        1:  617:        key_temp[it->nkey] = 0x00; /* terminate */
       4*:  618:        len = snprintf(temp, sizeof(temp), "ITEM %s [%d b; %llu s]\r\n",
        1:  619:                       key_temp, it->nbytes - 2,
        1:  620:                       it->exptime == 0 ? 0 :
    #####:  621:                       (unsigned long long)it->exptime + process_started);
        1:  622:        if (bufcurr + len + 6 > memlimit)  /* 6 is END\r\n\0 */
        -:  623:            break;
        1:  624:        memcpy(buffer + bufcurr, temp, len);
        1:  625:        bufcurr += len;
        1:  626:        shown++;
        1:  627:        it = it->next;
        -:  628:    }
        -:  629:
        2:  630:    memcpy(buffer + bufcurr, "END\r\n", 6);
        2:  631:    bufcurr += 5;
        -:  632:
        2:  633:    *bytes = bufcurr;
        2:  634:    pthread_mutex_unlock(&lru_locks[id]);
        2:  635:    return buffer;
        -:  636:}
------------------
        -:  637:
        -:  638:/* With refactoring of the various stats code the automover won't need a
        -:  639: * custom function here.
        -:  640: */
     1460:  641:void fill_item_stats_automove(item_stats_automove *am) {
     1460:  642:    int n;
    94900:  643:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
    93440:  644:        item_stats_automove *cur = &am[n];
        -:  645:
        -:  646:        // outofmemory records into HOT
    93440:  647:        int i = n | HOT_LRU;
    93440:  648:        pthread_mutex_lock(&lru_locks[i]);
    93440:  649:        cur->outofmemory = itemstats[i].outofmemory;
    93440:  650:        pthread_mutex_unlock(&lru_locks[i]);
        -:  651:
        -:  652:        // evictions and tail age are from COLD
    93440:  653:        i = n | COLD_LRU;
    93440:  654:        pthread_mutex_lock(&lru_locks[i]);
    93440:  655:        cur->evicted = itemstats[i].evicted;
    93440:  656:        if (tails[i]) {
    22428:  657:            cur->age = current_time - tails[i]->time;
        -:  658:        } else {
    71012:  659:            cur->age = 0;
        -:  660:        }
    93440:  661:        pthread_mutex_unlock(&lru_locks[i]);
        -:  662:     }
     1460:  663:}
------------------
fill_item_stats_automove:
      365:  641:void fill_item_stats_automove(item_stats_automove *am) {
      365:  642:    int n;
    23725:  643:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
    23360:  644:        item_stats_automove *cur = &am[n];
        -:  645:
        -:  646:        // outofmemory records into HOT
    23360:  647:        int i = n | HOT_LRU;
    23360:  648:        pthread_mutex_lock(&lru_locks[i]);
    23360:  649:        cur->outofmemory = itemstats[i].outofmemory;
    23360:  650:        pthread_mutex_unlock(&lru_locks[i]);
        -:  651:
        -:  652:        // evictions and tail age are from COLD
    23360:  653:        i = n | COLD_LRU;
    23360:  654:        pthread_mutex_lock(&lru_locks[i]);
    23360:  655:        cur->evicted = itemstats[i].evicted;
    23360:  656:        if (tails[i]) {
     5607:  657:            cur->age = current_time - tails[i]->time;
        -:  658:        } else {
    17753:  659:            cur->age = 0;
        -:  660:        }
    23360:  661:        pthread_mutex_unlock(&lru_locks[i]);
        -:  662:     }
      365:  663:}
------------------
fill_item_stats_automove:
      365:  641:void fill_item_stats_automove(item_stats_automove *am) {
      365:  642:    int n;
    23725:  643:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
    23360:  644:        item_stats_automove *cur = &am[n];
        -:  645:
        -:  646:        // outofmemory records into HOT
    23360:  647:        int i = n | HOT_LRU;
    23360:  648:        pthread_mutex_lock(&lru_locks[i]);
    23360:  649:        cur->outofmemory = itemstats[i].outofmemory;
    23360:  650:        pthread_mutex_unlock(&lru_locks[i]);
        -:  651:
        -:  652:        // evictions and tail age are from COLD
    23360:  653:        i = n | COLD_LRU;
    23360:  654:        pthread_mutex_lock(&lru_locks[i]);
    23360:  655:        cur->evicted = itemstats[i].evicted;
    23360:  656:        if (tails[i]) {
     5607:  657:            cur->age = current_time - tails[i]->time;
        -:  658:        } else {
    17753:  659:            cur->age = 0;
        -:  660:        }
    23360:  661:        pthread_mutex_unlock(&lru_locks[i]);
        -:  662:     }
      365:  663:}
------------------
fill_item_stats_automove:
      365:  641:void fill_item_stats_automove(item_stats_automove *am) {
      365:  642:    int n;
    23725:  643:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
    23360:  644:        item_stats_automove *cur = &am[n];
        -:  645:
        -:  646:        // outofmemory records into HOT
    23360:  647:        int i = n | HOT_LRU;
    23360:  648:        pthread_mutex_lock(&lru_locks[i]);
    23360:  649:        cur->outofmemory = itemstats[i].outofmemory;
    23360:  650:        pthread_mutex_unlock(&lru_locks[i]);
        -:  651:
        -:  652:        // evictions and tail age are from COLD
    23360:  653:        i = n | COLD_LRU;
    23360:  654:        pthread_mutex_lock(&lru_locks[i]);
    23360:  655:        cur->evicted = itemstats[i].evicted;
    23360:  656:        if (tails[i]) {
     5607:  657:            cur->age = current_time - tails[i]->time;
        -:  658:        } else {
    17753:  659:            cur->age = 0;
        -:  660:        }
    23360:  661:        pthread_mutex_unlock(&lru_locks[i]);
        -:  662:     }
      365:  663:}
------------------
fill_item_stats_automove:
      365:  641:void fill_item_stats_automove(item_stats_automove *am) {
      365:  642:    int n;
    23725:  643:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
    23360:  644:        item_stats_automove *cur = &am[n];
        -:  645:
        -:  646:        // outofmemory records into HOT
    23360:  647:        int i = n | HOT_LRU;
    23360:  648:        pthread_mutex_lock(&lru_locks[i]);
    23360:  649:        cur->outofmemory = itemstats[i].outofmemory;
    23360:  650:        pthread_mutex_unlock(&lru_locks[i]);
        -:  651:
        -:  652:        // evictions and tail age are from COLD
    23360:  653:        i = n | COLD_LRU;
    23360:  654:        pthread_mutex_lock(&lru_locks[i]);
    23360:  655:        cur->evicted = itemstats[i].evicted;
    23360:  656:        if (tails[i]) {
     5607:  657:            cur->age = current_time - tails[i]->time;
        -:  658:        } else {
    17753:  659:            cur->age = 0;
        -:  660:        }
    23360:  661:        pthread_mutex_unlock(&lru_locks[i]);
        -:  662:     }
      365:  663:}
------------------
        -:  664:
    10900:  665:void item_stats_totals(ADD_STAT add_stats, void *c) {
    10900:  666:    itemstats_t totals;
    10900:  667:    memset(&totals, 0, sizeof(itemstats_t));
    10900:  668:    int n;
   708500:  669:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
        -:  670:        int x;
        -:  671:        int i;
  3488000:  672:        for (x = 0; x < 4; x++) {
  2790400:  673:            i = n | lru_type_map[x];
  2790400:  674:            pthread_mutex_lock(&lru_locks[i]);
  2790400:  675:            totals.expired_unfetched += itemstats[i].expired_unfetched;
  2790400:  676:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
  2790400:  677:            totals.evicted_active += itemstats[i].evicted_active;
  2790400:  678:            totals.evicted += itemstats[i].evicted;
  2790400:  679:            totals.reclaimed += itemstats[i].reclaimed;
  2790400:  680:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
  2790400:  681:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
  2790400:  682:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
  2790400:  683:            totals.moves_to_cold += itemstats[i].moves_to_cold;
  2790400:  684:            totals.moves_to_warm += itemstats[i].moves_to_warm;
  2790400:  685:            totals.moves_within_lru += itemstats[i].moves_within_lru;
  2790400:  686:            totals.direct_reclaims += itemstats[i].direct_reclaims;
  2790400:  687:            pthread_mutex_unlock(&lru_locks[i]);
        -:  688:        }
        -:  689:    }
    10900:  690:    APPEND_STAT("expired_unfetched", "%llu",
    10900:  691:                (unsigned long long)totals.expired_unfetched);
    10900:  692:    APPEND_STAT("evicted_unfetched", "%llu",
    10900:  693:                (unsigned long long)totals.evicted_unfetched);
    10900:  694:    if (settings.lru_maintainer_thread) {
    10796:  695:        APPEND_STAT("evicted_active", "%llu",
    10900:  696:                    (unsigned long long)totals.evicted_active);
        -:  697:    }
    10900:  698:    APPEND_STAT("evictions", "%llu",
    10900:  699:                (unsigned long long)totals.evicted);
    10900:  700:    APPEND_STAT("reclaimed", "%llu",
    10900:  701:                (unsigned long long)totals.reclaimed);
    10900:  702:    APPEND_STAT("crawler_reclaimed", "%llu",
    10900:  703:                (unsigned long long)totals.crawler_reclaimed);
    10900:  704:    APPEND_STAT("crawler_items_checked", "%llu",
    10900:  705:                (unsigned long long)totals.crawler_items_checked);
    10900:  706:    APPEND_STAT("lrutail_reflocked", "%llu",
    10900:  707:                (unsigned long long)totals.lrutail_reflocked);
    10900:  708:    if (settings.lru_maintainer_thread) {
    10796:  709:        APPEND_STAT("moves_to_cold", "%llu",
    10796:  710:                    (unsigned long long)totals.moves_to_cold);
    10796:  711:        APPEND_STAT("moves_to_warm", "%llu",
    10796:  712:                    (unsigned long long)totals.moves_to_warm);
    10796:  713:        APPEND_STAT("moves_within_lru", "%llu",
    10796:  714:                    (unsigned long long)totals.moves_within_lru);
    10796:  715:        APPEND_STAT("direct_reclaims", "%llu",
    10796:  716:                    (unsigned long long)totals.direct_reclaims);
    10796:  717:        APPEND_STAT("lru_bumps_dropped", "%llu",
    10900:  718:                    (unsigned long long)lru_total_bumps_dropped());
        -:  719:    }
    10900:  720:}
------------------
item_stats_totals:
     2725:  665:void item_stats_totals(ADD_STAT add_stats, void *c) {
     2725:  666:    itemstats_t totals;
     2725:  667:    memset(&totals, 0, sizeof(itemstats_t));
     2725:  668:    int n;
   177125:  669:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
        -:  670:        int x;
        -:  671:        int i;
   872000:  672:        for (x = 0; x < 4; x++) {
   697600:  673:            i = n | lru_type_map[x];
   697600:  674:            pthread_mutex_lock(&lru_locks[i]);
   697600:  675:            totals.expired_unfetched += itemstats[i].expired_unfetched;
   697600:  676:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
   697600:  677:            totals.evicted_active += itemstats[i].evicted_active;
   697600:  678:            totals.evicted += itemstats[i].evicted;
   697600:  679:            totals.reclaimed += itemstats[i].reclaimed;
   697600:  680:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
   697600:  681:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
   697600:  682:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
   697600:  683:            totals.moves_to_cold += itemstats[i].moves_to_cold;
   697600:  684:            totals.moves_to_warm += itemstats[i].moves_to_warm;
   697600:  685:            totals.moves_within_lru += itemstats[i].moves_within_lru;
   697600:  686:            totals.direct_reclaims += itemstats[i].direct_reclaims;
   697600:  687:            pthread_mutex_unlock(&lru_locks[i]);
        -:  688:        }
        -:  689:    }
     2725:  690:    APPEND_STAT("expired_unfetched", "%llu",
     2725:  691:                (unsigned long long)totals.expired_unfetched);
     2725:  692:    APPEND_STAT("evicted_unfetched", "%llu",
     2725:  693:                (unsigned long long)totals.evicted_unfetched);
     2725:  694:    if (settings.lru_maintainer_thread) {
     2699:  695:        APPEND_STAT("evicted_active", "%llu",
     2725:  696:                    (unsigned long long)totals.evicted_active);
        -:  697:    }
     2725:  698:    APPEND_STAT("evictions", "%llu",
     2725:  699:                (unsigned long long)totals.evicted);
     2725:  700:    APPEND_STAT("reclaimed", "%llu",
     2725:  701:                (unsigned long long)totals.reclaimed);
     2725:  702:    APPEND_STAT("crawler_reclaimed", "%llu",
     2725:  703:                (unsigned long long)totals.crawler_reclaimed);
     2725:  704:    APPEND_STAT("crawler_items_checked", "%llu",
     2725:  705:                (unsigned long long)totals.crawler_items_checked);
     2725:  706:    APPEND_STAT("lrutail_reflocked", "%llu",
     2725:  707:                (unsigned long long)totals.lrutail_reflocked);
     2725:  708:    if (settings.lru_maintainer_thread) {
     2699:  709:        APPEND_STAT("moves_to_cold", "%llu",
     2699:  710:                    (unsigned long long)totals.moves_to_cold);
     2699:  711:        APPEND_STAT("moves_to_warm", "%llu",
     2699:  712:                    (unsigned long long)totals.moves_to_warm);
     2699:  713:        APPEND_STAT("moves_within_lru", "%llu",
     2699:  714:                    (unsigned long long)totals.moves_within_lru);
     2699:  715:        APPEND_STAT("direct_reclaims", "%llu",
     2699:  716:                    (unsigned long long)totals.direct_reclaims);
     2699:  717:        APPEND_STAT("lru_bumps_dropped", "%llu",
     2725:  718:                    (unsigned long long)lru_total_bumps_dropped());
        -:  719:    }
     2725:  720:}
------------------
item_stats_totals:
     2725:  665:void item_stats_totals(ADD_STAT add_stats, void *c) {
     2725:  666:    itemstats_t totals;
     2725:  667:    memset(&totals, 0, sizeof(itemstats_t));
     2725:  668:    int n;
   177125:  669:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
        -:  670:        int x;
        -:  671:        int i;
   872000:  672:        for (x = 0; x < 4; x++) {
   697600:  673:            i = n | lru_type_map[x];
   697600:  674:            pthread_mutex_lock(&lru_locks[i]);
   697600:  675:            totals.expired_unfetched += itemstats[i].expired_unfetched;
   697600:  676:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
   697600:  677:            totals.evicted_active += itemstats[i].evicted_active;
   697600:  678:            totals.evicted += itemstats[i].evicted;
   697600:  679:            totals.reclaimed += itemstats[i].reclaimed;
   697600:  680:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
   697600:  681:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
   697600:  682:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
   697600:  683:            totals.moves_to_cold += itemstats[i].moves_to_cold;
   697600:  684:            totals.moves_to_warm += itemstats[i].moves_to_warm;
   697600:  685:            totals.moves_within_lru += itemstats[i].moves_within_lru;
   697600:  686:            totals.direct_reclaims += itemstats[i].direct_reclaims;
   697600:  687:            pthread_mutex_unlock(&lru_locks[i]);
        -:  688:        }
        -:  689:    }
     2725:  690:    APPEND_STAT("expired_unfetched", "%llu",
     2725:  691:                (unsigned long long)totals.expired_unfetched);
     2725:  692:    APPEND_STAT("evicted_unfetched", "%llu",
     2725:  693:                (unsigned long long)totals.evicted_unfetched);
     2725:  694:    if (settings.lru_maintainer_thread) {
     2699:  695:        APPEND_STAT("evicted_active", "%llu",
     2725:  696:                    (unsigned long long)totals.evicted_active);
        -:  697:    }
     2725:  698:    APPEND_STAT("evictions", "%llu",
     2725:  699:                (unsigned long long)totals.evicted);
     2725:  700:    APPEND_STAT("reclaimed", "%llu",
     2725:  701:                (unsigned long long)totals.reclaimed);
     2725:  702:    APPEND_STAT("crawler_reclaimed", "%llu",
     2725:  703:                (unsigned long long)totals.crawler_reclaimed);
     2725:  704:    APPEND_STAT("crawler_items_checked", "%llu",
     2725:  705:                (unsigned long long)totals.crawler_items_checked);
     2725:  706:    APPEND_STAT("lrutail_reflocked", "%llu",
     2725:  707:                (unsigned long long)totals.lrutail_reflocked);
     2725:  708:    if (settings.lru_maintainer_thread) {
     2699:  709:        APPEND_STAT("moves_to_cold", "%llu",
     2699:  710:                    (unsigned long long)totals.moves_to_cold);
     2699:  711:        APPEND_STAT("moves_to_warm", "%llu",
     2699:  712:                    (unsigned long long)totals.moves_to_warm);
     2699:  713:        APPEND_STAT("moves_within_lru", "%llu",
     2699:  714:                    (unsigned long long)totals.moves_within_lru);
     2699:  715:        APPEND_STAT("direct_reclaims", "%llu",
     2699:  716:                    (unsigned long long)totals.direct_reclaims);
     2699:  717:        APPEND_STAT("lru_bumps_dropped", "%llu",
     2725:  718:                    (unsigned long long)lru_total_bumps_dropped());
        -:  719:    }
     2725:  720:}
------------------
item_stats_totals:
     2725:  665:void item_stats_totals(ADD_STAT add_stats, void *c) {
     2725:  666:    itemstats_t totals;
     2725:  667:    memset(&totals, 0, sizeof(itemstats_t));
     2725:  668:    int n;
   177125:  669:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
        -:  670:        int x;
        -:  671:        int i;
   872000:  672:        for (x = 0; x < 4; x++) {
   697600:  673:            i = n | lru_type_map[x];
   697600:  674:            pthread_mutex_lock(&lru_locks[i]);
   697600:  675:            totals.expired_unfetched += itemstats[i].expired_unfetched;
   697600:  676:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
   697600:  677:            totals.evicted_active += itemstats[i].evicted_active;
   697600:  678:            totals.evicted += itemstats[i].evicted;
   697600:  679:            totals.reclaimed += itemstats[i].reclaimed;
   697600:  680:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
   697600:  681:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
   697600:  682:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
   697600:  683:            totals.moves_to_cold += itemstats[i].moves_to_cold;
   697600:  684:            totals.moves_to_warm += itemstats[i].moves_to_warm;
   697600:  685:            totals.moves_within_lru += itemstats[i].moves_within_lru;
   697600:  686:            totals.direct_reclaims += itemstats[i].direct_reclaims;
   697600:  687:            pthread_mutex_unlock(&lru_locks[i]);
        -:  688:        }
        -:  689:    }
     2725:  690:    APPEND_STAT("expired_unfetched", "%llu",
     2725:  691:                (unsigned long long)totals.expired_unfetched);
     2725:  692:    APPEND_STAT("evicted_unfetched", "%llu",
     2725:  693:                (unsigned long long)totals.evicted_unfetched);
     2725:  694:    if (settings.lru_maintainer_thread) {
     2699:  695:        APPEND_STAT("evicted_active", "%llu",
     2725:  696:                    (unsigned long long)totals.evicted_active);
        -:  697:    }
     2725:  698:    APPEND_STAT("evictions", "%llu",
     2725:  699:                (unsigned long long)totals.evicted);
     2725:  700:    APPEND_STAT("reclaimed", "%llu",
     2725:  701:                (unsigned long long)totals.reclaimed);
     2725:  702:    APPEND_STAT("crawler_reclaimed", "%llu",
     2725:  703:                (unsigned long long)totals.crawler_reclaimed);
     2725:  704:    APPEND_STAT("crawler_items_checked", "%llu",
     2725:  705:                (unsigned long long)totals.crawler_items_checked);
     2725:  706:    APPEND_STAT("lrutail_reflocked", "%llu",
     2725:  707:                (unsigned long long)totals.lrutail_reflocked);
     2725:  708:    if (settings.lru_maintainer_thread) {
     2699:  709:        APPEND_STAT("moves_to_cold", "%llu",
     2699:  710:                    (unsigned long long)totals.moves_to_cold);
     2699:  711:        APPEND_STAT("moves_to_warm", "%llu",
     2699:  712:                    (unsigned long long)totals.moves_to_warm);
     2699:  713:        APPEND_STAT("moves_within_lru", "%llu",
     2699:  714:                    (unsigned long long)totals.moves_within_lru);
     2699:  715:        APPEND_STAT("direct_reclaims", "%llu",
     2699:  716:                    (unsigned long long)totals.direct_reclaims);
     2699:  717:        APPEND_STAT("lru_bumps_dropped", "%llu",
     2725:  718:                    (unsigned long long)lru_total_bumps_dropped());
        -:  719:    }
     2725:  720:}
------------------
item_stats_totals:
     2725:  665:void item_stats_totals(ADD_STAT add_stats, void *c) {
     2725:  666:    itemstats_t totals;
     2725:  667:    memset(&totals, 0, sizeof(itemstats_t));
     2725:  668:    int n;
   177125:  669:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
        -:  670:        int x;
        -:  671:        int i;
   872000:  672:        for (x = 0; x < 4; x++) {
   697600:  673:            i = n | lru_type_map[x];
   697600:  674:            pthread_mutex_lock(&lru_locks[i]);
   697600:  675:            totals.expired_unfetched += itemstats[i].expired_unfetched;
   697600:  676:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
   697600:  677:            totals.evicted_active += itemstats[i].evicted_active;
   697600:  678:            totals.evicted += itemstats[i].evicted;
   697600:  679:            totals.reclaimed += itemstats[i].reclaimed;
   697600:  680:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
   697600:  681:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
   697600:  682:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
   697600:  683:            totals.moves_to_cold += itemstats[i].moves_to_cold;
   697600:  684:            totals.moves_to_warm += itemstats[i].moves_to_warm;
   697600:  685:            totals.moves_within_lru += itemstats[i].moves_within_lru;
   697600:  686:            totals.direct_reclaims += itemstats[i].direct_reclaims;
   697600:  687:            pthread_mutex_unlock(&lru_locks[i]);
        -:  688:        }
        -:  689:    }
     2725:  690:    APPEND_STAT("expired_unfetched", "%llu",
     2725:  691:                (unsigned long long)totals.expired_unfetched);
     2725:  692:    APPEND_STAT("evicted_unfetched", "%llu",
     2725:  693:                (unsigned long long)totals.evicted_unfetched);
     2725:  694:    if (settings.lru_maintainer_thread) {
     2699:  695:        APPEND_STAT("evicted_active", "%llu",
     2725:  696:                    (unsigned long long)totals.evicted_active);
        -:  697:    }
     2725:  698:    APPEND_STAT("evictions", "%llu",
     2725:  699:                (unsigned long long)totals.evicted);
     2725:  700:    APPEND_STAT("reclaimed", "%llu",
     2725:  701:                (unsigned long long)totals.reclaimed);
     2725:  702:    APPEND_STAT("crawler_reclaimed", "%llu",
     2725:  703:                (unsigned long long)totals.crawler_reclaimed);
     2725:  704:    APPEND_STAT("crawler_items_checked", "%llu",
     2725:  705:                (unsigned long long)totals.crawler_items_checked);
     2725:  706:    APPEND_STAT("lrutail_reflocked", "%llu",
     2725:  707:                (unsigned long long)totals.lrutail_reflocked);
     2725:  708:    if (settings.lru_maintainer_thread) {
     2699:  709:        APPEND_STAT("moves_to_cold", "%llu",
     2699:  710:                    (unsigned long long)totals.moves_to_cold);
     2699:  711:        APPEND_STAT("moves_to_warm", "%llu",
     2699:  712:                    (unsigned long long)totals.moves_to_warm);
     2699:  713:        APPEND_STAT("moves_within_lru", "%llu",
     2699:  714:                    (unsigned long long)totals.moves_within_lru);
     2699:  715:        APPEND_STAT("direct_reclaims", "%llu",
     2699:  716:                    (unsigned long long)totals.direct_reclaims);
     2699:  717:        APPEND_STAT("lru_bumps_dropped", "%llu",
     2725:  718:                    (unsigned long long)lru_total_bumps_dropped());
        -:  719:    }
     2725:  720:}
------------------
        -:  721:
       44:  722:void item_stats(ADD_STAT add_stats, void *c) {
       44:  723:    struct thread_stats thread_stats;
       44:  724:    threadlocal_stats_aggregate(&thread_stats);
       44:  725:    itemstats_t totals;
       44:  726:    int n;
     2860:  727:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
     2816:  728:        memset(&totals, 0, sizeof(itemstats_t));
     2816:  729:        int x;
     2816:  730:        int i;
     2816:  731:        unsigned int size = 0;
     2816:  732:        unsigned int age  = 0;
     2816:  733:        unsigned int age_hot = 0;
     2816:  734:        unsigned int age_warm = 0;
     2816:  735:        unsigned int lru_size_map[4];
     2816:  736:        const char *fmt = "items:%d:%s";
     2816:  737:        char key_str[STAT_KEY_LEN];
     2816:  738:        char val_str[STAT_VAL_LEN];
     2816:  739:        int klen = 0, vlen = 0;
    14080:  740:        for (x = 0; x < 4; x++) {
    11264:  741:            i = n | lru_type_map[x];
    11264:  742:            pthread_mutex_lock(&lru_locks[i]);
    11264:  743:            totals.evicted += itemstats[i].evicted;
    11264:  744:            totals.evicted_nonzero += itemstats[i].evicted_nonzero;
    11264:  745:            totals.outofmemory += itemstats[i].outofmemory;
    11264:  746:            totals.tailrepairs += itemstats[i].tailrepairs;
    11264:  747:            totals.reclaimed += itemstats[i].reclaimed;
    11264:  748:            totals.expired_unfetched += itemstats[i].expired_unfetched;
    11264:  749:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
    11264:  750:            totals.evicted_active += itemstats[i].evicted_active;
    11264:  751:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
    11264:  752:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
    11264:  753:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
    11264:  754:            totals.moves_to_cold += itemstats[i].moves_to_cold;
    11264:  755:            totals.moves_to_warm += itemstats[i].moves_to_warm;
    11264:  756:            totals.moves_within_lru += itemstats[i].moves_within_lru;
    11264:  757:            totals.direct_reclaims += itemstats[i].direct_reclaims;
    11264:  758:            size += sizes[i];
    11264:  759:            lru_size_map[x] = sizes[i];
    11264:  760:            if (lru_type_map[x] == COLD_LRU && tails[i] != NULL) {
       12:  761:                age = current_time - tails[i]->time;
    11252:  762:            } else if (lru_type_map[x] == HOT_LRU && tails[i] != NULL) {
       36:  763:                age_hot = current_time - tails[i]->time;
    11216:  764:            } else if (lru_type_map[x] == WARM_LRU && tails[i] != NULL) {
        4:  765:                age_warm = current_time - tails[i]->time;
        -:  766:            }
    11264:  767:            if (lru_type_map[x] == COLD_LRU)
     2816:  768:                totals.evicted_time = itemstats[i].evicted_time;
    11264:  769:            switch (lru_type_map[x]) {
     2816:  770:                case HOT_LRU:
     2816:  771:                    totals.hits_to_hot = thread_stats.lru_hits[i];
     2816:  772:                    break;
     2816:  773:                case WARM_LRU:
     2816:  774:                    totals.hits_to_warm = thread_stats.lru_hits[i];
     2816:  775:                    break;
     2816:  776:                case COLD_LRU:
     2816:  777:                    totals.hits_to_cold = thread_stats.lru_hits[i];
     2816:  778:                    break;
     2816:  779:                case TEMP_LRU:
     2816:  780:                    totals.hits_to_temp = thread_stats.lru_hits[i];
     2816:  781:                    break;
        -:  782:            }
    11264:  783:            pthread_mutex_unlock(&lru_locks[i]);
        -:  784:        }
     2816:  785:        if (size == 0)
     2768:  786:            continue;
      144:  787:        APPEND_NUM_FMT_STAT(fmt, n, "number", "%u", size);
       48:  788:        if (settings.lru_maintainer_thread) {
      132:  789:            APPEND_NUM_FMT_STAT(fmt, n, "number_hot", "%u", lru_size_map[0]);
      132:  790:            APPEND_NUM_FMT_STAT(fmt, n, "number_warm", "%u", lru_size_map[1]);
      132:  791:            APPEND_NUM_FMT_STAT(fmt, n, "number_cold", "%u", lru_size_map[2]);
       44:  792:            if (settings.temp_lru) {
       24:  793:                APPEND_NUM_FMT_STAT(fmt, n, "number_temp", "%u", lru_size_map[3]);
        -:  794:            }
      132:  795:            APPEND_NUM_FMT_STAT(fmt, n, "age_hot", "%u", age_hot);
      132:  796:            APPEND_NUM_FMT_STAT(fmt, n, "age_warm", "%u", age_warm);
        -:  797:        }
      144:  798:        APPEND_NUM_FMT_STAT(fmt, n, "age", "%u", age);
      144:  799:        APPEND_NUM_FMT_STAT(fmt, n, "evicted",
       48:  800:                            "%llu", (unsigned long long)totals.evicted);
      144:  801:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_nonzero",
       48:  802:                            "%llu", (unsigned long long)totals.evicted_nonzero);
      144:  803:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_time",
       48:  804:                            "%u", totals.evicted_time);
      144:  805:        APPEND_NUM_FMT_STAT(fmt, n, "outofmemory",
       48:  806:                            "%llu", (unsigned long long)totals.outofmemory);
      144:  807:        APPEND_NUM_FMT_STAT(fmt, n, "tailrepairs",
       48:  808:                            "%llu", (unsigned long long)totals.tailrepairs);
      144:  809:        APPEND_NUM_FMT_STAT(fmt, n, "reclaimed",
       48:  810:                            "%llu", (unsigned long long)totals.reclaimed);
      144:  811:        APPEND_NUM_FMT_STAT(fmt, n, "expired_unfetched",
       48:  812:                            "%llu", (unsigned long long)totals.expired_unfetched);
      144:  813:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_unfetched",
       48:  814:                            "%llu", (unsigned long long)totals.evicted_unfetched);
       48:  815:        if (settings.lru_maintainer_thread) {
      132:  816:            APPEND_NUM_FMT_STAT(fmt, n, "evicted_active",
       48:  817:                                "%llu", (unsigned long long)totals.evicted_active);
        -:  818:        }
      144:  819:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_reclaimed",
       48:  820:                            "%llu", (unsigned long long)totals.crawler_reclaimed);
      144:  821:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_items_checked",
       48:  822:                            "%llu", (unsigned long long)totals.crawler_items_checked);
      144:  823:        APPEND_NUM_FMT_STAT(fmt, n, "lrutail_reflocked",
       48:  824:                            "%llu", (unsigned long long)totals.lrutail_reflocked);
       48:  825:        if (settings.lru_maintainer_thread) {
      132:  826:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_cold",
       44:  827:                                "%llu", (unsigned long long)totals.moves_to_cold);
      132:  828:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_warm",
       44:  829:                                "%llu", (unsigned long long)totals.moves_to_warm);
      132:  830:            APPEND_NUM_FMT_STAT(fmt, n, "moves_within_lru",
       44:  831:                                "%llu", (unsigned long long)totals.moves_within_lru);
      132:  832:            APPEND_NUM_FMT_STAT(fmt, n, "direct_reclaims",
       44:  833:                                "%llu", (unsigned long long)totals.direct_reclaims);
      132:  834:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_hot",
       44:  835:                                "%llu", (unsigned long long)totals.hits_to_hot);
        -:  836:
      132:  837:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_warm",
       44:  838:                                "%llu", (unsigned long long)totals.hits_to_warm);
        -:  839:
      132:  840:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_cold",
       44:  841:                                "%llu", (unsigned long long)totals.hits_to_cold);
        -:  842:
      132:  843:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_temp",
       48:  844:                                "%llu", (unsigned long long)totals.hits_to_temp);
        -:  845:
        -:  846:        }
        -:  847:    }
        -:  848:
        -:  849:    /* getting here means both ascii and binary terminators fit */
       44:  850:    add_stats(NULL, 0, NULL, 0, c);
       44:  851:}
------------------
item_stats:
       11:  722:void item_stats(ADD_STAT add_stats, void *c) {
       11:  723:    struct thread_stats thread_stats;
       11:  724:    threadlocal_stats_aggregate(&thread_stats);
       11:  725:    itemstats_t totals;
       11:  726:    int n;
      715:  727:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
      704:  728:        memset(&totals, 0, sizeof(itemstats_t));
      704:  729:        int x;
      704:  730:        int i;
      704:  731:        unsigned int size = 0;
      704:  732:        unsigned int age  = 0;
      704:  733:        unsigned int age_hot = 0;
      704:  734:        unsigned int age_warm = 0;
      704:  735:        unsigned int lru_size_map[4];
      704:  736:        const char *fmt = "items:%d:%s";
      704:  737:        char key_str[STAT_KEY_LEN];
      704:  738:        char val_str[STAT_VAL_LEN];
      704:  739:        int klen = 0, vlen = 0;
     3520:  740:        for (x = 0; x < 4; x++) {
     2816:  741:            i = n | lru_type_map[x];
     2816:  742:            pthread_mutex_lock(&lru_locks[i]);
     2816:  743:            totals.evicted += itemstats[i].evicted;
     2816:  744:            totals.evicted_nonzero += itemstats[i].evicted_nonzero;
     2816:  745:            totals.outofmemory += itemstats[i].outofmemory;
     2816:  746:            totals.tailrepairs += itemstats[i].tailrepairs;
     2816:  747:            totals.reclaimed += itemstats[i].reclaimed;
     2816:  748:            totals.expired_unfetched += itemstats[i].expired_unfetched;
     2816:  749:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
     2816:  750:            totals.evicted_active += itemstats[i].evicted_active;
     2816:  751:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
     2816:  752:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
     2816:  753:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
     2816:  754:            totals.moves_to_cold += itemstats[i].moves_to_cold;
     2816:  755:            totals.moves_to_warm += itemstats[i].moves_to_warm;
     2816:  756:            totals.moves_within_lru += itemstats[i].moves_within_lru;
     2816:  757:            totals.direct_reclaims += itemstats[i].direct_reclaims;
     2816:  758:            size += sizes[i];
     2816:  759:            lru_size_map[x] = sizes[i];
     2816:  760:            if (lru_type_map[x] == COLD_LRU && tails[i] != NULL) {
        3:  761:                age = current_time - tails[i]->time;
     2813:  762:            } else if (lru_type_map[x] == HOT_LRU && tails[i] != NULL) {
        9:  763:                age_hot = current_time - tails[i]->time;
     2804:  764:            } else if (lru_type_map[x] == WARM_LRU && tails[i] != NULL) {
        1:  765:                age_warm = current_time - tails[i]->time;
        -:  766:            }
     2816:  767:            if (lru_type_map[x] == COLD_LRU)
      704:  768:                totals.evicted_time = itemstats[i].evicted_time;
     2816:  769:            switch (lru_type_map[x]) {
      704:  770:                case HOT_LRU:
      704:  771:                    totals.hits_to_hot = thread_stats.lru_hits[i];
      704:  772:                    break;
      704:  773:                case WARM_LRU:
      704:  774:                    totals.hits_to_warm = thread_stats.lru_hits[i];
      704:  775:                    break;
      704:  776:                case COLD_LRU:
      704:  777:                    totals.hits_to_cold = thread_stats.lru_hits[i];
      704:  778:                    break;
      704:  779:                case TEMP_LRU:
      704:  780:                    totals.hits_to_temp = thread_stats.lru_hits[i];
      704:  781:                    break;
        -:  782:            }
     2816:  783:            pthread_mutex_unlock(&lru_locks[i]);
        -:  784:        }
      704:  785:        if (size == 0)
      692:  786:            continue;
       36:  787:        APPEND_NUM_FMT_STAT(fmt, n, "number", "%u", size);
       12:  788:        if (settings.lru_maintainer_thread) {
       33:  789:            APPEND_NUM_FMT_STAT(fmt, n, "number_hot", "%u", lru_size_map[0]);
       33:  790:            APPEND_NUM_FMT_STAT(fmt, n, "number_warm", "%u", lru_size_map[1]);
       33:  791:            APPEND_NUM_FMT_STAT(fmt, n, "number_cold", "%u", lru_size_map[2]);
       11:  792:            if (settings.temp_lru) {
        6:  793:                APPEND_NUM_FMT_STAT(fmt, n, "number_temp", "%u", lru_size_map[3]);
        -:  794:            }
       33:  795:            APPEND_NUM_FMT_STAT(fmt, n, "age_hot", "%u", age_hot);
       33:  796:            APPEND_NUM_FMT_STAT(fmt, n, "age_warm", "%u", age_warm);
        -:  797:        }
       36:  798:        APPEND_NUM_FMT_STAT(fmt, n, "age", "%u", age);
       36:  799:        APPEND_NUM_FMT_STAT(fmt, n, "evicted",
       12:  800:                            "%llu", (unsigned long long)totals.evicted);
       36:  801:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_nonzero",
       12:  802:                            "%llu", (unsigned long long)totals.evicted_nonzero);
       36:  803:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_time",
       12:  804:                            "%u", totals.evicted_time);
       36:  805:        APPEND_NUM_FMT_STAT(fmt, n, "outofmemory",
       12:  806:                            "%llu", (unsigned long long)totals.outofmemory);
       36:  807:        APPEND_NUM_FMT_STAT(fmt, n, "tailrepairs",
       12:  808:                            "%llu", (unsigned long long)totals.tailrepairs);
       36:  809:        APPEND_NUM_FMT_STAT(fmt, n, "reclaimed",
       12:  810:                            "%llu", (unsigned long long)totals.reclaimed);
       36:  811:        APPEND_NUM_FMT_STAT(fmt, n, "expired_unfetched",
       12:  812:                            "%llu", (unsigned long long)totals.expired_unfetched);
       36:  813:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_unfetched",
       12:  814:                            "%llu", (unsigned long long)totals.evicted_unfetched);
       12:  815:        if (settings.lru_maintainer_thread) {
       33:  816:            APPEND_NUM_FMT_STAT(fmt, n, "evicted_active",
       12:  817:                                "%llu", (unsigned long long)totals.evicted_active);
        -:  818:        }
       36:  819:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_reclaimed",
       12:  820:                            "%llu", (unsigned long long)totals.crawler_reclaimed);
       36:  821:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_items_checked",
       12:  822:                            "%llu", (unsigned long long)totals.crawler_items_checked);
       36:  823:        APPEND_NUM_FMT_STAT(fmt, n, "lrutail_reflocked",
       12:  824:                            "%llu", (unsigned long long)totals.lrutail_reflocked);
       12:  825:        if (settings.lru_maintainer_thread) {
       33:  826:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_cold",
       11:  827:                                "%llu", (unsigned long long)totals.moves_to_cold);
       33:  828:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_warm",
       11:  829:                                "%llu", (unsigned long long)totals.moves_to_warm);
       33:  830:            APPEND_NUM_FMT_STAT(fmt, n, "moves_within_lru",
       11:  831:                                "%llu", (unsigned long long)totals.moves_within_lru);
       33:  832:            APPEND_NUM_FMT_STAT(fmt, n, "direct_reclaims",
       11:  833:                                "%llu", (unsigned long long)totals.direct_reclaims);
       33:  834:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_hot",
       11:  835:                                "%llu", (unsigned long long)totals.hits_to_hot);
        -:  836:
       33:  837:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_warm",
       11:  838:                                "%llu", (unsigned long long)totals.hits_to_warm);
        -:  839:
       33:  840:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_cold",
       11:  841:                                "%llu", (unsigned long long)totals.hits_to_cold);
        -:  842:
       33:  843:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_temp",
       12:  844:                                "%llu", (unsigned long long)totals.hits_to_temp);
        -:  845:
        -:  846:        }
        -:  847:    }
        -:  848:
        -:  849:    /* getting here means both ascii and binary terminators fit */
       11:  850:    add_stats(NULL, 0, NULL, 0, c);
       11:  851:}
------------------
item_stats:
       11:  722:void item_stats(ADD_STAT add_stats, void *c) {
       11:  723:    struct thread_stats thread_stats;
       11:  724:    threadlocal_stats_aggregate(&thread_stats);
       11:  725:    itemstats_t totals;
       11:  726:    int n;
      715:  727:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
      704:  728:        memset(&totals, 0, sizeof(itemstats_t));
      704:  729:        int x;
      704:  730:        int i;
      704:  731:        unsigned int size = 0;
      704:  732:        unsigned int age  = 0;
      704:  733:        unsigned int age_hot = 0;
      704:  734:        unsigned int age_warm = 0;
      704:  735:        unsigned int lru_size_map[4];
      704:  736:        const char *fmt = "items:%d:%s";
      704:  737:        char key_str[STAT_KEY_LEN];
      704:  738:        char val_str[STAT_VAL_LEN];
      704:  739:        int klen = 0, vlen = 0;
     3520:  740:        for (x = 0; x < 4; x++) {
     2816:  741:            i = n | lru_type_map[x];
     2816:  742:            pthread_mutex_lock(&lru_locks[i]);
     2816:  743:            totals.evicted += itemstats[i].evicted;
     2816:  744:            totals.evicted_nonzero += itemstats[i].evicted_nonzero;
     2816:  745:            totals.outofmemory += itemstats[i].outofmemory;
     2816:  746:            totals.tailrepairs += itemstats[i].tailrepairs;
     2816:  747:            totals.reclaimed += itemstats[i].reclaimed;
     2816:  748:            totals.expired_unfetched += itemstats[i].expired_unfetched;
     2816:  749:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
     2816:  750:            totals.evicted_active += itemstats[i].evicted_active;
     2816:  751:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
     2816:  752:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
     2816:  753:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
     2816:  754:            totals.moves_to_cold += itemstats[i].moves_to_cold;
     2816:  755:            totals.moves_to_warm += itemstats[i].moves_to_warm;
     2816:  756:            totals.moves_within_lru += itemstats[i].moves_within_lru;
     2816:  757:            totals.direct_reclaims += itemstats[i].direct_reclaims;
     2816:  758:            size += sizes[i];
     2816:  759:            lru_size_map[x] = sizes[i];
     2816:  760:            if (lru_type_map[x] == COLD_LRU && tails[i] != NULL) {
        3:  761:                age = current_time - tails[i]->time;
     2813:  762:            } else if (lru_type_map[x] == HOT_LRU && tails[i] != NULL) {
        9:  763:                age_hot = current_time - tails[i]->time;
     2804:  764:            } else if (lru_type_map[x] == WARM_LRU && tails[i] != NULL) {
        1:  765:                age_warm = current_time - tails[i]->time;
        -:  766:            }
     2816:  767:            if (lru_type_map[x] == COLD_LRU)
      704:  768:                totals.evicted_time = itemstats[i].evicted_time;
     2816:  769:            switch (lru_type_map[x]) {
      704:  770:                case HOT_LRU:
      704:  771:                    totals.hits_to_hot = thread_stats.lru_hits[i];
      704:  772:                    break;
      704:  773:                case WARM_LRU:
      704:  774:                    totals.hits_to_warm = thread_stats.lru_hits[i];
      704:  775:                    break;
      704:  776:                case COLD_LRU:
      704:  777:                    totals.hits_to_cold = thread_stats.lru_hits[i];
      704:  778:                    break;
      704:  779:                case TEMP_LRU:
      704:  780:                    totals.hits_to_temp = thread_stats.lru_hits[i];
      704:  781:                    break;
        -:  782:            }
     2816:  783:            pthread_mutex_unlock(&lru_locks[i]);
        -:  784:        }
      704:  785:        if (size == 0)
      692:  786:            continue;
       36:  787:        APPEND_NUM_FMT_STAT(fmt, n, "number", "%u", size);
       12:  788:        if (settings.lru_maintainer_thread) {
       33:  789:            APPEND_NUM_FMT_STAT(fmt, n, "number_hot", "%u", lru_size_map[0]);
       33:  790:            APPEND_NUM_FMT_STAT(fmt, n, "number_warm", "%u", lru_size_map[1]);
       33:  791:            APPEND_NUM_FMT_STAT(fmt, n, "number_cold", "%u", lru_size_map[2]);
       11:  792:            if (settings.temp_lru) {
        6:  793:                APPEND_NUM_FMT_STAT(fmt, n, "number_temp", "%u", lru_size_map[3]);
        -:  794:            }
       33:  795:            APPEND_NUM_FMT_STAT(fmt, n, "age_hot", "%u", age_hot);
       33:  796:            APPEND_NUM_FMT_STAT(fmt, n, "age_warm", "%u", age_warm);
        -:  797:        }
       36:  798:        APPEND_NUM_FMT_STAT(fmt, n, "age", "%u", age);
       36:  799:        APPEND_NUM_FMT_STAT(fmt, n, "evicted",
       12:  800:                            "%llu", (unsigned long long)totals.evicted);
       36:  801:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_nonzero",
       12:  802:                            "%llu", (unsigned long long)totals.evicted_nonzero);
       36:  803:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_time",
       12:  804:                            "%u", totals.evicted_time);
       36:  805:        APPEND_NUM_FMT_STAT(fmt, n, "outofmemory",
       12:  806:                            "%llu", (unsigned long long)totals.outofmemory);
       36:  807:        APPEND_NUM_FMT_STAT(fmt, n, "tailrepairs",
       12:  808:                            "%llu", (unsigned long long)totals.tailrepairs);
       36:  809:        APPEND_NUM_FMT_STAT(fmt, n, "reclaimed",
       12:  810:                            "%llu", (unsigned long long)totals.reclaimed);
       36:  811:        APPEND_NUM_FMT_STAT(fmt, n, "expired_unfetched",
       12:  812:                            "%llu", (unsigned long long)totals.expired_unfetched);
       36:  813:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_unfetched",
       12:  814:                            "%llu", (unsigned long long)totals.evicted_unfetched);
       12:  815:        if (settings.lru_maintainer_thread) {
       33:  816:            APPEND_NUM_FMT_STAT(fmt, n, "evicted_active",
       12:  817:                                "%llu", (unsigned long long)totals.evicted_active);
        -:  818:        }
       36:  819:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_reclaimed",
       12:  820:                            "%llu", (unsigned long long)totals.crawler_reclaimed);
       36:  821:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_items_checked",
       12:  822:                            "%llu", (unsigned long long)totals.crawler_items_checked);
       36:  823:        APPEND_NUM_FMT_STAT(fmt, n, "lrutail_reflocked",
       12:  824:                            "%llu", (unsigned long long)totals.lrutail_reflocked);
       12:  825:        if (settings.lru_maintainer_thread) {
       33:  826:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_cold",
       11:  827:                                "%llu", (unsigned long long)totals.moves_to_cold);
       33:  828:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_warm",
       11:  829:                                "%llu", (unsigned long long)totals.moves_to_warm);
       33:  830:            APPEND_NUM_FMT_STAT(fmt, n, "moves_within_lru",
       11:  831:                                "%llu", (unsigned long long)totals.moves_within_lru);
       33:  832:            APPEND_NUM_FMT_STAT(fmt, n, "direct_reclaims",
       11:  833:                                "%llu", (unsigned long long)totals.direct_reclaims);
       33:  834:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_hot",
       11:  835:                                "%llu", (unsigned long long)totals.hits_to_hot);
        -:  836:
       33:  837:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_warm",
       11:  838:                                "%llu", (unsigned long long)totals.hits_to_warm);
        -:  839:
       33:  840:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_cold",
       11:  841:                                "%llu", (unsigned long long)totals.hits_to_cold);
        -:  842:
       33:  843:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_temp",
       12:  844:                                "%llu", (unsigned long long)totals.hits_to_temp);
        -:  845:
        -:  846:        }
        -:  847:    }
        -:  848:
        -:  849:    /* getting here means both ascii and binary terminators fit */
       11:  850:    add_stats(NULL, 0, NULL, 0, c);
       11:  851:}
------------------
item_stats:
       11:  722:void item_stats(ADD_STAT add_stats, void *c) {
       11:  723:    struct thread_stats thread_stats;
       11:  724:    threadlocal_stats_aggregate(&thread_stats);
       11:  725:    itemstats_t totals;
       11:  726:    int n;
      715:  727:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
      704:  728:        memset(&totals, 0, sizeof(itemstats_t));
      704:  729:        int x;
      704:  730:        int i;
      704:  731:        unsigned int size = 0;
      704:  732:        unsigned int age  = 0;
      704:  733:        unsigned int age_hot = 0;
      704:  734:        unsigned int age_warm = 0;
      704:  735:        unsigned int lru_size_map[4];
      704:  736:        const char *fmt = "items:%d:%s";
      704:  737:        char key_str[STAT_KEY_LEN];
      704:  738:        char val_str[STAT_VAL_LEN];
      704:  739:        int klen = 0, vlen = 0;
     3520:  740:        for (x = 0; x < 4; x++) {
     2816:  741:            i = n | lru_type_map[x];
     2816:  742:            pthread_mutex_lock(&lru_locks[i]);
     2816:  743:            totals.evicted += itemstats[i].evicted;
     2816:  744:            totals.evicted_nonzero += itemstats[i].evicted_nonzero;
     2816:  745:            totals.outofmemory += itemstats[i].outofmemory;
     2816:  746:            totals.tailrepairs += itemstats[i].tailrepairs;
     2816:  747:            totals.reclaimed += itemstats[i].reclaimed;
     2816:  748:            totals.expired_unfetched += itemstats[i].expired_unfetched;
     2816:  749:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
     2816:  750:            totals.evicted_active += itemstats[i].evicted_active;
     2816:  751:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
     2816:  752:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
     2816:  753:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
     2816:  754:            totals.moves_to_cold += itemstats[i].moves_to_cold;
     2816:  755:            totals.moves_to_warm += itemstats[i].moves_to_warm;
     2816:  756:            totals.moves_within_lru += itemstats[i].moves_within_lru;
     2816:  757:            totals.direct_reclaims += itemstats[i].direct_reclaims;
     2816:  758:            size += sizes[i];
     2816:  759:            lru_size_map[x] = sizes[i];
     2816:  760:            if (lru_type_map[x] == COLD_LRU && tails[i] != NULL) {
        3:  761:                age = current_time - tails[i]->time;
     2813:  762:            } else if (lru_type_map[x] == HOT_LRU && tails[i] != NULL) {
        9:  763:                age_hot = current_time - tails[i]->time;
     2804:  764:            } else if (lru_type_map[x] == WARM_LRU && tails[i] != NULL) {
        1:  765:                age_warm = current_time - tails[i]->time;
        -:  766:            }
     2816:  767:            if (lru_type_map[x] == COLD_LRU)
      704:  768:                totals.evicted_time = itemstats[i].evicted_time;
     2816:  769:            switch (lru_type_map[x]) {
      704:  770:                case HOT_LRU:
      704:  771:                    totals.hits_to_hot = thread_stats.lru_hits[i];
      704:  772:                    break;
      704:  773:                case WARM_LRU:
      704:  774:                    totals.hits_to_warm = thread_stats.lru_hits[i];
      704:  775:                    break;
      704:  776:                case COLD_LRU:
      704:  777:                    totals.hits_to_cold = thread_stats.lru_hits[i];
      704:  778:                    break;
      704:  779:                case TEMP_LRU:
      704:  780:                    totals.hits_to_temp = thread_stats.lru_hits[i];
      704:  781:                    break;
        -:  782:            }
     2816:  783:            pthread_mutex_unlock(&lru_locks[i]);
        -:  784:        }
      704:  785:        if (size == 0)
      692:  786:            continue;
       36:  787:        APPEND_NUM_FMT_STAT(fmt, n, "number", "%u", size);
       12:  788:        if (settings.lru_maintainer_thread) {
       33:  789:            APPEND_NUM_FMT_STAT(fmt, n, "number_hot", "%u", lru_size_map[0]);
       33:  790:            APPEND_NUM_FMT_STAT(fmt, n, "number_warm", "%u", lru_size_map[1]);
       33:  791:            APPEND_NUM_FMT_STAT(fmt, n, "number_cold", "%u", lru_size_map[2]);
       11:  792:            if (settings.temp_lru) {
        6:  793:                APPEND_NUM_FMT_STAT(fmt, n, "number_temp", "%u", lru_size_map[3]);
        -:  794:            }
       33:  795:            APPEND_NUM_FMT_STAT(fmt, n, "age_hot", "%u", age_hot);
       33:  796:            APPEND_NUM_FMT_STAT(fmt, n, "age_warm", "%u", age_warm);
        -:  797:        }
       36:  798:        APPEND_NUM_FMT_STAT(fmt, n, "age", "%u", age);
       36:  799:        APPEND_NUM_FMT_STAT(fmt, n, "evicted",
       12:  800:                            "%llu", (unsigned long long)totals.evicted);
       36:  801:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_nonzero",
       12:  802:                            "%llu", (unsigned long long)totals.evicted_nonzero);
       36:  803:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_time",
       12:  804:                            "%u", totals.evicted_time);
       36:  805:        APPEND_NUM_FMT_STAT(fmt, n, "outofmemory",
       12:  806:                            "%llu", (unsigned long long)totals.outofmemory);
       36:  807:        APPEND_NUM_FMT_STAT(fmt, n, "tailrepairs",
       12:  808:                            "%llu", (unsigned long long)totals.tailrepairs);
       36:  809:        APPEND_NUM_FMT_STAT(fmt, n, "reclaimed",
       12:  810:                            "%llu", (unsigned long long)totals.reclaimed);
       36:  811:        APPEND_NUM_FMT_STAT(fmt, n, "expired_unfetched",
       12:  812:                            "%llu", (unsigned long long)totals.expired_unfetched);
       36:  813:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_unfetched",
       12:  814:                            "%llu", (unsigned long long)totals.evicted_unfetched);
       12:  815:        if (settings.lru_maintainer_thread) {
       33:  816:            APPEND_NUM_FMT_STAT(fmt, n, "evicted_active",
       12:  817:                                "%llu", (unsigned long long)totals.evicted_active);
        -:  818:        }
       36:  819:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_reclaimed",
       12:  820:                            "%llu", (unsigned long long)totals.crawler_reclaimed);
       36:  821:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_items_checked",
       12:  822:                            "%llu", (unsigned long long)totals.crawler_items_checked);
       36:  823:        APPEND_NUM_FMT_STAT(fmt, n, "lrutail_reflocked",
       12:  824:                            "%llu", (unsigned long long)totals.lrutail_reflocked);
       12:  825:        if (settings.lru_maintainer_thread) {
       33:  826:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_cold",
       11:  827:                                "%llu", (unsigned long long)totals.moves_to_cold);
       33:  828:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_warm",
       11:  829:                                "%llu", (unsigned long long)totals.moves_to_warm);
       33:  830:            APPEND_NUM_FMT_STAT(fmt, n, "moves_within_lru",
       11:  831:                                "%llu", (unsigned long long)totals.moves_within_lru);
       33:  832:            APPEND_NUM_FMT_STAT(fmt, n, "direct_reclaims",
       11:  833:                                "%llu", (unsigned long long)totals.direct_reclaims);
       33:  834:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_hot",
       11:  835:                                "%llu", (unsigned long long)totals.hits_to_hot);
        -:  836:
       33:  837:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_warm",
       11:  838:                                "%llu", (unsigned long long)totals.hits_to_warm);
        -:  839:
       33:  840:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_cold",
       11:  841:                                "%llu", (unsigned long long)totals.hits_to_cold);
        -:  842:
       33:  843:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_temp",
       12:  844:                                "%llu", (unsigned long long)totals.hits_to_temp);
        -:  845:
        -:  846:        }
        -:  847:    }
        -:  848:
        -:  849:    /* getting here means both ascii and binary terminators fit */
       11:  850:    add_stats(NULL, 0, NULL, 0, c);
       11:  851:}
------------------
item_stats:
       11:  722:void item_stats(ADD_STAT add_stats, void *c) {
       11:  723:    struct thread_stats thread_stats;
       11:  724:    threadlocal_stats_aggregate(&thread_stats);
       11:  725:    itemstats_t totals;
       11:  726:    int n;
      715:  727:    for (n = 0; n < MAX_NUMBER_OF_SLAB_CLASSES; n++) {
      704:  728:        memset(&totals, 0, sizeof(itemstats_t));
      704:  729:        int x;
      704:  730:        int i;
      704:  731:        unsigned int size = 0;
      704:  732:        unsigned int age  = 0;
      704:  733:        unsigned int age_hot = 0;
      704:  734:        unsigned int age_warm = 0;
      704:  735:        unsigned int lru_size_map[4];
      704:  736:        const char *fmt = "items:%d:%s";
      704:  737:        char key_str[STAT_KEY_LEN];
      704:  738:        char val_str[STAT_VAL_LEN];
      704:  739:        int klen = 0, vlen = 0;
     3520:  740:        for (x = 0; x < 4; x++) {
     2816:  741:            i = n | lru_type_map[x];
     2816:  742:            pthread_mutex_lock(&lru_locks[i]);
     2816:  743:            totals.evicted += itemstats[i].evicted;
     2816:  744:            totals.evicted_nonzero += itemstats[i].evicted_nonzero;
     2816:  745:            totals.outofmemory += itemstats[i].outofmemory;
     2816:  746:            totals.tailrepairs += itemstats[i].tailrepairs;
     2816:  747:            totals.reclaimed += itemstats[i].reclaimed;
     2816:  748:            totals.expired_unfetched += itemstats[i].expired_unfetched;
     2816:  749:            totals.evicted_unfetched += itemstats[i].evicted_unfetched;
     2816:  750:            totals.evicted_active += itemstats[i].evicted_active;
     2816:  751:            totals.crawler_reclaimed += itemstats[i].crawler_reclaimed;
     2816:  752:            totals.crawler_items_checked += itemstats[i].crawler_items_checked;
     2816:  753:            totals.lrutail_reflocked += itemstats[i].lrutail_reflocked;
     2816:  754:            totals.moves_to_cold += itemstats[i].moves_to_cold;
     2816:  755:            totals.moves_to_warm += itemstats[i].moves_to_warm;
     2816:  756:            totals.moves_within_lru += itemstats[i].moves_within_lru;
     2816:  757:            totals.direct_reclaims += itemstats[i].direct_reclaims;
     2816:  758:            size += sizes[i];
     2816:  759:            lru_size_map[x] = sizes[i];
     2816:  760:            if (lru_type_map[x] == COLD_LRU && tails[i] != NULL) {
        3:  761:                age = current_time - tails[i]->time;
     2813:  762:            } else if (lru_type_map[x] == HOT_LRU && tails[i] != NULL) {
        9:  763:                age_hot = current_time - tails[i]->time;
     2804:  764:            } else if (lru_type_map[x] == WARM_LRU && tails[i] != NULL) {
        1:  765:                age_warm = current_time - tails[i]->time;
        -:  766:            }
     2816:  767:            if (lru_type_map[x] == COLD_LRU)
      704:  768:                totals.evicted_time = itemstats[i].evicted_time;
     2816:  769:            switch (lru_type_map[x]) {
      704:  770:                case HOT_LRU:
      704:  771:                    totals.hits_to_hot = thread_stats.lru_hits[i];
      704:  772:                    break;
      704:  773:                case WARM_LRU:
      704:  774:                    totals.hits_to_warm = thread_stats.lru_hits[i];
      704:  775:                    break;
      704:  776:                case COLD_LRU:
      704:  777:                    totals.hits_to_cold = thread_stats.lru_hits[i];
      704:  778:                    break;
      704:  779:                case TEMP_LRU:
      704:  780:                    totals.hits_to_temp = thread_stats.lru_hits[i];
      704:  781:                    break;
        -:  782:            }
     2816:  783:            pthread_mutex_unlock(&lru_locks[i]);
        -:  784:        }
      704:  785:        if (size == 0)
      692:  786:            continue;
       36:  787:        APPEND_NUM_FMT_STAT(fmt, n, "number", "%u", size);
       12:  788:        if (settings.lru_maintainer_thread) {
       33:  789:            APPEND_NUM_FMT_STAT(fmt, n, "number_hot", "%u", lru_size_map[0]);
       33:  790:            APPEND_NUM_FMT_STAT(fmt, n, "number_warm", "%u", lru_size_map[1]);
       33:  791:            APPEND_NUM_FMT_STAT(fmt, n, "number_cold", "%u", lru_size_map[2]);
       11:  792:            if (settings.temp_lru) {
        6:  793:                APPEND_NUM_FMT_STAT(fmt, n, "number_temp", "%u", lru_size_map[3]);
        -:  794:            }
       33:  795:            APPEND_NUM_FMT_STAT(fmt, n, "age_hot", "%u", age_hot);
       33:  796:            APPEND_NUM_FMT_STAT(fmt, n, "age_warm", "%u", age_warm);
        -:  797:        }
       36:  798:        APPEND_NUM_FMT_STAT(fmt, n, "age", "%u", age);
       36:  799:        APPEND_NUM_FMT_STAT(fmt, n, "evicted",
       12:  800:                            "%llu", (unsigned long long)totals.evicted);
       36:  801:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_nonzero",
       12:  802:                            "%llu", (unsigned long long)totals.evicted_nonzero);
       36:  803:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_time",
       12:  804:                            "%u", totals.evicted_time);
       36:  805:        APPEND_NUM_FMT_STAT(fmt, n, "outofmemory",
       12:  806:                            "%llu", (unsigned long long)totals.outofmemory);
       36:  807:        APPEND_NUM_FMT_STAT(fmt, n, "tailrepairs",
       12:  808:                            "%llu", (unsigned long long)totals.tailrepairs);
       36:  809:        APPEND_NUM_FMT_STAT(fmt, n, "reclaimed",
       12:  810:                            "%llu", (unsigned long long)totals.reclaimed);
       36:  811:        APPEND_NUM_FMT_STAT(fmt, n, "expired_unfetched",
       12:  812:                            "%llu", (unsigned long long)totals.expired_unfetched);
       36:  813:        APPEND_NUM_FMT_STAT(fmt, n, "evicted_unfetched",
       12:  814:                            "%llu", (unsigned long long)totals.evicted_unfetched);
       12:  815:        if (settings.lru_maintainer_thread) {
       33:  816:            APPEND_NUM_FMT_STAT(fmt, n, "evicted_active",
       12:  817:                                "%llu", (unsigned long long)totals.evicted_active);
        -:  818:        }
       36:  819:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_reclaimed",
       12:  820:                            "%llu", (unsigned long long)totals.crawler_reclaimed);
       36:  821:        APPEND_NUM_FMT_STAT(fmt, n, "crawler_items_checked",
       12:  822:                            "%llu", (unsigned long long)totals.crawler_items_checked);
       36:  823:        APPEND_NUM_FMT_STAT(fmt, n, "lrutail_reflocked",
       12:  824:                            "%llu", (unsigned long long)totals.lrutail_reflocked);
       12:  825:        if (settings.lru_maintainer_thread) {
       33:  826:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_cold",
       11:  827:                                "%llu", (unsigned long long)totals.moves_to_cold);
       33:  828:            APPEND_NUM_FMT_STAT(fmt, n, "moves_to_warm",
       11:  829:                                "%llu", (unsigned long long)totals.moves_to_warm);
       33:  830:            APPEND_NUM_FMT_STAT(fmt, n, "moves_within_lru",
       11:  831:                                "%llu", (unsigned long long)totals.moves_within_lru);
       33:  832:            APPEND_NUM_FMT_STAT(fmt, n, "direct_reclaims",
       11:  833:                                "%llu", (unsigned long long)totals.direct_reclaims);
       33:  834:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_hot",
       11:  835:                                "%llu", (unsigned long long)totals.hits_to_hot);
        -:  836:
       33:  837:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_warm",
       11:  838:                                "%llu", (unsigned long long)totals.hits_to_warm);
        -:  839:
       33:  840:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_cold",
       11:  841:                                "%llu", (unsigned long long)totals.hits_to_cold);
        -:  842:
       33:  843:            APPEND_NUM_FMT_STAT(fmt, n, "hits_to_temp",
       12:  844:                                "%llu", (unsigned long long)totals.hits_to_temp);
        -:  845:
        -:  846:        }
        -:  847:    }
        -:  848:
        -:  849:    /* getting here means both ascii and binary terminators fit */
       11:  850:    add_stats(NULL, 0, NULL, 0, c);
       11:  851:}
------------------
        -:  852:
       68:  853:bool item_stats_sizes_status(void) {
       68:  854:    bool ret = false;
       68:  855:    mutex_lock(&stats_sizes_lock);
       68:  856:    if (stats_sizes_hist != NULL)
    #####:  857:        ret = true;
       68:  858:    mutex_unlock(&stats_sizes_lock);
       68:  859:    return ret;
        -:  860:}
------------------
item_stats_sizes_status:
       17:  853:bool item_stats_sizes_status(void) {
       17:  854:    bool ret = false;
       17:  855:    mutex_lock(&stats_sizes_lock);
       17:  856:    if (stats_sizes_hist != NULL)
    #####:  857:        ret = true;
       17:  858:    mutex_unlock(&stats_sizes_lock);
       17:  859:    return ret;
        -:  860:}
------------------
item_stats_sizes_status:
       17:  853:bool item_stats_sizes_status(void) {
       17:  854:    bool ret = false;
       17:  855:    mutex_lock(&stats_sizes_lock);
       17:  856:    if (stats_sizes_hist != NULL)
    #####:  857:        ret = true;
       17:  858:    mutex_unlock(&stats_sizes_lock);
       17:  859:    return ret;
        -:  860:}
------------------
item_stats_sizes_status:
       17:  853:bool item_stats_sizes_status(void) {
       17:  854:    bool ret = false;
       17:  855:    mutex_lock(&stats_sizes_lock);
       17:  856:    if (stats_sizes_hist != NULL)
    #####:  857:        ret = true;
       17:  858:    mutex_unlock(&stats_sizes_lock);
       17:  859:    return ret;
        -:  860:}
------------------
item_stats_sizes_status:
       17:  853:bool item_stats_sizes_status(void) {
       17:  854:    bool ret = false;
       17:  855:    mutex_lock(&stats_sizes_lock);
       17:  856:    if (stats_sizes_hist != NULL)
    #####:  857:        ret = true;
       17:  858:    mutex_unlock(&stats_sizes_lock);
       17:  859:    return ret;
        -:  860:}
------------------
        -:  861:
    #####:  862:void item_stats_sizes_init(void) {
    #####:  863:    if (stats_sizes_hist != NULL)
        -:  864:        return;
    #####:  865:    stats_sizes_buckets = settings.item_size_max / 32 + 1;
    #####:  866:    stats_sizes_hist = calloc(stats_sizes_buckets, sizeof(int));
    #####:  867:    stats_sizes_cas_min = (settings.use_cas) ? get_cas_id() : 0;
        -:  868:}
------------------
item_stats_sizes_init:
    #####:  862:void item_stats_sizes_init(void) {
    #####:  863:    if (stats_sizes_hist != NULL)
        -:  864:        return;
    #####:  865:    stats_sizes_buckets = settings.item_size_max / 32 + 1;
    #####:  866:    stats_sizes_hist = calloc(stats_sizes_buckets, sizeof(int));
    #####:  867:    stats_sizes_cas_min = (settings.use_cas) ? get_cas_id() : 0;
        -:  868:}
------------------
item_stats_sizes_init:
    #####:  862:void item_stats_sizes_init(void) {
    #####:  863:    if (stats_sizes_hist != NULL)
        -:  864:        return;
    #####:  865:    stats_sizes_buckets = settings.item_size_max / 32 + 1;
    #####:  866:    stats_sizes_hist = calloc(stats_sizes_buckets, sizeof(int));
    #####:  867:    stats_sizes_cas_min = (settings.use_cas) ? get_cas_id() : 0;
        -:  868:}
------------------
item_stats_sizes_init:
    #####:  862:void item_stats_sizes_init(void) {
    #####:  863:    if (stats_sizes_hist != NULL)
        -:  864:        return;
    #####:  865:    stats_sizes_buckets = settings.item_size_max / 32 + 1;
    #####:  866:    stats_sizes_hist = calloc(stats_sizes_buckets, sizeof(int));
    #####:  867:    stats_sizes_cas_min = (settings.use_cas) ? get_cas_id() : 0;
        -:  868:}
------------------
item_stats_sizes_init:
    #####:  862:void item_stats_sizes_init(void) {
    #####:  863:    if (stats_sizes_hist != NULL)
        -:  864:        return;
    #####:  865:    stats_sizes_buckets = settings.item_size_max / 32 + 1;
    #####:  866:    stats_sizes_hist = calloc(stats_sizes_buckets, sizeof(int));
    #####:  867:    stats_sizes_cas_min = (settings.use_cas) ? get_cas_id() : 0;
        -:  868:}
------------------
        -:  869:
    #####:  870:void item_stats_sizes_enable(ADD_STAT add_stats, void *c) {
    #####:  871:    mutex_lock(&stats_sizes_lock);
    #####:  872:    if (!settings.use_cas) {
    #####:  873:        APPEND_STAT("sizes_status", "error", "");
    #####:  874:        APPEND_STAT("sizes_error", "cas_support_disabled", "");
    #####:  875:    } else if (stats_sizes_hist == NULL) {
    #####:  876:        item_stats_sizes_init();
    #####:  877:        if (stats_sizes_hist != NULL) {
    #####:  878:            APPEND_STAT("sizes_status", "enabled", "");
        -:  879:        } else {
    #####:  880:            APPEND_STAT("sizes_status", "error", "");
    #####:  881:            APPEND_STAT("sizes_error", "no_memory", "");
        -:  882:        }
        -:  883:    } else {
    #####:  884:        APPEND_STAT("sizes_status", "enabled", "");
        -:  885:    }
    #####:  886:    mutex_unlock(&stats_sizes_lock);
    #####:  887:}
------------------
item_stats_sizes_enable:
    #####:  870:void item_stats_sizes_enable(ADD_STAT add_stats, void *c) {
    #####:  871:    mutex_lock(&stats_sizes_lock);
    #####:  872:    if (!settings.use_cas) {
    #####:  873:        APPEND_STAT("sizes_status", "error", "");
    #####:  874:        APPEND_STAT("sizes_error", "cas_support_disabled", "");
    #####:  875:    } else if (stats_sizes_hist == NULL) {
    #####:  876:        item_stats_sizes_init();
    #####:  877:        if (stats_sizes_hist != NULL) {
    #####:  878:            APPEND_STAT("sizes_status", "enabled", "");
        -:  879:        } else {
    #####:  880:            APPEND_STAT("sizes_status", "error", "");
    #####:  881:            APPEND_STAT("sizes_error", "no_memory", "");
        -:  882:        }
        -:  883:    } else {
    #####:  884:        APPEND_STAT("sizes_status", "enabled", "");
        -:  885:    }
    #####:  886:    mutex_unlock(&stats_sizes_lock);
    #####:  887:}
------------------
item_stats_sizes_enable:
    #####:  870:void item_stats_sizes_enable(ADD_STAT add_stats, void *c) {
    #####:  871:    mutex_lock(&stats_sizes_lock);
    #####:  872:    if (!settings.use_cas) {
    #####:  873:        APPEND_STAT("sizes_status", "error", "");
    #####:  874:        APPEND_STAT("sizes_error", "cas_support_disabled", "");
    #####:  875:    } else if (stats_sizes_hist == NULL) {
    #####:  876:        item_stats_sizes_init();
    #####:  877:        if (stats_sizes_hist != NULL) {
    #####:  878:            APPEND_STAT("sizes_status", "enabled", "");
        -:  879:        } else {
    #####:  880:            APPEND_STAT("sizes_status", "error", "");
    #####:  881:            APPEND_STAT("sizes_error", "no_memory", "");
        -:  882:        }
        -:  883:    } else {
    #####:  884:        APPEND_STAT("sizes_status", "enabled", "");
        -:  885:    }
    #####:  886:    mutex_unlock(&stats_sizes_lock);
    #####:  887:}
------------------
item_stats_sizes_enable:
    #####:  870:void item_stats_sizes_enable(ADD_STAT add_stats, void *c) {
    #####:  871:    mutex_lock(&stats_sizes_lock);
    #####:  872:    if (!settings.use_cas) {
    #####:  873:        APPEND_STAT("sizes_status", "error", "");
    #####:  874:        APPEND_STAT("sizes_error", "cas_support_disabled", "");
    #####:  875:    } else if (stats_sizes_hist == NULL) {
    #####:  876:        item_stats_sizes_init();
    #####:  877:        if (stats_sizes_hist != NULL) {
    #####:  878:            APPEND_STAT("sizes_status", "enabled", "");
        -:  879:        } else {
    #####:  880:            APPEND_STAT("sizes_status", "error", "");
    #####:  881:            APPEND_STAT("sizes_error", "no_memory", "");
        -:  882:        }
        -:  883:    } else {
    #####:  884:        APPEND_STAT("sizes_status", "enabled", "");
        -:  885:    }
    #####:  886:    mutex_unlock(&stats_sizes_lock);
    #####:  887:}
------------------
item_stats_sizes_enable:
    #####:  870:void item_stats_sizes_enable(ADD_STAT add_stats, void *c) {
    #####:  871:    mutex_lock(&stats_sizes_lock);
    #####:  872:    if (!settings.use_cas) {
    #####:  873:        APPEND_STAT("sizes_status", "error", "");
    #####:  874:        APPEND_STAT("sizes_error", "cas_support_disabled", "");
    #####:  875:    } else if (stats_sizes_hist == NULL) {
    #####:  876:        item_stats_sizes_init();
    #####:  877:        if (stats_sizes_hist != NULL) {
    #####:  878:            APPEND_STAT("sizes_status", "enabled", "");
        -:  879:        } else {
    #####:  880:            APPEND_STAT("sizes_status", "error", "");
    #####:  881:            APPEND_STAT("sizes_error", "no_memory", "");
        -:  882:        }
        -:  883:    } else {
    #####:  884:        APPEND_STAT("sizes_status", "enabled", "");
        -:  885:    }
    #####:  886:    mutex_unlock(&stats_sizes_lock);
    #####:  887:}
------------------
        -:  888:
    #####:  889:void item_stats_sizes_disable(ADD_STAT add_stats, void *c) {
    #####:  890:    mutex_lock(&stats_sizes_lock);
    #####:  891:    if (stats_sizes_hist != NULL) {
    #####:  892:        free(stats_sizes_hist);
    #####:  893:        stats_sizes_hist = NULL;
        -:  894:    }
    #####:  895:    APPEND_STAT("sizes_status", "disabled", "");
    #####:  896:    mutex_unlock(&stats_sizes_lock);
    #####:  897:}
------------------
item_stats_sizes_disable:
    #####:  889:void item_stats_sizes_disable(ADD_STAT add_stats, void *c) {
    #####:  890:    mutex_lock(&stats_sizes_lock);
    #####:  891:    if (stats_sizes_hist != NULL) {
    #####:  892:        free(stats_sizes_hist);
    #####:  893:        stats_sizes_hist = NULL;
        -:  894:    }
    #####:  895:    APPEND_STAT("sizes_status", "disabled", "");
    #####:  896:    mutex_unlock(&stats_sizes_lock);
    #####:  897:}
------------------
item_stats_sizes_disable:
    #####:  889:void item_stats_sizes_disable(ADD_STAT add_stats, void *c) {
    #####:  890:    mutex_lock(&stats_sizes_lock);
    #####:  891:    if (stats_sizes_hist != NULL) {
    #####:  892:        free(stats_sizes_hist);
    #####:  893:        stats_sizes_hist = NULL;
        -:  894:    }
    #####:  895:    APPEND_STAT("sizes_status", "disabled", "");
    #####:  896:    mutex_unlock(&stats_sizes_lock);
    #####:  897:}
------------------
item_stats_sizes_disable:
    #####:  889:void item_stats_sizes_disable(ADD_STAT add_stats, void *c) {
    #####:  890:    mutex_lock(&stats_sizes_lock);
    #####:  891:    if (stats_sizes_hist != NULL) {
    #####:  892:        free(stats_sizes_hist);
    #####:  893:        stats_sizes_hist = NULL;
        -:  894:    }
    #####:  895:    APPEND_STAT("sizes_status", "disabled", "");
    #####:  896:    mutex_unlock(&stats_sizes_lock);
    #####:  897:}
------------------
item_stats_sizes_disable:
    #####:  889:void item_stats_sizes_disable(ADD_STAT add_stats, void *c) {
    #####:  890:    mutex_lock(&stats_sizes_lock);
    #####:  891:    if (stats_sizes_hist != NULL) {
    #####:  892:        free(stats_sizes_hist);
    #####:  893:        stats_sizes_hist = NULL;
        -:  894:    }
    #####:  895:    APPEND_STAT("sizes_status", "disabled", "");
    #####:  896:    mutex_unlock(&stats_sizes_lock);
    #####:  897:}
------------------
        -:  898:
   417144:  899:void item_stats_sizes_add(item *it) {
  417144*:  900:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  901:        return;
    #####:  902:    int ntotal = ITEM_ntotal(it);
    #####:  903:    int bucket = ntotal / 32;
    #####:  904:    if ((ntotal % 32) != 0) bucket++;
    #####:  905:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]++;
        -:  906:}
------------------
item_stats_sizes_add:
   104286:  899:void item_stats_sizes_add(item *it) {
  104286*:  900:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  901:        return;
    #####:  902:    int ntotal = ITEM_ntotal(it);
    #####:  903:    int bucket = ntotal / 32;
    #####:  904:    if ((ntotal % 32) != 0) bucket++;
    #####:  905:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]++;
        -:  906:}
------------------
item_stats_sizes_add:
   104286:  899:void item_stats_sizes_add(item *it) {
  104286*:  900:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  901:        return;
    #####:  902:    int ntotal = ITEM_ntotal(it);
    #####:  903:    int bucket = ntotal / 32;
    #####:  904:    if ((ntotal % 32) != 0) bucket++;
    #####:  905:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]++;
        -:  906:}
------------------
item_stats_sizes_add:
   104286:  899:void item_stats_sizes_add(item *it) {
  104286*:  900:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  901:        return;
    #####:  902:    int ntotal = ITEM_ntotal(it);
    #####:  903:    int bucket = ntotal / 32;
    #####:  904:    if ((ntotal % 32) != 0) bucket++;
    #####:  905:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]++;
        -:  906:}
------------------
item_stats_sizes_add:
   104286:  899:void item_stats_sizes_add(item *it) {
  104286*:  900:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  901:        return;
    #####:  902:    int ntotal = ITEM_ntotal(it);
    #####:  903:    int bucket = ntotal / 32;
    #####:  904:    if ((ntotal % 32) != 0) bucket++;
    #####:  905:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]++;
        -:  906:}
------------------
        -:  907:
        -:  908:/* I think there's no way for this to be accurate without using the CAS value.
        -:  909: * Since items getting their time value bumped will pass this validation.
        -:  910: */
   259872:  911:void item_stats_sizes_remove(item *it) {
  259872*:  912:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  913:        return;
    #####:  914:    int ntotal = ITEM_ntotal(it);
    #####:  915:    int bucket = ntotal / 32;
    #####:  916:    if ((ntotal % 32) != 0) bucket++;
    #####:  917:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]--;
        -:  918:}
------------------
item_stats_sizes_remove:
    64968:  911:void item_stats_sizes_remove(item *it) {
   64968*:  912:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  913:        return;
    #####:  914:    int ntotal = ITEM_ntotal(it);
    #####:  915:    int bucket = ntotal / 32;
    #####:  916:    if ((ntotal % 32) != 0) bucket++;
    #####:  917:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]--;
        -:  918:}
------------------
item_stats_sizes_remove:
    64968:  911:void item_stats_sizes_remove(item *it) {
   64968*:  912:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  913:        return;
    #####:  914:    int ntotal = ITEM_ntotal(it);
    #####:  915:    int bucket = ntotal / 32;
    #####:  916:    if ((ntotal % 32) != 0) bucket++;
    #####:  917:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]--;
        -:  918:}
------------------
item_stats_sizes_remove:
    64968:  911:void item_stats_sizes_remove(item *it) {
   64968*:  912:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  913:        return;
    #####:  914:    int ntotal = ITEM_ntotal(it);
    #####:  915:    int bucket = ntotal / 32;
    #####:  916:    if ((ntotal % 32) != 0) bucket++;
    #####:  917:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]--;
        -:  918:}
------------------
item_stats_sizes_remove:
    64968:  911:void item_stats_sizes_remove(item *it) {
   64968*:  912:    if (stats_sizes_hist == NULL || stats_sizes_cas_min > ITEM_get_cas(it))
        -:  913:        return;
    #####:  914:    int ntotal = ITEM_ntotal(it);
    #####:  915:    int bucket = ntotal / 32;
    #####:  916:    if ((ntotal % 32) != 0) bucket++;
    #####:  917:    if (bucket < stats_sizes_buckets) stats_sizes_hist[bucket]--;
        -:  918:}
------------------
        -:  919:
        -:  920:/** dumps out a list of objects of each size, with granularity of 32 bytes */
        -:  921:/*@null@*/
        -:  922:/* Locks are correct based on a technicality. Holds LRU lock while doing the
        -:  923: * work, so items can't go invalid, and it's only looking at header sizes
        -:  924: * which don't change.
        -:  925: */
    #####:  926:void item_stats_sizes(ADD_STAT add_stats, void *c) {
    #####:  927:    mutex_lock(&stats_sizes_lock);
        -:  928:
    #####:  929:    if (stats_sizes_hist != NULL) {
        -:  930:        int i;
    #####:  931:        for (i = 0; i < stats_sizes_buckets; i++) {
    #####:  932:            if (stats_sizes_hist[i] != 0) {
    #####:  933:                char key[12];
    #####:  934:                snprintf(key, sizeof(key), "%d", i * 32);
    #####:  935:                APPEND_STAT(key, "%u", stats_sizes_hist[i]);
        -:  936:            }
        -:  937:        }
        -:  938:    } else {
    #####:  939:        APPEND_STAT("sizes_status", "disabled", "");
        -:  940:    }
        -:  941:
    #####:  942:    add_stats(NULL, 0, NULL, 0, c);
    #####:  943:    mutex_unlock(&stats_sizes_lock);
    #####:  944:}
------------------
item_stats_sizes:
    #####:  926:void item_stats_sizes(ADD_STAT add_stats, void *c) {
    #####:  927:    mutex_lock(&stats_sizes_lock);
        -:  928:
    #####:  929:    if (stats_sizes_hist != NULL) {
        -:  930:        int i;
    #####:  931:        for (i = 0; i < stats_sizes_buckets; i++) {
    #####:  932:            if (stats_sizes_hist[i] != 0) {
    #####:  933:                char key[12];
    #####:  934:                snprintf(key, sizeof(key), "%d", i * 32);
    #####:  935:                APPEND_STAT(key, "%u", stats_sizes_hist[i]);
        -:  936:            }
        -:  937:        }
        -:  938:    } else {
    #####:  939:        APPEND_STAT("sizes_status", "disabled", "");
        -:  940:    }
        -:  941:
    #####:  942:    add_stats(NULL, 0, NULL, 0, c);
    #####:  943:    mutex_unlock(&stats_sizes_lock);
    #####:  944:}
------------------
item_stats_sizes:
    #####:  926:void item_stats_sizes(ADD_STAT add_stats, void *c) {
    #####:  927:    mutex_lock(&stats_sizes_lock);
        -:  928:
    #####:  929:    if (stats_sizes_hist != NULL) {
        -:  930:        int i;
    #####:  931:        for (i = 0; i < stats_sizes_buckets; i++) {
    #####:  932:            if (stats_sizes_hist[i] != 0) {
    #####:  933:                char key[12];
    #####:  934:                snprintf(key, sizeof(key), "%d", i * 32);
    #####:  935:                APPEND_STAT(key, "%u", stats_sizes_hist[i]);
        -:  936:            }
        -:  937:        }
        -:  938:    } else {
    #####:  939:        APPEND_STAT("sizes_status", "disabled", "");
        -:  940:    }
        -:  941:
    #####:  942:    add_stats(NULL, 0, NULL, 0, c);
    #####:  943:    mutex_unlock(&stats_sizes_lock);
    #####:  944:}
------------------
item_stats_sizes:
    #####:  926:void item_stats_sizes(ADD_STAT add_stats, void *c) {
    #####:  927:    mutex_lock(&stats_sizes_lock);
        -:  928:
    #####:  929:    if (stats_sizes_hist != NULL) {
        -:  930:        int i;
    #####:  931:        for (i = 0; i < stats_sizes_buckets; i++) {
    #####:  932:            if (stats_sizes_hist[i] != 0) {
    #####:  933:                char key[12];
    #####:  934:                snprintf(key, sizeof(key), "%d", i * 32);
    #####:  935:                APPEND_STAT(key, "%u", stats_sizes_hist[i]);
        -:  936:            }
        -:  937:        }
        -:  938:    } else {
    #####:  939:        APPEND_STAT("sizes_status", "disabled", "");
        -:  940:    }
        -:  941:
    #####:  942:    add_stats(NULL, 0, NULL, 0, c);
    #####:  943:    mutex_unlock(&stats_sizes_lock);
    #####:  944:}
------------------
item_stats_sizes:
    #####:  926:void item_stats_sizes(ADD_STAT add_stats, void *c) {
    #####:  927:    mutex_lock(&stats_sizes_lock);
        -:  928:
    #####:  929:    if (stats_sizes_hist != NULL) {
        -:  930:        int i;
    #####:  931:        for (i = 0; i < stats_sizes_buckets; i++) {
    #####:  932:            if (stats_sizes_hist[i] != 0) {
    #####:  933:                char key[12];
    #####:  934:                snprintf(key, sizeof(key), "%d", i * 32);
    #####:  935:                APPEND_STAT(key, "%u", stats_sizes_hist[i]);
        -:  936:            }
        -:  937:        }
        -:  938:    } else {
    #####:  939:        APPEND_STAT("sizes_status", "disabled", "");
        -:  940:    }
        -:  941:
    #####:  942:    add_stats(NULL, 0, NULL, 0, c);
    #####:  943:    mutex_unlock(&stats_sizes_lock);
    #####:  944:}
------------------
        -:  945:
        -:  946:/** wrapper around assoc_find which does the lazy expiration logic */
   879904:  947:item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c, const bool do_update) {
   879904:  948:    item *it = assoc_find(key, nkey, hv);
   879904:  949:    if (it != NULL) {
   284136:  950:        refcount_incr(it);
        -:  951:        /* Optimization for slab reassignment. prevents popular items from
        -:  952:         * jamming in busy wait. Can only do this here to satisfy lock order
        -:  953:         * of item_lock, slabs_lock. */
        -:  954:        /* This was made unsafe by removal of the cache_lock:
        -:  955:         * slab_rebalance_signal and slab_rebal.* are modified in a separate
        -:  956:         * thread under slabs_lock. If slab_rebalance_signal = 1, slab_start =
        -:  957:         * NULL (0), but slab_end is still equal to some value, this would end
        -:  958:         * up unlinking every item fetched.
        -:  959:         * This is either an acceptable loss, or if slab_rebalance_signal is
        -:  960:         * true, slab_start/slab_end should be put behind the slabs_lock.
        -:  961:         * Which would cause a huge potential slowdown.
        -:  962:         * Could also use a specific lock for slab_rebal.* and
        -:  963:         * slab_rebalance_signal (shorter lock?)
        -:  964:         */
        -:  965:        /*if (slab_rebalance_signal &&
        -:  966:            ((void *)it >= slab_rebal.slab_start && (void *)it < slab_rebal.slab_end)) {
        -:  967:            do_item_unlink(it, hv);
        -:  968:            do_item_remove(it);
        -:  969:            it = NULL;
        -:  970:        }*/
        -:  971:    }
   879904:  972:    int was_found = 0;
        -:  973:
   879904:  974:    if (settings.verbose > 2) {
    #####:  975:        int ii;
    #####:  976:        if (it == NULL) {
    #####:  977:            fprintf(stderr, "> NOT FOUND ");
        -:  978:        } else {
    #####:  979:            fprintf(stderr, "> FOUND KEY ");
        -:  980:        }
    #####:  981:        for (ii = 0; ii < nkey; ++ii) {
    #####:  982:            fprintf(stderr, "%c", key[ii]);
        -:  983:        }
        -:  984:    }
        -:  985:
   879904:  986:    if (it != NULL) {
   284136:  987:        was_found = 1;
   284136:  988:        if (item_is_flushed(it)) {
      240:  989:            do_item_unlink(it, hv);
      240:  990:            STORAGE_delete(c->thread->storage, it);
      240:  991:            do_item_remove(it);
      240:  992:            it = NULL;
      240:  993:            pthread_mutex_lock(&c->thread->stats.mutex);
      240:  994:            c->thread->stats.get_flushed++;
      240:  995:            pthread_mutex_unlock(&c->thread->stats.mutex);
      240:  996:            if (settings.verbose > 2) {
    #####:  997:                fprintf(stderr, " -nuked by flush");
        -:  998:            }
        -:  999:            was_found = 2;
   283896: 1000:        } else if (it->exptime != 0 && it->exptime <= current_time) {
       20: 1001:            do_item_unlink(it, hv);
       20: 1002:            STORAGE_delete(c->thread->storage, it);
       20: 1003:            do_item_remove(it);
       20: 1004:            it = NULL;
       20: 1005:            pthread_mutex_lock(&c->thread->stats.mutex);
       20: 1006:            c->thread->stats.get_expired++;
       20: 1007:            pthread_mutex_unlock(&c->thread->stats.mutex);
       20: 1008:            if (settings.verbose > 2) {
    #####: 1009:                fprintf(stderr, " -nuked by expire");
        -: 1010:            }
        -: 1011:            was_found = 3;
        -: 1012:        } else {
   283876: 1013:            if (do_update) {
        -: 1014:                /* We update the hit markers only during fetches.
        -: 1015:                 * An item needs to be hit twice overall to be considered
        -: 1016:                 * ACTIVE, but only needs a single hit to maintain activity
        -: 1017:                 * afterward.
        -: 1018:                 * FETCHED tells if an item has ever been active.
        -: 1019:                 */
   128848: 1020:                if (settings.lru_segmented) {
   125620: 1021:                    if ((it->it_flags & ITEM_ACTIVE) == 0) {
   125456: 1022:                        if ((it->it_flags & ITEM_FETCHED) == 0) {
   125352: 1023:                            it->it_flags |= ITEM_FETCHED;
        -: 1024:                        } else {
      104: 1025:                            it->it_flags |= ITEM_ACTIVE;
      104: 1026:                            if (ITEM_lruid(it) != COLD_LRU) {
       64: 1027:                                do_item_update(it); // bump LA time
       40: 1028:                            } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
        -: 1029:                                // add flag before async bump to avoid race.
    #####: 1030:                                it->it_flags &= ~ITEM_ACTIVE;
        -: 1031:                            }
        -: 1032:                        }
        -: 1033:                    }
        -: 1034:                } else {
     3228: 1035:                    it->it_flags |= ITEM_FETCHED;
     3228: 1036:                    do_item_update(it);
        -: 1037:                }
        -: 1038:            }
   879904: 1039:            DEBUG_REFCNT(it, '+');
        -: 1040:        }
        -: 1041:    }
        -: 1042:
   879904: 1043:    if (settings.verbose > 2)
    #####: 1044:        fprintf(stderr, "\n");
        -: 1045:    /* For now this is in addition to the above verbose logging. */
  879904*: 1046:    LOGGER_LOG(c->thread->l, LOG_FETCHERS, LOGGER_ITEM_GET, NULL, was_found, key, nkey,
        -: 1047:               (it) ? ITEM_clsid(it) : 0);
        -: 1048:
   879904: 1049:    return it;
        -: 1050:}
------------------
do_item_get:
   219976:  947:item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c, const bool do_update) {
   219976:  948:    item *it = assoc_find(key, nkey, hv);
   219976:  949:    if (it != NULL) {
    71034:  950:        refcount_incr(it);
        -:  951:        /* Optimization for slab reassignment. prevents popular items from
        -:  952:         * jamming in busy wait. Can only do this here to satisfy lock order
        -:  953:         * of item_lock, slabs_lock. */
        -:  954:        /* This was made unsafe by removal of the cache_lock:
        -:  955:         * slab_rebalance_signal and slab_rebal.* are modified in a separate
        -:  956:         * thread under slabs_lock. If slab_rebalance_signal = 1, slab_start =
        -:  957:         * NULL (0), but slab_end is still equal to some value, this would end
        -:  958:         * up unlinking every item fetched.
        -:  959:         * This is either an acceptable loss, or if slab_rebalance_signal is
        -:  960:         * true, slab_start/slab_end should be put behind the slabs_lock.
        -:  961:         * Which would cause a huge potential slowdown.
        -:  962:         * Could also use a specific lock for slab_rebal.* and
        -:  963:         * slab_rebalance_signal (shorter lock?)
        -:  964:         */
        -:  965:        /*if (slab_rebalance_signal &&
        -:  966:            ((void *)it >= slab_rebal.slab_start && (void *)it < slab_rebal.slab_end)) {
        -:  967:            do_item_unlink(it, hv);
        -:  968:            do_item_remove(it);
        -:  969:            it = NULL;
        -:  970:        }*/
        -:  971:    }
   219976:  972:    int was_found = 0;
        -:  973:
   219976:  974:    if (settings.verbose > 2) {
    #####:  975:        int ii;
    #####:  976:        if (it == NULL) {
    #####:  977:            fprintf(stderr, "> NOT FOUND ");
        -:  978:        } else {
    #####:  979:            fprintf(stderr, "> FOUND KEY ");
        -:  980:        }
    #####:  981:        for (ii = 0; ii < nkey; ++ii) {
    #####:  982:            fprintf(stderr, "%c", key[ii]);
        -:  983:        }
        -:  984:    }
        -:  985:
   219976:  986:    if (it != NULL) {
    71034:  987:        was_found = 1;
    71034:  988:        if (item_is_flushed(it)) {
       60:  989:            do_item_unlink(it, hv);
       60:  990:            STORAGE_delete(c->thread->storage, it);
       60:  991:            do_item_remove(it);
       60:  992:            it = NULL;
       60:  993:            pthread_mutex_lock(&c->thread->stats.mutex);
       60:  994:            c->thread->stats.get_flushed++;
       60:  995:            pthread_mutex_unlock(&c->thread->stats.mutex);
       60:  996:            if (settings.verbose > 2) {
    #####:  997:                fprintf(stderr, " -nuked by flush");
        -:  998:            }
        -:  999:            was_found = 2;
    70974: 1000:        } else if (it->exptime != 0 && it->exptime <= current_time) {
        5: 1001:            do_item_unlink(it, hv);
        5: 1002:            STORAGE_delete(c->thread->storage, it);
        5: 1003:            do_item_remove(it);
        5: 1004:            it = NULL;
        5: 1005:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 1006:            c->thread->stats.get_expired++;
        5: 1007:            pthread_mutex_unlock(&c->thread->stats.mutex);
        5: 1008:            if (settings.verbose > 2) {
    #####: 1009:                fprintf(stderr, " -nuked by expire");
        -: 1010:            }
        -: 1011:            was_found = 3;
        -: 1012:        } else {
    70969: 1013:            if (do_update) {
        -: 1014:                /* We update the hit markers only during fetches.
        -: 1015:                 * An item needs to be hit twice overall to be considered
        -: 1016:                 * ACTIVE, but only needs a single hit to maintain activity
        -: 1017:                 * afterward.
        -: 1018:                 * FETCHED tells if an item has ever been active.
        -: 1019:                 */
    32212: 1020:                if (settings.lru_segmented) {
    31405: 1021:                    if ((it->it_flags & ITEM_ACTIVE) == 0) {
    31364: 1022:                        if ((it->it_flags & ITEM_FETCHED) == 0) {
    31338: 1023:                            it->it_flags |= ITEM_FETCHED;
        -: 1024:                        } else {
       26: 1025:                            it->it_flags |= ITEM_ACTIVE;
       26: 1026:                            if (ITEM_lruid(it) != COLD_LRU) {
       16: 1027:                                do_item_update(it); // bump LA time
       10: 1028:                            } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
        -: 1029:                                // add flag before async bump to avoid race.
    #####: 1030:                                it->it_flags &= ~ITEM_ACTIVE;
        -: 1031:                            }
        -: 1032:                        }
        -: 1033:                    }
        -: 1034:                } else {
      807: 1035:                    it->it_flags |= ITEM_FETCHED;
      807: 1036:                    do_item_update(it);
        -: 1037:                }
        -: 1038:            }
   219976: 1039:            DEBUG_REFCNT(it, '+');
        -: 1040:        }
        -: 1041:    }
        -: 1042:
   219976: 1043:    if (settings.verbose > 2)
    #####: 1044:        fprintf(stderr, "\n");
        -: 1045:    /* For now this is in addition to the above verbose logging. */
  219976*: 1046:    LOGGER_LOG(c->thread->l, LOG_FETCHERS, LOGGER_ITEM_GET, NULL, was_found, key, nkey,
        -: 1047:               (it) ? ITEM_clsid(it) : 0);
        -: 1048:
   219976: 1049:    return it;
        -: 1050:}
------------------
do_item_get:
   219976:  947:item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c, const bool do_update) {
   219976:  948:    item *it = assoc_find(key, nkey, hv);
   219976:  949:    if (it != NULL) {
    71034:  950:        refcount_incr(it);
        -:  951:        /* Optimization for slab reassignment. prevents popular items from
        -:  952:         * jamming in busy wait. Can only do this here to satisfy lock order
        -:  953:         * of item_lock, slabs_lock. */
        -:  954:        /* This was made unsafe by removal of the cache_lock:
        -:  955:         * slab_rebalance_signal and slab_rebal.* are modified in a separate
        -:  956:         * thread under slabs_lock. If slab_rebalance_signal = 1, slab_start =
        -:  957:         * NULL (0), but slab_end is still equal to some value, this would end
        -:  958:         * up unlinking every item fetched.
        -:  959:         * This is either an acceptable loss, or if slab_rebalance_signal is
        -:  960:         * true, slab_start/slab_end should be put behind the slabs_lock.
        -:  961:         * Which would cause a huge potential slowdown.
        -:  962:         * Could also use a specific lock for slab_rebal.* and
        -:  963:         * slab_rebalance_signal (shorter lock?)
        -:  964:         */
        -:  965:        /*if (slab_rebalance_signal &&
        -:  966:            ((void *)it >= slab_rebal.slab_start && (void *)it < slab_rebal.slab_end)) {
        -:  967:            do_item_unlink(it, hv);
        -:  968:            do_item_remove(it);
        -:  969:            it = NULL;
        -:  970:        }*/
        -:  971:    }
   219976:  972:    int was_found = 0;
        -:  973:
   219976:  974:    if (settings.verbose > 2) {
    #####:  975:        int ii;
    #####:  976:        if (it == NULL) {
    #####:  977:            fprintf(stderr, "> NOT FOUND ");
        -:  978:        } else {
    #####:  979:            fprintf(stderr, "> FOUND KEY ");
        -:  980:        }
    #####:  981:        for (ii = 0; ii < nkey; ++ii) {
    #####:  982:            fprintf(stderr, "%c", key[ii]);
        -:  983:        }
        -:  984:    }
        -:  985:
   219976:  986:    if (it != NULL) {
    71034:  987:        was_found = 1;
    71034:  988:        if (item_is_flushed(it)) {
       60:  989:            do_item_unlink(it, hv);
       60:  990:            STORAGE_delete(c->thread->storage, it);
       60:  991:            do_item_remove(it);
       60:  992:            it = NULL;
       60:  993:            pthread_mutex_lock(&c->thread->stats.mutex);
       60:  994:            c->thread->stats.get_flushed++;
       60:  995:            pthread_mutex_unlock(&c->thread->stats.mutex);
       60:  996:            if (settings.verbose > 2) {
    #####:  997:                fprintf(stderr, " -nuked by flush");
        -:  998:            }
        -:  999:            was_found = 2;
    70974: 1000:        } else if (it->exptime != 0 && it->exptime <= current_time) {
        5: 1001:            do_item_unlink(it, hv);
        5: 1002:            STORAGE_delete(c->thread->storage, it);
        5: 1003:            do_item_remove(it);
        5: 1004:            it = NULL;
        5: 1005:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 1006:            c->thread->stats.get_expired++;
        5: 1007:            pthread_mutex_unlock(&c->thread->stats.mutex);
        5: 1008:            if (settings.verbose > 2) {
    #####: 1009:                fprintf(stderr, " -nuked by expire");
        -: 1010:            }
        -: 1011:            was_found = 3;
        -: 1012:        } else {
    70969: 1013:            if (do_update) {
        -: 1014:                /* We update the hit markers only during fetches.
        -: 1015:                 * An item needs to be hit twice overall to be considered
        -: 1016:                 * ACTIVE, but only needs a single hit to maintain activity
        -: 1017:                 * afterward.
        -: 1018:                 * FETCHED tells if an item has ever been active.
        -: 1019:                 */
    32212: 1020:                if (settings.lru_segmented) {
    31405: 1021:                    if ((it->it_flags & ITEM_ACTIVE) == 0) {
    31364: 1022:                        if ((it->it_flags & ITEM_FETCHED) == 0) {
    31338: 1023:                            it->it_flags |= ITEM_FETCHED;
        -: 1024:                        } else {
       26: 1025:                            it->it_flags |= ITEM_ACTIVE;
       26: 1026:                            if (ITEM_lruid(it) != COLD_LRU) {
       16: 1027:                                do_item_update(it); // bump LA time
       10: 1028:                            } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
        -: 1029:                                // add flag before async bump to avoid race.
    #####: 1030:                                it->it_flags &= ~ITEM_ACTIVE;
        -: 1031:                            }
        -: 1032:                        }
        -: 1033:                    }
        -: 1034:                } else {
      807: 1035:                    it->it_flags |= ITEM_FETCHED;
      807: 1036:                    do_item_update(it);
        -: 1037:                }
        -: 1038:            }
   219976: 1039:            DEBUG_REFCNT(it, '+');
        -: 1040:        }
        -: 1041:    }
        -: 1042:
   219976: 1043:    if (settings.verbose > 2)
    #####: 1044:        fprintf(stderr, "\n");
        -: 1045:    /* For now this is in addition to the above verbose logging. */
  219976*: 1046:    LOGGER_LOG(c->thread->l, LOG_FETCHERS, LOGGER_ITEM_GET, NULL, was_found, key, nkey,
        -: 1047:               (it) ? ITEM_clsid(it) : 0);
        -: 1048:
   219976: 1049:    return it;
        -: 1050:}
------------------
do_item_get:
   219976:  947:item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c, const bool do_update) {
   219976:  948:    item *it = assoc_find(key, nkey, hv);
   219976:  949:    if (it != NULL) {
    71034:  950:        refcount_incr(it);
        -:  951:        /* Optimization for slab reassignment. prevents popular items from
        -:  952:         * jamming in busy wait. Can only do this here to satisfy lock order
        -:  953:         * of item_lock, slabs_lock. */
        -:  954:        /* This was made unsafe by removal of the cache_lock:
        -:  955:         * slab_rebalance_signal and slab_rebal.* are modified in a separate
        -:  956:         * thread under slabs_lock. If slab_rebalance_signal = 1, slab_start =
        -:  957:         * NULL (0), but slab_end is still equal to some value, this would end
        -:  958:         * up unlinking every item fetched.
        -:  959:         * This is either an acceptable loss, or if slab_rebalance_signal is
        -:  960:         * true, slab_start/slab_end should be put behind the slabs_lock.
        -:  961:         * Which would cause a huge potential slowdown.
        -:  962:         * Could also use a specific lock for slab_rebal.* and
        -:  963:         * slab_rebalance_signal (shorter lock?)
        -:  964:         */
        -:  965:        /*if (slab_rebalance_signal &&
        -:  966:            ((void *)it >= slab_rebal.slab_start && (void *)it < slab_rebal.slab_end)) {
        -:  967:            do_item_unlink(it, hv);
        -:  968:            do_item_remove(it);
        -:  969:            it = NULL;
        -:  970:        }*/
        -:  971:    }
   219976:  972:    int was_found = 0;
        -:  973:
   219976:  974:    if (settings.verbose > 2) {
    #####:  975:        int ii;
    #####:  976:        if (it == NULL) {
    #####:  977:            fprintf(stderr, "> NOT FOUND ");
        -:  978:        } else {
    #####:  979:            fprintf(stderr, "> FOUND KEY ");
        -:  980:        }
    #####:  981:        for (ii = 0; ii < nkey; ++ii) {
    #####:  982:            fprintf(stderr, "%c", key[ii]);
        -:  983:        }
        -:  984:    }
        -:  985:
   219976:  986:    if (it != NULL) {
    71034:  987:        was_found = 1;
    71034:  988:        if (item_is_flushed(it)) {
       60:  989:            do_item_unlink(it, hv);
       60:  990:            STORAGE_delete(c->thread->storage, it);
       60:  991:            do_item_remove(it);
       60:  992:            it = NULL;
       60:  993:            pthread_mutex_lock(&c->thread->stats.mutex);
       60:  994:            c->thread->stats.get_flushed++;
       60:  995:            pthread_mutex_unlock(&c->thread->stats.mutex);
       60:  996:            if (settings.verbose > 2) {
    #####:  997:                fprintf(stderr, " -nuked by flush");
        -:  998:            }
        -:  999:            was_found = 2;
    70974: 1000:        } else if (it->exptime != 0 && it->exptime <= current_time) {
        5: 1001:            do_item_unlink(it, hv);
        5: 1002:            STORAGE_delete(c->thread->storage, it);
        5: 1003:            do_item_remove(it);
        5: 1004:            it = NULL;
        5: 1005:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 1006:            c->thread->stats.get_expired++;
        5: 1007:            pthread_mutex_unlock(&c->thread->stats.mutex);
        5: 1008:            if (settings.verbose > 2) {
    #####: 1009:                fprintf(stderr, " -nuked by expire");
        -: 1010:            }
        -: 1011:            was_found = 3;
        -: 1012:        } else {
    70969: 1013:            if (do_update) {
        -: 1014:                /* We update the hit markers only during fetches.
        -: 1015:                 * An item needs to be hit twice overall to be considered
        -: 1016:                 * ACTIVE, but only needs a single hit to maintain activity
        -: 1017:                 * afterward.
        -: 1018:                 * FETCHED tells if an item has ever been active.
        -: 1019:                 */
    32212: 1020:                if (settings.lru_segmented) {
    31405: 1021:                    if ((it->it_flags & ITEM_ACTIVE) == 0) {
    31364: 1022:                        if ((it->it_flags & ITEM_FETCHED) == 0) {
    31338: 1023:                            it->it_flags |= ITEM_FETCHED;
        -: 1024:                        } else {
       26: 1025:                            it->it_flags |= ITEM_ACTIVE;
       26: 1026:                            if (ITEM_lruid(it) != COLD_LRU) {
       16: 1027:                                do_item_update(it); // bump LA time
       10: 1028:                            } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
        -: 1029:                                // add flag before async bump to avoid race.
    #####: 1030:                                it->it_flags &= ~ITEM_ACTIVE;
        -: 1031:                            }
        -: 1032:                        }
        -: 1033:                    }
        -: 1034:                } else {
      807: 1035:                    it->it_flags |= ITEM_FETCHED;
      807: 1036:                    do_item_update(it);
        -: 1037:                }
        -: 1038:            }
   219976: 1039:            DEBUG_REFCNT(it, '+');
        -: 1040:        }
        -: 1041:    }
        -: 1042:
   219976: 1043:    if (settings.verbose > 2)
    #####: 1044:        fprintf(stderr, "\n");
        -: 1045:    /* For now this is in addition to the above verbose logging. */
  219976*: 1046:    LOGGER_LOG(c->thread->l, LOG_FETCHERS, LOGGER_ITEM_GET, NULL, was_found, key, nkey,
        -: 1047:               (it) ? ITEM_clsid(it) : 0);
        -: 1048:
   219976: 1049:    return it;
        -: 1050:}
------------------
do_item_get:
   219976:  947:item *do_item_get(const char *key, const size_t nkey, const uint32_t hv, conn *c, const bool do_update) {
   219976:  948:    item *it = assoc_find(key, nkey, hv);
   219976:  949:    if (it != NULL) {
    71034:  950:        refcount_incr(it);
        -:  951:        /* Optimization for slab reassignment. prevents popular items from
        -:  952:         * jamming in busy wait. Can only do this here to satisfy lock order
        -:  953:         * of item_lock, slabs_lock. */
        -:  954:        /* This was made unsafe by removal of the cache_lock:
        -:  955:         * slab_rebalance_signal and slab_rebal.* are modified in a separate
        -:  956:         * thread under slabs_lock. If slab_rebalance_signal = 1, slab_start =
        -:  957:         * NULL (0), but slab_end is still equal to some value, this would end
        -:  958:         * up unlinking every item fetched.
        -:  959:         * This is either an acceptable loss, or if slab_rebalance_signal is
        -:  960:         * true, slab_start/slab_end should be put behind the slabs_lock.
        -:  961:         * Which would cause a huge potential slowdown.
        -:  962:         * Could also use a specific lock for slab_rebal.* and
        -:  963:         * slab_rebalance_signal (shorter lock?)
        -:  964:         */
        -:  965:        /*if (slab_rebalance_signal &&
        -:  966:            ((void *)it >= slab_rebal.slab_start && (void *)it < slab_rebal.slab_end)) {
        -:  967:            do_item_unlink(it, hv);
        -:  968:            do_item_remove(it);
        -:  969:            it = NULL;
        -:  970:        }*/
        -:  971:    }
   219976:  972:    int was_found = 0;
        -:  973:
   219976:  974:    if (settings.verbose > 2) {
    #####:  975:        int ii;
    #####:  976:        if (it == NULL) {
    #####:  977:            fprintf(stderr, "> NOT FOUND ");
        -:  978:        } else {
    #####:  979:            fprintf(stderr, "> FOUND KEY ");
        -:  980:        }
    #####:  981:        for (ii = 0; ii < nkey; ++ii) {
    #####:  982:            fprintf(stderr, "%c", key[ii]);
        -:  983:        }
        -:  984:    }
        -:  985:
   219976:  986:    if (it != NULL) {
    71034:  987:        was_found = 1;
    71034:  988:        if (item_is_flushed(it)) {
       60:  989:            do_item_unlink(it, hv);
       60:  990:            STORAGE_delete(c->thread->storage, it);
       60:  991:            do_item_remove(it);
       60:  992:            it = NULL;
       60:  993:            pthread_mutex_lock(&c->thread->stats.mutex);
       60:  994:            c->thread->stats.get_flushed++;
       60:  995:            pthread_mutex_unlock(&c->thread->stats.mutex);
       60:  996:            if (settings.verbose > 2) {
    #####:  997:                fprintf(stderr, " -nuked by flush");
        -:  998:            }
        -:  999:            was_found = 2;
    70974: 1000:        } else if (it->exptime != 0 && it->exptime <= current_time) {
        5: 1001:            do_item_unlink(it, hv);
        5: 1002:            STORAGE_delete(c->thread->storage, it);
        5: 1003:            do_item_remove(it);
        5: 1004:            it = NULL;
        5: 1005:            pthread_mutex_lock(&c->thread->stats.mutex);
        5: 1006:            c->thread->stats.get_expired++;
        5: 1007:            pthread_mutex_unlock(&c->thread->stats.mutex);
        5: 1008:            if (settings.verbose > 2) {
    #####: 1009:                fprintf(stderr, " -nuked by expire");
        -: 1010:            }
        -: 1011:            was_found = 3;
        -: 1012:        } else {
    70969: 1013:            if (do_update) {
        -: 1014:                /* We update the hit markers only during fetches.
        -: 1015:                 * An item needs to be hit twice overall to be considered
        -: 1016:                 * ACTIVE, but only needs a single hit to maintain activity
        -: 1017:                 * afterward.
        -: 1018:                 * FETCHED tells if an item has ever been active.
        -: 1019:                 */
    32212: 1020:                if (settings.lru_segmented) {
    31405: 1021:                    if ((it->it_flags & ITEM_ACTIVE) == 0) {
    31364: 1022:                        if ((it->it_flags & ITEM_FETCHED) == 0) {
    31338: 1023:                            it->it_flags |= ITEM_FETCHED;
        -: 1024:                        } else {
       26: 1025:                            it->it_flags |= ITEM_ACTIVE;
       26: 1026:                            if (ITEM_lruid(it) != COLD_LRU) {
       16: 1027:                                do_item_update(it); // bump LA time
       10: 1028:                            } else if (!lru_bump_async(c->thread->lru_bump_buf, it, hv)) {
        -: 1029:                                // add flag before async bump to avoid race.
    #####: 1030:                                it->it_flags &= ~ITEM_ACTIVE;
        -: 1031:                            }
        -: 1032:                        }
        -: 1033:                    }
        -: 1034:                } else {
      807: 1035:                    it->it_flags |= ITEM_FETCHED;
      807: 1036:                    do_item_update(it);
        -: 1037:                }
        -: 1038:            }
   219976: 1039:            DEBUG_REFCNT(it, '+');
        -: 1040:        }
        -: 1041:    }
        -: 1042:
   219976: 1043:    if (settings.verbose > 2)
    #####: 1044:        fprintf(stderr, "\n");
        -: 1045:    /* For now this is in addition to the above verbose logging. */
  219976*: 1046:    LOGGER_LOG(c->thread->l, LOG_FETCHERS, LOGGER_ITEM_GET, NULL, was_found, key, nkey,
        -: 1047:               (it) ? ITEM_clsid(it) : 0);
        -: 1048:
   219976: 1049:    return it;
        -: 1050:}
------------------
        -: 1051:
      396: 1052:item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
        -: 1053:                    const uint32_t hv, conn *c) {
      396: 1054:    item *it = do_item_get(key, nkey, hv, c, DO_UPDATE);
      396: 1055:    if (it != NULL) {
      120: 1056:        it->exptime = exptime;
        -: 1057:    }
      396: 1058:    return it;
        -: 1059:}
------------------
do_item_touch:
       99: 1052:item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
        -: 1053:                    const uint32_t hv, conn *c) {
       99: 1054:    item *it = do_item_get(key, nkey, hv, c, DO_UPDATE);
       99: 1055:    if (it != NULL) {
       30: 1056:        it->exptime = exptime;
        -: 1057:    }
       99: 1058:    return it;
        -: 1059:}
------------------
do_item_touch:
       99: 1052:item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
        -: 1053:                    const uint32_t hv, conn *c) {
       99: 1054:    item *it = do_item_get(key, nkey, hv, c, DO_UPDATE);
       99: 1055:    if (it != NULL) {
       30: 1056:        it->exptime = exptime;
        -: 1057:    }
       99: 1058:    return it;
        -: 1059:}
------------------
do_item_touch:
       99: 1052:item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
        -: 1053:                    const uint32_t hv, conn *c) {
       99: 1054:    item *it = do_item_get(key, nkey, hv, c, DO_UPDATE);
       99: 1055:    if (it != NULL) {
       30: 1056:        it->exptime = exptime;
        -: 1057:    }
       99: 1058:    return it;
        -: 1059:}
------------------
do_item_touch:
       99: 1052:item *do_item_touch(const char *key, size_t nkey, uint32_t exptime,
        -: 1053:                    const uint32_t hv, conn *c) {
       99: 1054:    item *it = do_item_get(key, nkey, hv, c, DO_UPDATE);
       99: 1055:    if (it != NULL) {
       30: 1056:        it->exptime = exptime;
        -: 1057:    }
       99: 1058:    return it;
        -: 1059:}
------------------
        -: 1060:
        -: 1061:/*** LRU MAINTENANCE THREAD ***/
        -: 1062:
        -: 1063:/* Returns number of items remove, expired, or evicted.
        -: 1064: * Callable from worker threads or the LRU maintainer thread */
  3176332: 1065:int lru_pull_tail(const int orig_id, const int cur_lru,
        -: 1066:        const uint64_t total_bytes, const uint8_t flags, const rel_time_t max_age,
        -: 1067:        struct lru_pull_tail_return *ret_it) {
  3176332: 1068:    item *it = NULL;
  3176332: 1069:    int id = orig_id;
  3176332: 1070:    int removed = 0;
  3176332: 1071:    if (id == 0)
        -: 1072:        return 0;
        -: 1073:
  3176332: 1074:    int tries = 5;
  3176332: 1075:    item *search;
  3176332: 1076:    item *next_it;
  3176332: 1077:    void *hold_lock = NULL;
  3176332: 1078:    unsigned int move_to_lru = 0;
  3176332: 1079:    uint64_t limit = 0;
        -: 1080:
  3176332: 1081:    id |= cur_lru;
  3176332: 1082:    pthread_mutex_lock(&lru_locks[id]);
  3176332: 1083:    search = tails[id];
        -: 1084:    /* We walk up *only* for locked items, and if bottom is expired. */
  3204316: 1085:    for (; tries > 0 && search != NULL; tries--, search=next_it) {
        -: 1086:        /* we might relink search mid-loop, so search->prev isn't reliable */
   469700: 1087:        next_it = search->prev;
  469700*: 1088:        if (search->nbytes == 0 && search->nkey == 0 && search->it_flags == 1) {
        -: 1089:            /* We are a crawler, ignore it. */
    #####: 1090:            if (flags & LRU_PULL_CRAWL_BLOCKS) {
    #####: 1091:                pthread_mutex_unlock(&lru_locks[id]);
    #####: 1092:                return 0;
        -: 1093:            }
    #####: 1094:            tries++;
    #####: 1095:            continue;
        -: 1096:        }
   469700: 1097:        uint32_t hv = hash(ITEM_key(search), search->nkey);
        -: 1098:        /* Attempt to hash item lock the "search" item. If locked, no
        -: 1099:         * other callers can incr the refcount. Also skip ourselves. */
   469700: 1100:        if ((hold_lock = item_trylock(hv)) == NULL)
        -: 1101:            continue;
        -: 1102:        /* Now see if the item is refcount locked */
   469620: 1103:        if (refcount_incr(search) != 2) {
        -: 1104:            /* Note pathological case with ref'ed items in tail.
        -: 1105:             * Can still unlink the item, but it won't be reusable yet */
       64: 1106:            itemstats[id].lrutail_reflocked++;
        -: 1107:            /* In case of refcount leaks, enable for quick workaround. */
        -: 1108:            /* WARNING: This can cause terrible corruption */
      64*: 1109:            if (settings.tail_repair_time &&
    #####: 1110:                    search->time + settings.tail_repair_time < current_time) {
    #####: 1111:                itemstats[id].tailrepairs++;
    #####: 1112:                search->refcount = 1;
        -: 1113:                /* This will call item_remove -> item_free since refcnt is 1 */
    #####: 1114:                STORAGE_delete(ext_storage, search);
    #####: 1115:                do_item_unlink_nolock(search, hv);
    #####: 1116:                item_trylock_unlock(hold_lock);
    #####: 1117:                continue;
        -: 1118:            }
        -: 1119:        }
        -: 1120:
        -: 1121:        /* Expired or flushed */
   469620: 1122:        if ((search->exptime != 0 && search->exptime < current_time)
   469512: 1123:            || item_is_flushed(search)) {
    27900: 1124:            itemstats[id].reclaimed++;
    27900: 1125:            if ((search->it_flags & ITEM_FETCHED) == 0) {
    10148: 1126:                itemstats[id].expired_unfetched++;
        -: 1127:            }
        -: 1128:            /* refcnt 2 -> 1 */
    27900: 1129:            do_item_unlink_nolock(search, hv);
    27900: 1130:            STORAGE_delete(ext_storage, search);
        -: 1131:            /* refcnt 1 -> 0 -> item_free */
    27900: 1132:            do_item_remove(search);
    27900: 1133:            item_trylock_unlock(hold_lock);
    27900: 1134:            removed++;
        -: 1135:
        -: 1136:            /* If all we're finding are expired, can keep going */
    27900: 1137:            continue;
        -: 1138:        }
        -: 1139:
        -: 1140:        /* If we're HOT_LRU or WARM_LRU and over size limit, send to COLD_LRU.
        -: 1141:         * If we're COLD_LRU, send to WARM_LRU unless we need to evict
        -: 1142:         */
   441720: 1143:        switch (cur_lru) {
   163984: 1144:            case HOT_LRU:
   163984: 1145:                limit = total_bytes * settings.hot_lru_pct / 100;
   165072: 1146:            case WARM_LRU:
   165072: 1147:                if (limit == 0)
     1088: 1148:                    limit = total_bytes * settings.warm_lru_pct / 100;
        -: 1149:                /* Rescue ACTIVE items aggressively */
   165072: 1150:                if ((search->it_flags & ITEM_ACTIVE) != 0) {
       28: 1151:                    search->it_flags &= ~ITEM_ACTIVE;
       28: 1152:                    removed++;
       28: 1153:                    if (cur_lru == WARM_LRU) {
        4: 1154:                        itemstats[id].moves_within_lru++;
        4: 1155:                        do_item_update_nolock(search);
        4: 1156:                        do_item_remove(search);
        4: 1157:                        item_trylock_unlock(hold_lock);
        -: 1158:                    } else {
        -: 1159:                        /* Active HOT_LRU items flow to WARM */
       24: 1160:                        itemstats[id].moves_to_warm++;
       24: 1161:                        move_to_lru = WARM_LRU;
       24: 1162:                        do_item_unlink_q(search);
       24: 1163:                        it = search;
        -: 1164:                    }
   165044: 1165:                } else if (sizes_bytes[id] > limit ||
    19008: 1166:                           current_time - search->time > max_age) {
   155960: 1167:                    itemstats[id].moves_to_cold++;
   155960: 1168:                    move_to_lru = COLD_LRU;
   155960: 1169:                    do_item_unlink_q(search);
   155960: 1170:                    it = search;
   155960: 1171:                    removed++;
   155960: 1172:                    break;
        -: 1173:                } else {
        -: 1174:                    /* Don't want to move to COLD, not active, bail out */
        -: 1175:                    it = search;
        -: 1176:                }
        -: 1177:                break;
   276644: 1178:            case COLD_LRU:
   276644: 1179:                it = search; /* No matter what, we're stopping */
   276644: 1180:                if (flags & LRU_PULL_EVICT) {
    70388: 1181:                    if (settings.evict_to_free == 0) {
        -: 1182:                        /* Don't think we need a counter for this. It'll OOM.  */
        -: 1183:                        break;
        -: 1184:                    }
    70192: 1185:                    itemstats[id].evicted++;
    70192: 1186:                    itemstats[id].evicted_time = current_time - search->time;
    70192: 1187:                    if (search->exptime != 0)
      364: 1188:                        itemstats[id].evicted_nonzero++;
    70192: 1189:                    if ((search->it_flags & ITEM_FETCHED) == 0) {
    64008: 1190:                        itemstats[id].evicted_unfetched++;
        -: 1191:                    }
    70192: 1192:                    if ((search->it_flags & ITEM_ACTIVE)) {
    #####: 1193:                        itemstats[id].evicted_active++;
        -: 1194:                    }
    70192: 1195:                    LOGGER_LOG(NULL, LOG_EVICTIONS, LOGGER_EVICTION, search);
    70192: 1196:                    STORAGE_delete(ext_storage, search);
    70192: 1197:                    do_item_unlink_nolock(search, hv);
    70192: 1198:                    removed++;
    70192: 1199:                    if (settings.slab_automove == 2) {
    #####: 1200:                        slabs_reassign(-1, orig_id);
        -: 1201:                    }
   206256: 1202:                } else if (flags & LRU_PULL_RETURN_ITEM) {
        -: 1203:                    /* Keep a reference to this item and return it. */
    #####: 1204:                    ret_it->it = it;
    #####: 1205:                    ret_it->hv = hv;
   206256: 1206:                } else if ((search->it_flags & ITEM_ACTIVE) != 0
       16: 1207:                        && settings.lru_segmented) {
       16: 1208:                    itemstats[id].moves_to_warm++;
       16: 1209:                    search->it_flags &= ~ITEM_ACTIVE;
       16: 1210:                    move_to_lru = WARM_LRU;
       16: 1211:                    do_item_unlink_q(search);
       16: 1212:                    removed++;
        -: 1213:                }
        -: 1214:                break;
        4: 1215:            case TEMP_LRU:
        4: 1216:                it = search; /* Kill the loop. Parent only interested in reclaims */
        4: 1217:                break;
        -: 1218:        }
   441720: 1219:        if (it != NULL)
        -: 1220:            break;
        -: 1221:    }
        -: 1222:
  3176332: 1223:    pthread_mutex_unlock(&lru_locks[id]);
        -: 1224:
  3176332: 1225:    if (it != NULL) {
   441716: 1226:        if (move_to_lru) {
   156000: 1227:            it->slabs_clsid = ITEM_clsid(it);
   156000: 1228:            it->slabs_clsid |= move_to_lru;
   156000: 1229:            item_link_q(it);
        -: 1230:        }
   441716: 1231:        if ((flags & LRU_PULL_RETURN_ITEM) == 0) {
   441716: 1232:            do_item_remove(it);
   441716: 1233:            item_trylock_unlock(hold_lock);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    return removed;
        -: 1238:}
------------------
lru_pull_tail:
   794083: 1065:int lru_pull_tail(const int orig_id, const int cur_lru,
        -: 1066:        const uint64_t total_bytes, const uint8_t flags, const rel_time_t max_age,
        -: 1067:        struct lru_pull_tail_return *ret_it) {
   794083: 1068:    item *it = NULL;
   794083: 1069:    int id = orig_id;
   794083: 1070:    int removed = 0;
   794083: 1071:    if (id == 0)
        -: 1072:        return 0;
        -: 1073:
   794083: 1074:    int tries = 5;
   794083: 1075:    item *search;
   794083: 1076:    item *next_it;
   794083: 1077:    void *hold_lock = NULL;
   794083: 1078:    unsigned int move_to_lru = 0;
   794083: 1079:    uint64_t limit = 0;
        -: 1080:
   794083: 1081:    id |= cur_lru;
   794083: 1082:    pthread_mutex_lock(&lru_locks[id]);
   794083: 1083:    search = tails[id];
        -: 1084:    /* We walk up *only* for locked items, and if bottom is expired. */
   801079: 1085:    for (; tries > 0 && search != NULL; tries--, search=next_it) {
        -: 1086:        /* we might relink search mid-loop, so search->prev isn't reliable */
   117425: 1087:        next_it = search->prev;
  117425*: 1088:        if (search->nbytes == 0 && search->nkey == 0 && search->it_flags == 1) {
        -: 1089:            /* We are a crawler, ignore it. */
    #####: 1090:            if (flags & LRU_PULL_CRAWL_BLOCKS) {
    #####: 1091:                pthread_mutex_unlock(&lru_locks[id]);
    #####: 1092:                return 0;
        -: 1093:            }
    #####: 1094:            tries++;
    #####: 1095:            continue;
        -: 1096:        }
   117425: 1097:        uint32_t hv = hash(ITEM_key(search), search->nkey);
        -: 1098:        /* Attempt to hash item lock the "search" item. If locked, no
        -: 1099:         * other callers can incr the refcount. Also skip ourselves. */
   117425: 1100:        if ((hold_lock = item_trylock(hv)) == NULL)
        -: 1101:            continue;
        -: 1102:        /* Now see if the item is refcount locked */
   117405: 1103:        if (refcount_incr(search) != 2) {
        -: 1104:            /* Note pathological case with ref'ed items in tail.
        -: 1105:             * Can still unlink the item, but it won't be reusable yet */
       16: 1106:            itemstats[id].lrutail_reflocked++;
        -: 1107:            /* In case of refcount leaks, enable for quick workaround. */
        -: 1108:            /* WARNING: This can cause terrible corruption */
      16*: 1109:            if (settings.tail_repair_time &&
    #####: 1110:                    search->time + settings.tail_repair_time < current_time) {
    #####: 1111:                itemstats[id].tailrepairs++;
    #####: 1112:                search->refcount = 1;
        -: 1113:                /* This will call item_remove -> item_free since refcnt is 1 */
    #####: 1114:                STORAGE_delete(ext_storage, search);
    #####: 1115:                do_item_unlink_nolock(search, hv);
    #####: 1116:                item_trylock_unlock(hold_lock);
    #####: 1117:                continue;
        -: 1118:            }
        -: 1119:        }
        -: 1120:
        -: 1121:        /* Expired or flushed */
   117405: 1122:        if ((search->exptime != 0 && search->exptime < current_time)
   117378: 1123:            || item_is_flushed(search)) {
     6975: 1124:            itemstats[id].reclaimed++;
     6975: 1125:            if ((search->it_flags & ITEM_FETCHED) == 0) {
     2537: 1126:                itemstats[id].expired_unfetched++;
        -: 1127:            }
        -: 1128:            /* refcnt 2 -> 1 */
     6975: 1129:            do_item_unlink_nolock(search, hv);
     6975: 1130:            STORAGE_delete(ext_storage, search);
        -: 1131:            /* refcnt 1 -> 0 -> item_free */
     6975: 1132:            do_item_remove(search);
     6975: 1133:            item_trylock_unlock(hold_lock);
     6975: 1134:            removed++;
        -: 1135:
        -: 1136:            /* If all we're finding are expired, can keep going */
     6975: 1137:            continue;
        -: 1138:        }
        -: 1139:
        -: 1140:        /* If we're HOT_LRU or WARM_LRU and over size limit, send to COLD_LRU.
        -: 1141:         * If we're COLD_LRU, send to WARM_LRU unless we need to evict
        -: 1142:         */
   110430: 1143:        switch (cur_lru) {
    40996: 1144:            case HOT_LRU:
    40996: 1145:                limit = total_bytes * settings.hot_lru_pct / 100;
    41268: 1146:            case WARM_LRU:
    41268: 1147:                if (limit == 0)
      272: 1148:                    limit = total_bytes * settings.warm_lru_pct / 100;
        -: 1149:                /* Rescue ACTIVE items aggressively */
    41268: 1150:                if ((search->it_flags & ITEM_ACTIVE) != 0) {
        7: 1151:                    search->it_flags &= ~ITEM_ACTIVE;
        7: 1152:                    removed++;
        7: 1153:                    if (cur_lru == WARM_LRU) {
        1: 1154:                        itemstats[id].moves_within_lru++;
        1: 1155:                        do_item_update_nolock(search);
        1: 1156:                        do_item_remove(search);
        1: 1157:                        item_trylock_unlock(hold_lock);
        -: 1158:                    } else {
        -: 1159:                        /* Active HOT_LRU items flow to WARM */
        6: 1160:                        itemstats[id].moves_to_warm++;
        6: 1161:                        move_to_lru = WARM_LRU;
        6: 1162:                        do_item_unlink_q(search);
        6: 1163:                        it = search;
        -: 1164:                    }
    41261: 1165:                } else if (sizes_bytes[id] > limit ||
     4752: 1166:                           current_time - search->time > max_age) {
    38990: 1167:                    itemstats[id].moves_to_cold++;
    38990: 1168:                    move_to_lru = COLD_LRU;
    38990: 1169:                    do_item_unlink_q(search);
    38990: 1170:                    it = search;
    38990: 1171:                    removed++;
    38990: 1172:                    break;
        -: 1173:                } else {
        -: 1174:                    /* Don't want to move to COLD, not active, bail out */
        -: 1175:                    it = search;
        -: 1176:                }
        -: 1177:                break;
    69161: 1178:            case COLD_LRU:
    69161: 1179:                it = search; /* No matter what, we're stopping */
    69161: 1180:                if (flags & LRU_PULL_EVICT) {
    17597: 1181:                    if (settings.evict_to_free == 0) {
        -: 1182:                        /* Don't think we need a counter for this. It'll OOM.  */
        -: 1183:                        break;
        -: 1184:                    }
    17548: 1185:                    itemstats[id].evicted++;
    17548: 1186:                    itemstats[id].evicted_time = current_time - search->time;
    17548: 1187:                    if (search->exptime != 0)
       91: 1188:                        itemstats[id].evicted_nonzero++;
    17548: 1189:                    if ((search->it_flags & ITEM_FETCHED) == 0) {
    16002: 1190:                        itemstats[id].evicted_unfetched++;
        -: 1191:                    }
    17548: 1192:                    if ((search->it_flags & ITEM_ACTIVE)) {
    #####: 1193:                        itemstats[id].evicted_active++;
        -: 1194:                    }
    17548: 1195:                    LOGGER_LOG(NULL, LOG_EVICTIONS, LOGGER_EVICTION, search);
    17548: 1196:                    STORAGE_delete(ext_storage, search);
    17548: 1197:                    do_item_unlink_nolock(search, hv);
    17548: 1198:                    removed++;
    17548: 1199:                    if (settings.slab_automove == 2) {
    #####: 1200:                        slabs_reassign(-1, orig_id);
        -: 1201:                    }
    51564: 1202:                } else if (flags & LRU_PULL_RETURN_ITEM) {
        -: 1203:                    /* Keep a reference to this item and return it. */
    #####: 1204:                    ret_it->it = it;
    #####: 1205:                    ret_it->hv = hv;
    51564: 1206:                } else if ((search->it_flags & ITEM_ACTIVE) != 0
        4: 1207:                        && settings.lru_segmented) {
        4: 1208:                    itemstats[id].moves_to_warm++;
        4: 1209:                    search->it_flags &= ~ITEM_ACTIVE;
        4: 1210:                    move_to_lru = WARM_LRU;
        4: 1211:                    do_item_unlink_q(search);
        4: 1212:                    removed++;
        -: 1213:                }
        -: 1214:                break;
        1: 1215:            case TEMP_LRU:
        1: 1216:                it = search; /* Kill the loop. Parent only interested in reclaims */
        1: 1217:                break;
        -: 1218:        }
   110430: 1219:        if (it != NULL)
        -: 1220:            break;
        -: 1221:    }
        -: 1222:
   794083: 1223:    pthread_mutex_unlock(&lru_locks[id]);
        -: 1224:
   794083: 1225:    if (it != NULL) {
   110429: 1226:        if (move_to_lru) {
    39000: 1227:            it->slabs_clsid = ITEM_clsid(it);
    39000: 1228:            it->slabs_clsid |= move_to_lru;
    39000: 1229:            item_link_q(it);
        -: 1230:        }
   110429: 1231:        if ((flags & LRU_PULL_RETURN_ITEM) == 0) {
   110429: 1232:            do_item_remove(it);
   110429: 1233:            item_trylock_unlock(hold_lock);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    return removed;
        -: 1238:}
------------------
lru_pull_tail:
   794083: 1065:int lru_pull_tail(const int orig_id, const int cur_lru,
        -: 1066:        const uint64_t total_bytes, const uint8_t flags, const rel_time_t max_age,
        -: 1067:        struct lru_pull_tail_return *ret_it) {
   794083: 1068:    item *it = NULL;
   794083: 1069:    int id = orig_id;
   794083: 1070:    int removed = 0;
   794083: 1071:    if (id == 0)
        -: 1072:        return 0;
        -: 1073:
   794083: 1074:    int tries = 5;
   794083: 1075:    item *search;
   794083: 1076:    item *next_it;
   794083: 1077:    void *hold_lock = NULL;
   794083: 1078:    unsigned int move_to_lru = 0;
   794083: 1079:    uint64_t limit = 0;
        -: 1080:
   794083: 1081:    id |= cur_lru;
   794083: 1082:    pthread_mutex_lock(&lru_locks[id]);
   794083: 1083:    search = tails[id];
        -: 1084:    /* We walk up *only* for locked items, and if bottom is expired. */
   801079: 1085:    for (; tries > 0 && search != NULL; tries--, search=next_it) {
        -: 1086:        /* we might relink search mid-loop, so search->prev isn't reliable */
   117425: 1087:        next_it = search->prev;
  117425*: 1088:        if (search->nbytes == 0 && search->nkey == 0 && search->it_flags == 1) {
        -: 1089:            /* We are a crawler, ignore it. */
    #####: 1090:            if (flags & LRU_PULL_CRAWL_BLOCKS) {
    #####: 1091:                pthread_mutex_unlock(&lru_locks[id]);
    #####: 1092:                return 0;
        -: 1093:            }
    #####: 1094:            tries++;
    #####: 1095:            continue;
        -: 1096:        }
   117425: 1097:        uint32_t hv = hash(ITEM_key(search), search->nkey);
        -: 1098:        /* Attempt to hash item lock the "search" item. If locked, no
        -: 1099:         * other callers can incr the refcount. Also skip ourselves. */
   117425: 1100:        if ((hold_lock = item_trylock(hv)) == NULL)
        -: 1101:            continue;
        -: 1102:        /* Now see if the item is refcount locked */
   117405: 1103:        if (refcount_incr(search) != 2) {
        -: 1104:            /* Note pathological case with ref'ed items in tail.
        -: 1105:             * Can still unlink the item, but it won't be reusable yet */
       16: 1106:            itemstats[id].lrutail_reflocked++;
        -: 1107:            /* In case of refcount leaks, enable for quick workaround. */
        -: 1108:            /* WARNING: This can cause terrible corruption */
      16*: 1109:            if (settings.tail_repair_time &&
    #####: 1110:                    search->time + settings.tail_repair_time < current_time) {
    #####: 1111:                itemstats[id].tailrepairs++;
    #####: 1112:                search->refcount = 1;
        -: 1113:                /* This will call item_remove -> item_free since refcnt is 1 */
    #####: 1114:                STORAGE_delete(ext_storage, search);
    #####: 1115:                do_item_unlink_nolock(search, hv);
    #####: 1116:                item_trylock_unlock(hold_lock);
    #####: 1117:                continue;
        -: 1118:            }
        -: 1119:        }
        -: 1120:
        -: 1121:        /* Expired or flushed */
   117405: 1122:        if ((search->exptime != 0 && search->exptime < current_time)
   117378: 1123:            || item_is_flushed(search)) {
     6975: 1124:            itemstats[id].reclaimed++;
     6975: 1125:            if ((search->it_flags & ITEM_FETCHED) == 0) {
     2537: 1126:                itemstats[id].expired_unfetched++;
        -: 1127:            }
        -: 1128:            /* refcnt 2 -> 1 */
     6975: 1129:            do_item_unlink_nolock(search, hv);
     6975: 1130:            STORAGE_delete(ext_storage, search);
        -: 1131:            /* refcnt 1 -> 0 -> item_free */
     6975: 1132:            do_item_remove(search);
     6975: 1133:            item_trylock_unlock(hold_lock);
     6975: 1134:            removed++;
        -: 1135:
        -: 1136:            /* If all we're finding are expired, can keep going */
     6975: 1137:            continue;
        -: 1138:        }
        -: 1139:
        -: 1140:        /* If we're HOT_LRU or WARM_LRU and over size limit, send to COLD_LRU.
        -: 1141:         * If we're COLD_LRU, send to WARM_LRU unless we need to evict
        -: 1142:         */
   110430: 1143:        switch (cur_lru) {
    40996: 1144:            case HOT_LRU:
    40996: 1145:                limit = total_bytes * settings.hot_lru_pct / 100;
    41268: 1146:            case WARM_LRU:
    41268: 1147:                if (limit == 0)
      272: 1148:                    limit = total_bytes * settings.warm_lru_pct / 100;
        -: 1149:                /* Rescue ACTIVE items aggressively */
    41268: 1150:                if ((search->it_flags & ITEM_ACTIVE) != 0) {
        7: 1151:                    search->it_flags &= ~ITEM_ACTIVE;
        7: 1152:                    removed++;
        7: 1153:                    if (cur_lru == WARM_LRU) {
        1: 1154:                        itemstats[id].moves_within_lru++;
        1: 1155:                        do_item_update_nolock(search);
        1: 1156:                        do_item_remove(search);
        1: 1157:                        item_trylock_unlock(hold_lock);
        -: 1158:                    } else {
        -: 1159:                        /* Active HOT_LRU items flow to WARM */
        6: 1160:                        itemstats[id].moves_to_warm++;
        6: 1161:                        move_to_lru = WARM_LRU;
        6: 1162:                        do_item_unlink_q(search);
        6: 1163:                        it = search;
        -: 1164:                    }
    41261: 1165:                } else if (sizes_bytes[id] > limit ||
     4752: 1166:                           current_time - search->time > max_age) {
    38990: 1167:                    itemstats[id].moves_to_cold++;
    38990: 1168:                    move_to_lru = COLD_LRU;
    38990: 1169:                    do_item_unlink_q(search);
    38990: 1170:                    it = search;
    38990: 1171:                    removed++;
    38990: 1172:                    break;
        -: 1173:                } else {
        -: 1174:                    /* Don't want to move to COLD, not active, bail out */
        -: 1175:                    it = search;
        -: 1176:                }
        -: 1177:                break;
    69161: 1178:            case COLD_LRU:
    69161: 1179:                it = search; /* No matter what, we're stopping */
    69161: 1180:                if (flags & LRU_PULL_EVICT) {
    17597: 1181:                    if (settings.evict_to_free == 0) {
        -: 1182:                        /* Don't think we need a counter for this. It'll OOM.  */
        -: 1183:                        break;
        -: 1184:                    }
    17548: 1185:                    itemstats[id].evicted++;
    17548: 1186:                    itemstats[id].evicted_time = current_time - search->time;
    17548: 1187:                    if (search->exptime != 0)
       91: 1188:                        itemstats[id].evicted_nonzero++;
    17548: 1189:                    if ((search->it_flags & ITEM_FETCHED) == 0) {
    16002: 1190:                        itemstats[id].evicted_unfetched++;
        -: 1191:                    }
    17548: 1192:                    if ((search->it_flags & ITEM_ACTIVE)) {
    #####: 1193:                        itemstats[id].evicted_active++;
        -: 1194:                    }
    17548: 1195:                    LOGGER_LOG(NULL, LOG_EVICTIONS, LOGGER_EVICTION, search);
    17548: 1196:                    STORAGE_delete(ext_storage, search);
    17548: 1197:                    do_item_unlink_nolock(search, hv);
    17548: 1198:                    removed++;
    17548: 1199:                    if (settings.slab_automove == 2) {
    #####: 1200:                        slabs_reassign(-1, orig_id);
        -: 1201:                    }
    51564: 1202:                } else if (flags & LRU_PULL_RETURN_ITEM) {
        -: 1203:                    /* Keep a reference to this item and return it. */
    #####: 1204:                    ret_it->it = it;
    #####: 1205:                    ret_it->hv = hv;
    51564: 1206:                } else if ((search->it_flags & ITEM_ACTIVE) != 0
        4: 1207:                        && settings.lru_segmented) {
        4: 1208:                    itemstats[id].moves_to_warm++;
        4: 1209:                    search->it_flags &= ~ITEM_ACTIVE;
        4: 1210:                    move_to_lru = WARM_LRU;
        4: 1211:                    do_item_unlink_q(search);
        4: 1212:                    removed++;
        -: 1213:                }
        -: 1214:                break;
        1: 1215:            case TEMP_LRU:
        1: 1216:                it = search; /* Kill the loop. Parent only interested in reclaims */
        1: 1217:                break;
        -: 1218:        }
   110430: 1219:        if (it != NULL)
        -: 1220:            break;
        -: 1221:    }
        -: 1222:
   794083: 1223:    pthread_mutex_unlock(&lru_locks[id]);
        -: 1224:
   794083: 1225:    if (it != NULL) {
   110429: 1226:        if (move_to_lru) {
    39000: 1227:            it->slabs_clsid = ITEM_clsid(it);
    39000: 1228:            it->slabs_clsid |= move_to_lru;
    39000: 1229:            item_link_q(it);
        -: 1230:        }
   110429: 1231:        if ((flags & LRU_PULL_RETURN_ITEM) == 0) {
   110429: 1232:            do_item_remove(it);
   110429: 1233:            item_trylock_unlock(hold_lock);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    return removed;
        -: 1238:}
------------------
lru_pull_tail:
   794083: 1065:int lru_pull_tail(const int orig_id, const int cur_lru,
        -: 1066:        const uint64_t total_bytes, const uint8_t flags, const rel_time_t max_age,
        -: 1067:        struct lru_pull_tail_return *ret_it) {
   794083: 1068:    item *it = NULL;
   794083: 1069:    int id = orig_id;
   794083: 1070:    int removed = 0;
   794083: 1071:    if (id == 0)
        -: 1072:        return 0;
        -: 1073:
   794083: 1074:    int tries = 5;
   794083: 1075:    item *search;
   794083: 1076:    item *next_it;
   794083: 1077:    void *hold_lock = NULL;
   794083: 1078:    unsigned int move_to_lru = 0;
   794083: 1079:    uint64_t limit = 0;
        -: 1080:
   794083: 1081:    id |= cur_lru;
   794083: 1082:    pthread_mutex_lock(&lru_locks[id]);
   794083: 1083:    search = tails[id];
        -: 1084:    /* We walk up *only* for locked items, and if bottom is expired. */
   801079: 1085:    for (; tries > 0 && search != NULL; tries--, search=next_it) {
        -: 1086:        /* we might relink search mid-loop, so search->prev isn't reliable */
   117425: 1087:        next_it = search->prev;
  117425*: 1088:        if (search->nbytes == 0 && search->nkey == 0 && search->it_flags == 1) {
        -: 1089:            /* We are a crawler, ignore it. */
    #####: 1090:            if (flags & LRU_PULL_CRAWL_BLOCKS) {
    #####: 1091:                pthread_mutex_unlock(&lru_locks[id]);
    #####: 1092:                return 0;
        -: 1093:            }
    #####: 1094:            tries++;
    #####: 1095:            continue;
        -: 1096:        }
   117425: 1097:        uint32_t hv = hash(ITEM_key(search), search->nkey);
        -: 1098:        /* Attempt to hash item lock the "search" item. If locked, no
        -: 1099:         * other callers can incr the refcount. Also skip ourselves. */
   117425: 1100:        if ((hold_lock = item_trylock(hv)) == NULL)
        -: 1101:            continue;
        -: 1102:        /* Now see if the item is refcount locked */
   117405: 1103:        if (refcount_incr(search) != 2) {
        -: 1104:            /* Note pathological case with ref'ed items in tail.
        -: 1105:             * Can still unlink the item, but it won't be reusable yet */
       16: 1106:            itemstats[id].lrutail_reflocked++;
        -: 1107:            /* In case of refcount leaks, enable for quick workaround. */
        -: 1108:            /* WARNING: This can cause terrible corruption */
      16*: 1109:            if (settings.tail_repair_time &&
    #####: 1110:                    search->time + settings.tail_repair_time < current_time) {
    #####: 1111:                itemstats[id].tailrepairs++;
    #####: 1112:                search->refcount = 1;
        -: 1113:                /* This will call item_remove -> item_free since refcnt is 1 */
    #####: 1114:                STORAGE_delete(ext_storage, search);
    #####: 1115:                do_item_unlink_nolock(search, hv);
    #####: 1116:                item_trylock_unlock(hold_lock);
    #####: 1117:                continue;
        -: 1118:            }
        -: 1119:        }
        -: 1120:
        -: 1121:        /* Expired or flushed */
   117405: 1122:        if ((search->exptime != 0 && search->exptime < current_time)
   117378: 1123:            || item_is_flushed(search)) {
     6975: 1124:            itemstats[id].reclaimed++;
     6975: 1125:            if ((search->it_flags & ITEM_FETCHED) == 0) {
     2537: 1126:                itemstats[id].expired_unfetched++;
        -: 1127:            }
        -: 1128:            /* refcnt 2 -> 1 */
     6975: 1129:            do_item_unlink_nolock(search, hv);
     6975: 1130:            STORAGE_delete(ext_storage, search);
        -: 1131:            /* refcnt 1 -> 0 -> item_free */
     6975: 1132:            do_item_remove(search);
     6975: 1133:            item_trylock_unlock(hold_lock);
     6975: 1134:            removed++;
        -: 1135:
        -: 1136:            /* If all we're finding are expired, can keep going */
     6975: 1137:            continue;
        -: 1138:        }
        -: 1139:
        -: 1140:        /* If we're HOT_LRU or WARM_LRU and over size limit, send to COLD_LRU.
        -: 1141:         * If we're COLD_LRU, send to WARM_LRU unless we need to evict
        -: 1142:         */
   110430: 1143:        switch (cur_lru) {
    40996: 1144:            case HOT_LRU:
    40996: 1145:                limit = total_bytes * settings.hot_lru_pct / 100;
    41268: 1146:            case WARM_LRU:
    41268: 1147:                if (limit == 0)
      272: 1148:                    limit = total_bytes * settings.warm_lru_pct / 100;
        -: 1149:                /* Rescue ACTIVE items aggressively */
    41268: 1150:                if ((search->it_flags & ITEM_ACTIVE) != 0) {
        7: 1151:                    search->it_flags &= ~ITEM_ACTIVE;
        7: 1152:                    removed++;
        7: 1153:                    if (cur_lru == WARM_LRU) {
        1: 1154:                        itemstats[id].moves_within_lru++;
        1: 1155:                        do_item_update_nolock(search);
        1: 1156:                        do_item_remove(search);
        1: 1157:                        item_trylock_unlock(hold_lock);
        -: 1158:                    } else {
        -: 1159:                        /* Active HOT_LRU items flow to WARM */
        6: 1160:                        itemstats[id].moves_to_warm++;
        6: 1161:                        move_to_lru = WARM_LRU;
        6: 1162:                        do_item_unlink_q(search);
        6: 1163:                        it = search;
        -: 1164:                    }
    41261: 1165:                } else if (sizes_bytes[id] > limit ||
     4752: 1166:                           current_time - search->time > max_age) {
    38990: 1167:                    itemstats[id].moves_to_cold++;
    38990: 1168:                    move_to_lru = COLD_LRU;
    38990: 1169:                    do_item_unlink_q(search);
    38990: 1170:                    it = search;
    38990: 1171:                    removed++;
    38990: 1172:                    break;
        -: 1173:                } else {
        -: 1174:                    /* Don't want to move to COLD, not active, bail out */
        -: 1175:                    it = search;
        -: 1176:                }
        -: 1177:                break;
    69161: 1178:            case COLD_LRU:
    69161: 1179:                it = search; /* No matter what, we're stopping */
    69161: 1180:                if (flags & LRU_PULL_EVICT) {
    17597: 1181:                    if (settings.evict_to_free == 0) {
        -: 1182:                        /* Don't think we need a counter for this. It'll OOM.  */
        -: 1183:                        break;
        -: 1184:                    }
    17548: 1185:                    itemstats[id].evicted++;
    17548: 1186:                    itemstats[id].evicted_time = current_time - search->time;
    17548: 1187:                    if (search->exptime != 0)
       91: 1188:                        itemstats[id].evicted_nonzero++;
    17548: 1189:                    if ((search->it_flags & ITEM_FETCHED) == 0) {
    16002: 1190:                        itemstats[id].evicted_unfetched++;
        -: 1191:                    }
    17548: 1192:                    if ((search->it_flags & ITEM_ACTIVE)) {
    #####: 1193:                        itemstats[id].evicted_active++;
        -: 1194:                    }
    17548: 1195:                    LOGGER_LOG(NULL, LOG_EVICTIONS, LOGGER_EVICTION, search);
    17548: 1196:                    STORAGE_delete(ext_storage, search);
    17548: 1197:                    do_item_unlink_nolock(search, hv);
    17548: 1198:                    removed++;
    17548: 1199:                    if (settings.slab_automove == 2) {
    #####: 1200:                        slabs_reassign(-1, orig_id);
        -: 1201:                    }
    51564: 1202:                } else if (flags & LRU_PULL_RETURN_ITEM) {
        -: 1203:                    /* Keep a reference to this item and return it. */
    #####: 1204:                    ret_it->it = it;
    #####: 1205:                    ret_it->hv = hv;
    51564: 1206:                } else if ((search->it_flags & ITEM_ACTIVE) != 0
        4: 1207:                        && settings.lru_segmented) {
        4: 1208:                    itemstats[id].moves_to_warm++;
        4: 1209:                    search->it_flags &= ~ITEM_ACTIVE;
        4: 1210:                    move_to_lru = WARM_LRU;
        4: 1211:                    do_item_unlink_q(search);
        4: 1212:                    removed++;
        -: 1213:                }
        -: 1214:                break;
        1: 1215:            case TEMP_LRU:
        1: 1216:                it = search; /* Kill the loop. Parent only interested in reclaims */
        1: 1217:                break;
        -: 1218:        }
   110430: 1219:        if (it != NULL)
        -: 1220:            break;
        -: 1221:    }
        -: 1222:
   794083: 1223:    pthread_mutex_unlock(&lru_locks[id]);
        -: 1224:
   794083: 1225:    if (it != NULL) {
   110429: 1226:        if (move_to_lru) {
    39000: 1227:            it->slabs_clsid = ITEM_clsid(it);
    39000: 1228:            it->slabs_clsid |= move_to_lru;
    39000: 1229:            item_link_q(it);
        -: 1230:        }
   110429: 1231:        if ((flags & LRU_PULL_RETURN_ITEM) == 0) {
   110429: 1232:            do_item_remove(it);
   110429: 1233:            item_trylock_unlock(hold_lock);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    return removed;
        -: 1238:}
------------------
lru_pull_tail:
   794083: 1065:int lru_pull_tail(const int orig_id, const int cur_lru,
        -: 1066:        const uint64_t total_bytes, const uint8_t flags, const rel_time_t max_age,
        -: 1067:        struct lru_pull_tail_return *ret_it) {
   794083: 1068:    item *it = NULL;
   794083: 1069:    int id = orig_id;
   794083: 1070:    int removed = 0;
   794083: 1071:    if (id == 0)
        -: 1072:        return 0;
        -: 1073:
   794083: 1074:    int tries = 5;
   794083: 1075:    item *search;
   794083: 1076:    item *next_it;
   794083: 1077:    void *hold_lock = NULL;
   794083: 1078:    unsigned int move_to_lru = 0;
   794083: 1079:    uint64_t limit = 0;
        -: 1080:
   794083: 1081:    id |= cur_lru;
   794083: 1082:    pthread_mutex_lock(&lru_locks[id]);
   794083: 1083:    search = tails[id];
        -: 1084:    /* We walk up *only* for locked items, and if bottom is expired. */
   801079: 1085:    for (; tries > 0 && search != NULL; tries--, search=next_it) {
        -: 1086:        /* we might relink search mid-loop, so search->prev isn't reliable */
   117425: 1087:        next_it = search->prev;
  117425*: 1088:        if (search->nbytes == 0 && search->nkey == 0 && search->it_flags == 1) {
        -: 1089:            /* We are a crawler, ignore it. */
    #####: 1090:            if (flags & LRU_PULL_CRAWL_BLOCKS) {
    #####: 1091:                pthread_mutex_unlock(&lru_locks[id]);
    #####: 1092:                return 0;
        -: 1093:            }
    #####: 1094:            tries++;
    #####: 1095:            continue;
        -: 1096:        }
   117425: 1097:        uint32_t hv = hash(ITEM_key(search), search->nkey);
        -: 1098:        /* Attempt to hash item lock the "search" item. If locked, no
        -: 1099:         * other callers can incr the refcount. Also skip ourselves. */
   117425: 1100:        if ((hold_lock = item_trylock(hv)) == NULL)
        -: 1101:            continue;
        -: 1102:        /* Now see if the item is refcount locked */
   117405: 1103:        if (refcount_incr(search) != 2) {
        -: 1104:            /* Note pathological case with ref'ed items in tail.
        -: 1105:             * Can still unlink the item, but it won't be reusable yet */
       16: 1106:            itemstats[id].lrutail_reflocked++;
        -: 1107:            /* In case of refcount leaks, enable for quick workaround. */
        -: 1108:            /* WARNING: This can cause terrible corruption */
      16*: 1109:            if (settings.tail_repair_time &&
    #####: 1110:                    search->time + settings.tail_repair_time < current_time) {
    #####: 1111:                itemstats[id].tailrepairs++;
    #####: 1112:                search->refcount = 1;
        -: 1113:                /* This will call item_remove -> item_free since refcnt is 1 */
    #####: 1114:                STORAGE_delete(ext_storage, search);
    #####: 1115:                do_item_unlink_nolock(search, hv);
    #####: 1116:                item_trylock_unlock(hold_lock);
    #####: 1117:                continue;
        -: 1118:            }
        -: 1119:        }
        -: 1120:
        -: 1121:        /* Expired or flushed */
   117405: 1122:        if ((search->exptime != 0 && search->exptime < current_time)
   117378: 1123:            || item_is_flushed(search)) {
     6975: 1124:            itemstats[id].reclaimed++;
     6975: 1125:            if ((search->it_flags & ITEM_FETCHED) == 0) {
     2537: 1126:                itemstats[id].expired_unfetched++;
        -: 1127:            }
        -: 1128:            /* refcnt 2 -> 1 */
     6975: 1129:            do_item_unlink_nolock(search, hv);
     6975: 1130:            STORAGE_delete(ext_storage, search);
        -: 1131:            /* refcnt 1 -> 0 -> item_free */
     6975: 1132:            do_item_remove(search);
     6975: 1133:            item_trylock_unlock(hold_lock);
     6975: 1134:            removed++;
        -: 1135:
        -: 1136:            /* If all we're finding are expired, can keep going */
     6975: 1137:            continue;
        -: 1138:        }
        -: 1139:
        -: 1140:        /* If we're HOT_LRU or WARM_LRU and over size limit, send to COLD_LRU.
        -: 1141:         * If we're COLD_LRU, send to WARM_LRU unless we need to evict
        -: 1142:         */
   110430: 1143:        switch (cur_lru) {
    40996: 1144:            case HOT_LRU:
    40996: 1145:                limit = total_bytes * settings.hot_lru_pct / 100;
    41268: 1146:            case WARM_LRU:
    41268: 1147:                if (limit == 0)
      272: 1148:                    limit = total_bytes * settings.warm_lru_pct / 100;
        -: 1149:                /* Rescue ACTIVE items aggressively */
    41268: 1150:                if ((search->it_flags & ITEM_ACTIVE) != 0) {
        7: 1151:                    search->it_flags &= ~ITEM_ACTIVE;
        7: 1152:                    removed++;
        7: 1153:                    if (cur_lru == WARM_LRU) {
        1: 1154:                        itemstats[id].moves_within_lru++;
        1: 1155:                        do_item_update_nolock(search);
        1: 1156:                        do_item_remove(search);
        1: 1157:                        item_trylock_unlock(hold_lock);
        -: 1158:                    } else {
        -: 1159:                        /* Active HOT_LRU items flow to WARM */
        6: 1160:                        itemstats[id].moves_to_warm++;
        6: 1161:                        move_to_lru = WARM_LRU;
        6: 1162:                        do_item_unlink_q(search);
        6: 1163:                        it = search;
        -: 1164:                    }
    41261: 1165:                } else if (sizes_bytes[id] > limit ||
     4752: 1166:                           current_time - search->time > max_age) {
    38990: 1167:                    itemstats[id].moves_to_cold++;
    38990: 1168:                    move_to_lru = COLD_LRU;
    38990: 1169:                    do_item_unlink_q(search);
    38990: 1170:                    it = search;
    38990: 1171:                    removed++;
    38990: 1172:                    break;
        -: 1173:                } else {
        -: 1174:                    /* Don't want to move to COLD, not active, bail out */
        -: 1175:                    it = search;
        -: 1176:                }
        -: 1177:                break;
    69161: 1178:            case COLD_LRU:
    69161: 1179:                it = search; /* No matter what, we're stopping */
    69161: 1180:                if (flags & LRU_PULL_EVICT) {
    17597: 1181:                    if (settings.evict_to_free == 0) {
        -: 1182:                        /* Don't think we need a counter for this. It'll OOM.  */
        -: 1183:                        break;
        -: 1184:                    }
    17548: 1185:                    itemstats[id].evicted++;
    17548: 1186:                    itemstats[id].evicted_time = current_time - search->time;
    17548: 1187:                    if (search->exptime != 0)
       91: 1188:                        itemstats[id].evicted_nonzero++;
    17548: 1189:                    if ((search->it_flags & ITEM_FETCHED) == 0) {
    16002: 1190:                        itemstats[id].evicted_unfetched++;
        -: 1191:                    }
    17548: 1192:                    if ((search->it_flags & ITEM_ACTIVE)) {
    #####: 1193:                        itemstats[id].evicted_active++;
        -: 1194:                    }
    17548: 1195:                    LOGGER_LOG(NULL, LOG_EVICTIONS, LOGGER_EVICTION, search);
    17548: 1196:                    STORAGE_delete(ext_storage, search);
    17548: 1197:                    do_item_unlink_nolock(search, hv);
    17548: 1198:                    removed++;
    17548: 1199:                    if (settings.slab_automove == 2) {
    #####: 1200:                        slabs_reassign(-1, orig_id);
        -: 1201:                    }
    51564: 1202:                } else if (flags & LRU_PULL_RETURN_ITEM) {
        -: 1203:                    /* Keep a reference to this item and return it. */
    #####: 1204:                    ret_it->it = it;
    #####: 1205:                    ret_it->hv = hv;
    51564: 1206:                } else if ((search->it_flags & ITEM_ACTIVE) != 0
        4: 1207:                        && settings.lru_segmented) {
        4: 1208:                    itemstats[id].moves_to_warm++;
        4: 1209:                    search->it_flags &= ~ITEM_ACTIVE;
        4: 1210:                    move_to_lru = WARM_LRU;
        4: 1211:                    do_item_unlink_q(search);
        4: 1212:                    removed++;
        -: 1213:                }
        -: 1214:                break;
        1: 1215:            case TEMP_LRU:
        1: 1216:                it = search; /* Kill the loop. Parent only interested in reclaims */
        1: 1217:                break;
        -: 1218:        }
   110430: 1219:        if (it != NULL)
        -: 1220:            break;
        -: 1221:    }
        -: 1222:
   794083: 1223:    pthread_mutex_unlock(&lru_locks[id]);
        -: 1224:
   794083: 1225:    if (it != NULL) {
   110429: 1226:        if (move_to_lru) {
    39000: 1227:            it->slabs_clsid = ITEM_clsid(it);
    39000: 1228:            it->slabs_clsid |= move_to_lru;
    39000: 1229:            item_link_q(it);
        -: 1230:        }
   110429: 1231:        if ((flags & LRU_PULL_RETURN_ITEM) == 0) {
   110429: 1232:            do_item_remove(it);
   110429: 1233:            item_trylock_unlock(hold_lock);
        -: 1234:        }
        -: 1235:    }
        -: 1236:
        -: 1237:    return removed;
        -: 1238:}
------------------
        -: 1239:
        -: 1240:
        -: 1241:/* TODO: Third place this code needs to be deduped */
     1520: 1242:static void lru_bump_buf_link_q(lru_bump_buf *b) {
     1520: 1243:    pthread_mutex_lock(&bump_buf_lock);
    1520*: 1244:    assert(b != bump_buf_head);
        -: 1245:
     1520: 1246:    b->prev = 0;
     1520: 1247:    b->next = bump_buf_head;
     1520: 1248:    if (b->next) b->next->prev = b;
     1520: 1249:    bump_buf_head = b;
     1520: 1250:    if (bump_buf_tail == 0) bump_buf_tail = b;
     1520: 1251:    pthread_mutex_unlock(&bump_buf_lock);
     1520: 1252:    return;
        -: 1253:}
------------------
lru_bump_buf_link_q:
      380: 1242:static void lru_bump_buf_link_q(lru_bump_buf *b) {
      380: 1243:    pthread_mutex_lock(&bump_buf_lock);
     380*: 1244:    assert(b != bump_buf_head);
        -: 1245:
      380: 1246:    b->prev = 0;
      380: 1247:    b->next = bump_buf_head;
      380: 1248:    if (b->next) b->next->prev = b;
      380: 1249:    bump_buf_head = b;
      380: 1250:    if (bump_buf_tail == 0) bump_buf_tail = b;
      380: 1251:    pthread_mutex_unlock(&bump_buf_lock);
      380: 1252:    return;
        -: 1253:}
------------------
lru_bump_buf_link_q:
      380: 1242:static void lru_bump_buf_link_q(lru_bump_buf *b) {
      380: 1243:    pthread_mutex_lock(&bump_buf_lock);
     380*: 1244:    assert(b != bump_buf_head);
        -: 1245:
      380: 1246:    b->prev = 0;
      380: 1247:    b->next = bump_buf_head;
      380: 1248:    if (b->next) b->next->prev = b;
      380: 1249:    bump_buf_head = b;
      380: 1250:    if (bump_buf_tail == 0) bump_buf_tail = b;
      380: 1251:    pthread_mutex_unlock(&bump_buf_lock);
      380: 1252:    return;
        -: 1253:}
------------------
lru_bump_buf_link_q:
      380: 1242:static void lru_bump_buf_link_q(lru_bump_buf *b) {
      380: 1243:    pthread_mutex_lock(&bump_buf_lock);
     380*: 1244:    assert(b != bump_buf_head);
        -: 1245:
      380: 1246:    b->prev = 0;
      380: 1247:    b->next = bump_buf_head;
      380: 1248:    if (b->next) b->next->prev = b;
      380: 1249:    bump_buf_head = b;
      380: 1250:    if (bump_buf_tail == 0) bump_buf_tail = b;
      380: 1251:    pthread_mutex_unlock(&bump_buf_lock);
      380: 1252:    return;
        -: 1253:}
------------------
lru_bump_buf_link_q:
      380: 1242:static void lru_bump_buf_link_q(lru_bump_buf *b) {
      380: 1243:    pthread_mutex_lock(&bump_buf_lock);
     380*: 1244:    assert(b != bump_buf_head);
        -: 1245:
      380: 1246:    b->prev = 0;
      380: 1247:    b->next = bump_buf_head;
      380: 1248:    if (b->next) b->next->prev = b;
      380: 1249:    bump_buf_head = b;
      380: 1250:    if (bump_buf_tail == 0) bump_buf_tail = b;
      380: 1251:    pthread_mutex_unlock(&bump_buf_lock);
      380: 1252:    return;
        -: 1253:}
------------------
        -: 1254:
     1520: 1255:void *item_lru_bump_buf_create(void) {
     1520: 1256:    lru_bump_buf *b = calloc(1, sizeof(lru_bump_buf));
     1520: 1257:    if (b == NULL) {
        -: 1258:        return NULL;
        -: 1259:    }
        -: 1260:
     1520: 1261:    b->buf = bipbuf_new(sizeof(lru_bump_entry) * LRU_BUMP_BUF_SIZE);
     1520: 1262:    if (b->buf == NULL) {
    #####: 1263:        free(b);
    #####: 1264:        return NULL;
        -: 1265:    }
        -: 1266:
     1520: 1267:    pthread_mutex_init(&b->mutex, NULL);
        -: 1268:
     1520: 1269:    lru_bump_buf_link_q(b);
     1520: 1270:    return b;
        -: 1271:}
------------------
item_lru_bump_buf_create:
      380: 1255:void *item_lru_bump_buf_create(void) {
      380: 1256:    lru_bump_buf *b = calloc(1, sizeof(lru_bump_buf));
      380: 1257:    if (b == NULL) {
        -: 1258:        return NULL;
        -: 1259:    }
        -: 1260:
      380: 1261:    b->buf = bipbuf_new(sizeof(lru_bump_entry) * LRU_BUMP_BUF_SIZE);
      380: 1262:    if (b->buf == NULL) {
    #####: 1263:        free(b);
    #####: 1264:        return NULL;
        -: 1265:    }
        -: 1266:
      380: 1267:    pthread_mutex_init(&b->mutex, NULL);
        -: 1268:
      380: 1269:    lru_bump_buf_link_q(b);
      380: 1270:    return b;
        -: 1271:}
------------------
item_lru_bump_buf_create:
      380: 1255:void *item_lru_bump_buf_create(void) {
      380: 1256:    lru_bump_buf *b = calloc(1, sizeof(lru_bump_buf));
      380: 1257:    if (b == NULL) {
        -: 1258:        return NULL;
        -: 1259:    }
        -: 1260:
      380: 1261:    b->buf = bipbuf_new(sizeof(lru_bump_entry) * LRU_BUMP_BUF_SIZE);
      380: 1262:    if (b->buf == NULL) {
    #####: 1263:        free(b);
    #####: 1264:        return NULL;
        -: 1265:    }
        -: 1266:
      380: 1267:    pthread_mutex_init(&b->mutex, NULL);
        -: 1268:
      380: 1269:    lru_bump_buf_link_q(b);
      380: 1270:    return b;
        -: 1271:}
------------------
item_lru_bump_buf_create:
      380: 1255:void *item_lru_bump_buf_create(void) {
      380: 1256:    lru_bump_buf *b = calloc(1, sizeof(lru_bump_buf));
      380: 1257:    if (b == NULL) {
        -: 1258:        return NULL;
        -: 1259:    }
        -: 1260:
      380: 1261:    b->buf = bipbuf_new(sizeof(lru_bump_entry) * LRU_BUMP_BUF_SIZE);
      380: 1262:    if (b->buf == NULL) {
    #####: 1263:        free(b);
    #####: 1264:        return NULL;
        -: 1265:    }
        -: 1266:
      380: 1267:    pthread_mutex_init(&b->mutex, NULL);
        -: 1268:
      380: 1269:    lru_bump_buf_link_q(b);
      380: 1270:    return b;
        -: 1271:}
------------------
item_lru_bump_buf_create:
      380: 1255:void *item_lru_bump_buf_create(void) {
      380: 1256:    lru_bump_buf *b = calloc(1, sizeof(lru_bump_buf));
      380: 1257:    if (b == NULL) {
        -: 1258:        return NULL;
        -: 1259:    }
        -: 1260:
      380: 1261:    b->buf = bipbuf_new(sizeof(lru_bump_entry) * LRU_BUMP_BUF_SIZE);
      380: 1262:    if (b->buf == NULL) {
    #####: 1263:        free(b);
    #####: 1264:        return NULL;
        -: 1265:    }
        -: 1266:
      380: 1267:    pthread_mutex_init(&b->mutex, NULL);
        -: 1268:
      380: 1269:    lru_bump_buf_link_q(b);
      380: 1270:    return b;
        -: 1271:}
------------------
        -: 1272:
       40: 1273:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv) {
       40: 1274:    bool ret = true;
       40: 1275:    refcount_incr(it);
       40: 1276:    pthread_mutex_lock(&b->mutex);
       40: 1277:    lru_bump_entry *be = (lru_bump_entry *) bipbuf_request(b->buf, sizeof(lru_bump_entry));
       40: 1278:    if (be != NULL) {
       40: 1279:        be->it = it;
       40: 1280:        be->hv = hv;
       40: 1281:        if (bipbuf_push(b->buf, sizeof(lru_bump_entry)) == 0) {
    #####: 1282:            ret = false;
    #####: 1283:            b->dropped++;
        -: 1284:        }
        -: 1285:    } else {
    #####: 1286:        ret = false;
    #####: 1287:        b->dropped++;
        -: 1288:    }
    #####: 1289:    if (!ret) {
    #####: 1290:        refcount_decr(it);
        -: 1291:    }
       40: 1292:    pthread_mutex_unlock(&b->mutex);
       40: 1293:    return ret;
        -: 1294:}
------------------
lru_bump_async:
       10: 1273:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv) {
       10: 1274:    bool ret = true;
       10: 1275:    refcount_incr(it);
       10: 1276:    pthread_mutex_lock(&b->mutex);
       10: 1277:    lru_bump_entry *be = (lru_bump_entry *) bipbuf_request(b->buf, sizeof(lru_bump_entry));
       10: 1278:    if (be != NULL) {
       10: 1279:        be->it = it;
       10: 1280:        be->hv = hv;
       10: 1281:        if (bipbuf_push(b->buf, sizeof(lru_bump_entry)) == 0) {
    #####: 1282:            ret = false;
    #####: 1283:            b->dropped++;
        -: 1284:        }
        -: 1285:    } else {
    #####: 1286:        ret = false;
    #####: 1287:        b->dropped++;
        -: 1288:    }
    #####: 1289:    if (!ret) {
    #####: 1290:        refcount_decr(it);
        -: 1291:    }
       10: 1292:    pthread_mutex_unlock(&b->mutex);
       10: 1293:    return ret;
        -: 1294:}
------------------
lru_bump_async:
       10: 1273:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv) {
       10: 1274:    bool ret = true;
       10: 1275:    refcount_incr(it);
       10: 1276:    pthread_mutex_lock(&b->mutex);
       10: 1277:    lru_bump_entry *be = (lru_bump_entry *) bipbuf_request(b->buf, sizeof(lru_bump_entry));
       10: 1278:    if (be != NULL) {
       10: 1279:        be->it = it;
       10: 1280:        be->hv = hv;
       10: 1281:        if (bipbuf_push(b->buf, sizeof(lru_bump_entry)) == 0) {
    #####: 1282:            ret = false;
    #####: 1283:            b->dropped++;
        -: 1284:        }
        -: 1285:    } else {
    #####: 1286:        ret = false;
    #####: 1287:        b->dropped++;
        -: 1288:    }
    #####: 1289:    if (!ret) {
    #####: 1290:        refcount_decr(it);
        -: 1291:    }
       10: 1292:    pthread_mutex_unlock(&b->mutex);
       10: 1293:    return ret;
        -: 1294:}
------------------
lru_bump_async:
       10: 1273:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv) {
       10: 1274:    bool ret = true;
       10: 1275:    refcount_incr(it);
       10: 1276:    pthread_mutex_lock(&b->mutex);
       10: 1277:    lru_bump_entry *be = (lru_bump_entry *) bipbuf_request(b->buf, sizeof(lru_bump_entry));
       10: 1278:    if (be != NULL) {
       10: 1279:        be->it = it;
       10: 1280:        be->hv = hv;
       10: 1281:        if (bipbuf_push(b->buf, sizeof(lru_bump_entry)) == 0) {
    #####: 1282:            ret = false;
    #####: 1283:            b->dropped++;
        -: 1284:        }
        -: 1285:    } else {
    #####: 1286:        ret = false;
    #####: 1287:        b->dropped++;
        -: 1288:    }
    #####: 1289:    if (!ret) {
    #####: 1290:        refcount_decr(it);
        -: 1291:    }
       10: 1292:    pthread_mutex_unlock(&b->mutex);
       10: 1293:    return ret;
        -: 1294:}
------------------
lru_bump_async:
       10: 1273:static bool lru_bump_async(lru_bump_buf *b, item *it, uint32_t hv) {
       10: 1274:    bool ret = true;
       10: 1275:    refcount_incr(it);
       10: 1276:    pthread_mutex_lock(&b->mutex);
       10: 1277:    lru_bump_entry *be = (lru_bump_entry *) bipbuf_request(b->buf, sizeof(lru_bump_entry));
       10: 1278:    if (be != NULL) {
       10: 1279:        be->it = it;
       10: 1280:        be->hv = hv;
       10: 1281:        if (bipbuf_push(b->buf, sizeof(lru_bump_entry)) == 0) {
    #####: 1282:            ret = false;
    #####: 1283:            b->dropped++;
        -: 1284:        }
        -: 1285:    } else {
    #####: 1286:        ret = false;
    #####: 1287:        b->dropped++;
        -: 1288:    }
    #####: 1289:    if (!ret) {
    #####: 1290:        refcount_decr(it);
        -: 1291:    }
       10: 1292:    pthread_mutex_unlock(&b->mutex);
       10: 1293:    return ret;
        -: 1294:}
------------------
        -: 1295:
        -: 1296:/* TODO: Might be worth a micro-optimization of having bump buffers link
        -: 1297: * themselves back into the central queue when queue goes from zero to
        -: 1298: * non-zero, then remove from list if zero more than N times.
        -: 1299: * If very few hits on cold this would avoid extra memory barriers from LRU
        -: 1300: * maintainer thread. If many hits, they'll just stay in the list.
        -: 1301: */
    25008: 1302:static bool lru_maintainer_bumps(void) {
    25008: 1303:    lru_bump_buf *b;
    25008: 1304:    lru_bump_entry *be;
    25008: 1305:    unsigned int size;
    25008: 1306:    unsigned int todo;
    25008: 1307:    bool bumped = false;
    25008: 1308:    pthread_mutex_lock(&bump_buf_lock);
   125040: 1309:    for (b = bump_buf_head; b != NULL; b=b->next) {
   100032: 1310:        pthread_mutex_lock(&b->mutex);
   100032: 1311:        be = (lru_bump_entry *) bipbuf_peek_all(b->buf, &size);
   100032: 1312:        pthread_mutex_unlock(&b->mutex);
        -: 1313:
   100032: 1314:        if (be == NULL) {
        -: 1315:            continue;
        -: 1316:        }
       20: 1317:        todo = size;
       20: 1318:        bumped = true;
        -: 1319:
       44: 1320:        while (todo) {
       24: 1321:            item_lock(be->hv);
       24: 1322:            do_item_update(be->it);
       24: 1323:            do_item_remove(be->it);
       24: 1324:            item_unlock(be->hv);
       24: 1325:            be++;
       24: 1326:            todo -= sizeof(lru_bump_entry);
        -: 1327:        }
        -: 1328:
       20: 1329:        pthread_mutex_lock(&b->mutex);
       20: 1330:        be = (lru_bump_entry *) bipbuf_poll(b->buf, size);
       20: 1331:        pthread_mutex_unlock(&b->mutex);
        -: 1332:    }
    25008: 1333:    pthread_mutex_unlock(&bump_buf_lock);
    25008: 1334:    return bumped;
        -: 1335:}
------------------
lru_maintainer_bumps:
     6252: 1302:static bool lru_maintainer_bumps(void) {
     6252: 1303:    lru_bump_buf *b;
     6252: 1304:    lru_bump_entry *be;
     6252: 1305:    unsigned int size;
     6252: 1306:    unsigned int todo;
     6252: 1307:    bool bumped = false;
     6252: 1308:    pthread_mutex_lock(&bump_buf_lock);
    31260: 1309:    for (b = bump_buf_head; b != NULL; b=b->next) {
    25008: 1310:        pthread_mutex_lock(&b->mutex);
    25008: 1311:        be = (lru_bump_entry *) bipbuf_peek_all(b->buf, &size);
    25008: 1312:        pthread_mutex_unlock(&b->mutex);
        -: 1313:
    25008: 1314:        if (be == NULL) {
        -: 1315:            continue;
        -: 1316:        }
        5: 1317:        todo = size;
        5: 1318:        bumped = true;
        -: 1319:
       11: 1320:        while (todo) {
        6: 1321:            item_lock(be->hv);
        6: 1322:            do_item_update(be->it);
        6: 1323:            do_item_remove(be->it);
        6: 1324:            item_unlock(be->hv);
        6: 1325:            be++;
        6: 1326:            todo -= sizeof(lru_bump_entry);
        -: 1327:        }
        -: 1328:
        5: 1329:        pthread_mutex_lock(&b->mutex);
        5: 1330:        be = (lru_bump_entry *) bipbuf_poll(b->buf, size);
        5: 1331:        pthread_mutex_unlock(&b->mutex);
        -: 1332:    }
     6252: 1333:    pthread_mutex_unlock(&bump_buf_lock);
     6252: 1334:    return bumped;
        -: 1335:}
------------------
lru_maintainer_bumps:
     6252: 1302:static bool lru_maintainer_bumps(void) {
     6252: 1303:    lru_bump_buf *b;
     6252: 1304:    lru_bump_entry *be;
     6252: 1305:    unsigned int size;
     6252: 1306:    unsigned int todo;
     6252: 1307:    bool bumped = false;
     6252: 1308:    pthread_mutex_lock(&bump_buf_lock);
    31260: 1309:    for (b = bump_buf_head; b != NULL; b=b->next) {
    25008: 1310:        pthread_mutex_lock(&b->mutex);
    25008: 1311:        be = (lru_bump_entry *) bipbuf_peek_all(b->buf, &size);
    25008: 1312:        pthread_mutex_unlock(&b->mutex);
        -: 1313:
    25008: 1314:        if (be == NULL) {
        -: 1315:            continue;
        -: 1316:        }
        5: 1317:        todo = size;
        5: 1318:        bumped = true;
        -: 1319:
       11: 1320:        while (todo) {
        6: 1321:            item_lock(be->hv);
        6: 1322:            do_item_update(be->it);
        6: 1323:            do_item_remove(be->it);
        6: 1324:            item_unlock(be->hv);
        6: 1325:            be++;
        6: 1326:            todo -= sizeof(lru_bump_entry);
        -: 1327:        }
        -: 1328:
        5: 1329:        pthread_mutex_lock(&b->mutex);
        5: 1330:        be = (lru_bump_entry *) bipbuf_poll(b->buf, size);
        5: 1331:        pthread_mutex_unlock(&b->mutex);
        -: 1332:    }
     6252: 1333:    pthread_mutex_unlock(&bump_buf_lock);
     6252: 1334:    return bumped;
        -: 1335:}
------------------
lru_maintainer_bumps:
     6252: 1302:static bool lru_maintainer_bumps(void) {
     6252: 1303:    lru_bump_buf *b;
     6252: 1304:    lru_bump_entry *be;
     6252: 1305:    unsigned int size;
     6252: 1306:    unsigned int todo;
     6252: 1307:    bool bumped = false;
     6252: 1308:    pthread_mutex_lock(&bump_buf_lock);
    31260: 1309:    for (b = bump_buf_head; b != NULL; b=b->next) {
    25008: 1310:        pthread_mutex_lock(&b->mutex);
    25008: 1311:        be = (lru_bump_entry *) bipbuf_peek_all(b->buf, &size);
    25008: 1312:        pthread_mutex_unlock(&b->mutex);
        -: 1313:
    25008: 1314:        if (be == NULL) {
        -: 1315:            continue;
        -: 1316:        }
        5: 1317:        todo = size;
        5: 1318:        bumped = true;
        -: 1319:
       11: 1320:        while (todo) {
        6: 1321:            item_lock(be->hv);
        6: 1322:            do_item_update(be->it);
        6: 1323:            do_item_remove(be->it);
        6: 1324:            item_unlock(be->hv);
        6: 1325:            be++;
        6: 1326:            todo -= sizeof(lru_bump_entry);
        -: 1327:        }
        -: 1328:
        5: 1329:        pthread_mutex_lock(&b->mutex);
        5: 1330:        be = (lru_bump_entry *) bipbuf_poll(b->buf, size);
        5: 1331:        pthread_mutex_unlock(&b->mutex);
        -: 1332:    }
     6252: 1333:    pthread_mutex_unlock(&bump_buf_lock);
     6252: 1334:    return bumped;
        -: 1335:}
------------------
lru_maintainer_bumps:
     6252: 1302:static bool lru_maintainer_bumps(void) {
     6252: 1303:    lru_bump_buf *b;
     6252: 1304:    lru_bump_entry *be;
     6252: 1305:    unsigned int size;
     6252: 1306:    unsigned int todo;
     6252: 1307:    bool bumped = false;
     6252: 1308:    pthread_mutex_lock(&bump_buf_lock);
    31260: 1309:    for (b = bump_buf_head; b != NULL; b=b->next) {
    25008: 1310:        pthread_mutex_lock(&b->mutex);
    25008: 1311:        be = (lru_bump_entry *) bipbuf_peek_all(b->buf, &size);
    25008: 1312:        pthread_mutex_unlock(&b->mutex);
        -: 1313:
    25008: 1314:        if (be == NULL) {
        -: 1315:            continue;
        -: 1316:        }
        5: 1317:        todo = size;
        5: 1318:        bumped = true;
        -: 1319:
       11: 1320:        while (todo) {
        6: 1321:            item_lock(be->hv);
        6: 1322:            do_item_update(be->it);
        6: 1323:            do_item_remove(be->it);
        6: 1324:            item_unlock(be->hv);
        6: 1325:            be++;
        6: 1326:            todo -= sizeof(lru_bump_entry);
        -: 1327:        }
        -: 1328:
        5: 1329:        pthread_mutex_lock(&b->mutex);
        5: 1330:        be = (lru_bump_entry *) bipbuf_poll(b->buf, size);
        5: 1331:        pthread_mutex_unlock(&b->mutex);
        -: 1332:    }
     6252: 1333:    pthread_mutex_unlock(&bump_buf_lock);
     6252: 1334:    return bumped;
        -: 1335:}
------------------
        -: 1336:
    10796: 1337:static uint64_t lru_total_bumps_dropped(void) {
    10796: 1338:    uint64_t total = 0;
    10796: 1339:    lru_bump_buf *b;
    10796: 1340:    pthread_mutex_lock(&bump_buf_lock);
    53980: 1341:    for (b = bump_buf_head; b != NULL; b=b->next) {
    43184: 1342:        pthread_mutex_lock(&b->mutex);
    43184: 1343:        total += b->dropped;
    43184: 1344:        pthread_mutex_unlock(&b->mutex);
        -: 1345:    }
    10796: 1346:    pthread_mutex_unlock(&bump_buf_lock);
    10796: 1347:    return total;
        -: 1348:}
------------------
lru_total_bumps_dropped:
     2699: 1337:static uint64_t lru_total_bumps_dropped(void) {
     2699: 1338:    uint64_t total = 0;
     2699: 1339:    lru_bump_buf *b;
     2699: 1340:    pthread_mutex_lock(&bump_buf_lock);
    13495: 1341:    for (b = bump_buf_head; b != NULL; b=b->next) {
    10796: 1342:        pthread_mutex_lock(&b->mutex);
    10796: 1343:        total += b->dropped;
    10796: 1344:        pthread_mutex_unlock(&b->mutex);
        -: 1345:    }
     2699: 1346:    pthread_mutex_unlock(&bump_buf_lock);
     2699: 1347:    return total;
        -: 1348:}
------------------
lru_total_bumps_dropped:
     2699: 1337:static uint64_t lru_total_bumps_dropped(void) {
     2699: 1338:    uint64_t total = 0;
     2699: 1339:    lru_bump_buf *b;
     2699: 1340:    pthread_mutex_lock(&bump_buf_lock);
    13495: 1341:    for (b = bump_buf_head; b != NULL; b=b->next) {
    10796: 1342:        pthread_mutex_lock(&b->mutex);
    10796: 1343:        total += b->dropped;
    10796: 1344:        pthread_mutex_unlock(&b->mutex);
        -: 1345:    }
     2699: 1346:    pthread_mutex_unlock(&bump_buf_lock);
     2699: 1347:    return total;
        -: 1348:}
------------------
lru_total_bumps_dropped:
     2699: 1337:static uint64_t lru_total_bumps_dropped(void) {
     2699: 1338:    uint64_t total = 0;
     2699: 1339:    lru_bump_buf *b;
     2699: 1340:    pthread_mutex_lock(&bump_buf_lock);
    13495: 1341:    for (b = bump_buf_head; b != NULL; b=b->next) {
    10796: 1342:        pthread_mutex_lock(&b->mutex);
    10796: 1343:        total += b->dropped;
    10796: 1344:        pthread_mutex_unlock(&b->mutex);
        -: 1345:    }
     2699: 1346:    pthread_mutex_unlock(&bump_buf_lock);
     2699: 1347:    return total;
        -: 1348:}
------------------
lru_total_bumps_dropped:
     2699: 1337:static uint64_t lru_total_bumps_dropped(void) {
     2699: 1338:    uint64_t total = 0;
     2699: 1339:    lru_bump_buf *b;
     2699: 1340:    pthread_mutex_lock(&bump_buf_lock);
    13495: 1341:    for (b = bump_buf_head; b != NULL; b=b->next) {
    10796: 1342:        pthread_mutex_lock(&b->mutex);
    10796: 1343:        total += b->dropped;
    10796: 1344:        pthread_mutex_unlock(&b->mutex);
        -: 1345:    }
     2699: 1346:    pthread_mutex_unlock(&bump_buf_lock);
     2699: 1347:    return total;
        -: 1348:}
------------------
        -: 1349:
        -: 1350:/* Loop up to N times:
        -: 1351: * If too many items are in HOT_LRU, push to COLD_LRU
        -: 1352: * If too many items are in WARM_LRU, push to COLD_LRU
        -: 1353: * If too many items are in COLD_LRU, poke COLD_LRU tail
        -: 1354: * 1000 loops with 1ms min sleep gives us under 1m items shifted/sec. The
        -: 1355: * locks can't handle much more than that. Leaving a TODO for how to
        -: 1356: * autoadjust in the future.
        -: 1357: */
   894448: 1358:static int lru_maintainer_juggle(const int slabs_clsid) {
   894448: 1359:    int i;
   894448: 1360:    int did_moves = 0;
   894448: 1361:    uint64_t total_bytes = 0;
   894448: 1362:    unsigned int chunks_perslab = 0;
        -: 1363:    //unsigned int chunks_free = 0;
        -: 1364:    /* TODO: if free_chunks below high watermark, increase aggressiveness */
   894448: 1365:    slabs_available_chunks(slabs_clsid, NULL,
        -: 1366:            &total_bytes, &chunks_perslab);
   894448: 1367:    if (settings.temp_lru) {
        -: 1368:        /* Only looking for reclaims. Run before we size the LRU. */
   10584*: 1369:        for (i = 0; i < 500; i++) {
    10584: 1370:            if (lru_pull_tail(slabs_clsid, TEMP_LRU, 0, 0, 0, NULL) <= 0) {
        -: 1371:                break;
        -: 1372:            } else {
    #####: 1373:                did_moves++;
        -: 1374:            }
        -: 1375:        }
    21168: 1376:        total_bytes -= temp_lru_size(slabs_clsid);
        -: 1377:    }
        -: 1378:
   894448: 1379:    rel_time_t cold_age = 0;
   894448: 1380:    rel_time_t hot_age = 0;
   894448: 1381:    rel_time_t warm_age = 0;
        -: 1382:    /* If LRU is in flat mode, force items to drain into COLD via max age */
   894448: 1383:    if (settings.lru_segmented) {
   894448: 1384:        pthread_mutex_lock(&lru_locks[slabs_clsid|COLD_LRU]);
   894448: 1385:        if (tails[slabs_clsid|COLD_LRU]) {
    10264: 1386:            cold_age = current_time - tails[slabs_clsid|COLD_LRU]->time;
        -: 1387:        }
   894448: 1388:        pthread_mutex_unlock(&lru_locks[slabs_clsid|COLD_LRU]);
   894448: 1389:        hot_age = cold_age * settings.hot_max_factor;
   894448: 1390:        warm_age = cold_age * settings.warm_max_factor;
        -: 1391:    }
        -: 1392:
        -: 1393:    /* Juggle HOT/WARM up to N times */
  1012872: 1394:    for (i = 0; i < 500; i++) {
  1012760: 1395:        int do_more = 0;
  1912704: 1396:        if (lru_pull_tail(slabs_clsid, HOT_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, hot_age, NULL) ||
   899944: 1397:            lru_pull_tail(slabs_clsid, WARM_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, warm_age, NULL)) {
        -: 1398:            do_more++;
        -: 1399:        }
  1012760: 1400:        if (settings.lru_segmented) {
  1012760: 1401:            do_more += lru_pull_tail(slabs_clsid, COLD_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, 0, NULL);
        -: 1402:        }
  1012760: 1403:        if (do_more == 0)
        -: 1404:            break;
   118424: 1405:        did_moves++;
        -: 1406:    }
   894448: 1407:    return did_moves;
        -: 1408:}
------------------
lru_maintainer_juggle:
   223612: 1358:static int lru_maintainer_juggle(const int slabs_clsid) {
   223612: 1359:    int i;
   223612: 1360:    int did_moves = 0;
   223612: 1361:    uint64_t total_bytes = 0;
   223612: 1362:    unsigned int chunks_perslab = 0;
        -: 1363:    //unsigned int chunks_free = 0;
        -: 1364:    /* TODO: if free_chunks below high watermark, increase aggressiveness */
   223612: 1365:    slabs_available_chunks(slabs_clsid, NULL,
        -: 1366:            &total_bytes, &chunks_perslab);
   223612: 1367:    if (settings.temp_lru) {
        -: 1368:        /* Only looking for reclaims. Run before we size the LRU. */
    2646*: 1369:        for (i = 0; i < 500; i++) {
     2646: 1370:            if (lru_pull_tail(slabs_clsid, TEMP_LRU, 0, 0, 0, NULL) <= 0) {
        -: 1371:                break;
        -: 1372:            } else {
    #####: 1373:                did_moves++;
        -: 1374:            }
        -: 1375:        }
     5292: 1376:        total_bytes -= temp_lru_size(slabs_clsid);
        -: 1377:    }
        -: 1378:
   223612: 1379:    rel_time_t cold_age = 0;
   223612: 1380:    rel_time_t hot_age = 0;
   223612: 1381:    rel_time_t warm_age = 0;
        -: 1382:    /* If LRU is in flat mode, force items to drain into COLD via max age */
   223612: 1383:    if (settings.lru_segmented) {
   223612: 1384:        pthread_mutex_lock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1385:        if (tails[slabs_clsid|COLD_LRU]) {
     2566: 1386:            cold_age = current_time - tails[slabs_clsid|COLD_LRU]->time;
        -: 1387:        }
   223612: 1388:        pthread_mutex_unlock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1389:        hot_age = cold_age * settings.hot_max_factor;
   223612: 1390:        warm_age = cold_age * settings.warm_max_factor;
        -: 1391:    }
        -: 1392:
        -: 1393:    /* Juggle HOT/WARM up to N times */
   253218: 1394:    for (i = 0; i < 500; i++) {
   253190: 1395:        int do_more = 0;
   478176: 1396:        if (lru_pull_tail(slabs_clsid, HOT_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, hot_age, NULL) ||
   224986: 1397:            lru_pull_tail(slabs_clsid, WARM_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, warm_age, NULL)) {
        -: 1398:            do_more++;
        -: 1399:        }
   253190: 1400:        if (settings.lru_segmented) {
   253190: 1401:            do_more += lru_pull_tail(slabs_clsid, COLD_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, 0, NULL);
        -: 1402:        }
   253190: 1403:        if (do_more == 0)
        -: 1404:            break;
    29606: 1405:        did_moves++;
        -: 1406:    }
   223612: 1407:    return did_moves;
        -: 1408:}
------------------
lru_maintainer_juggle:
   223612: 1358:static int lru_maintainer_juggle(const int slabs_clsid) {
   223612: 1359:    int i;
   223612: 1360:    int did_moves = 0;
   223612: 1361:    uint64_t total_bytes = 0;
   223612: 1362:    unsigned int chunks_perslab = 0;
        -: 1363:    //unsigned int chunks_free = 0;
        -: 1364:    /* TODO: if free_chunks below high watermark, increase aggressiveness */
   223612: 1365:    slabs_available_chunks(slabs_clsid, NULL,
        -: 1366:            &total_bytes, &chunks_perslab);
   223612: 1367:    if (settings.temp_lru) {
        -: 1368:        /* Only looking for reclaims. Run before we size the LRU. */
    2646*: 1369:        for (i = 0; i < 500; i++) {
     2646: 1370:            if (lru_pull_tail(slabs_clsid, TEMP_LRU, 0, 0, 0, NULL) <= 0) {
        -: 1371:                break;
        -: 1372:            } else {
    #####: 1373:                did_moves++;
        -: 1374:            }
        -: 1375:        }
     5292: 1376:        total_bytes -= temp_lru_size(slabs_clsid);
        -: 1377:    }
        -: 1378:
   223612: 1379:    rel_time_t cold_age = 0;
   223612: 1380:    rel_time_t hot_age = 0;
   223612: 1381:    rel_time_t warm_age = 0;
        -: 1382:    /* If LRU is in flat mode, force items to drain into COLD via max age */
   223612: 1383:    if (settings.lru_segmented) {
   223612: 1384:        pthread_mutex_lock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1385:        if (tails[slabs_clsid|COLD_LRU]) {
     2566: 1386:            cold_age = current_time - tails[slabs_clsid|COLD_LRU]->time;
        -: 1387:        }
   223612: 1388:        pthread_mutex_unlock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1389:        hot_age = cold_age * settings.hot_max_factor;
   223612: 1390:        warm_age = cold_age * settings.warm_max_factor;
        -: 1391:    }
        -: 1392:
        -: 1393:    /* Juggle HOT/WARM up to N times */
   253218: 1394:    for (i = 0; i < 500; i++) {
   253190: 1395:        int do_more = 0;
   478176: 1396:        if (lru_pull_tail(slabs_clsid, HOT_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, hot_age, NULL) ||
   224986: 1397:            lru_pull_tail(slabs_clsid, WARM_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, warm_age, NULL)) {
        -: 1398:            do_more++;
        -: 1399:        }
   253190: 1400:        if (settings.lru_segmented) {
   253190: 1401:            do_more += lru_pull_tail(slabs_clsid, COLD_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, 0, NULL);
        -: 1402:        }
   253190: 1403:        if (do_more == 0)
        -: 1404:            break;
    29606: 1405:        did_moves++;
        -: 1406:    }
   223612: 1407:    return did_moves;
        -: 1408:}
------------------
lru_maintainer_juggle:
   223612: 1358:static int lru_maintainer_juggle(const int slabs_clsid) {
   223612: 1359:    int i;
   223612: 1360:    int did_moves = 0;
   223612: 1361:    uint64_t total_bytes = 0;
   223612: 1362:    unsigned int chunks_perslab = 0;
        -: 1363:    //unsigned int chunks_free = 0;
        -: 1364:    /* TODO: if free_chunks below high watermark, increase aggressiveness */
   223612: 1365:    slabs_available_chunks(slabs_clsid, NULL,
        -: 1366:            &total_bytes, &chunks_perslab);
   223612: 1367:    if (settings.temp_lru) {
        -: 1368:        /* Only looking for reclaims. Run before we size the LRU. */
    2646*: 1369:        for (i = 0; i < 500; i++) {
     2646: 1370:            if (lru_pull_tail(slabs_clsid, TEMP_LRU, 0, 0, 0, NULL) <= 0) {
        -: 1371:                break;
        -: 1372:            } else {
    #####: 1373:                did_moves++;
        -: 1374:            }
        -: 1375:        }
     5292: 1376:        total_bytes -= temp_lru_size(slabs_clsid);
        -: 1377:    }
        -: 1378:
   223612: 1379:    rel_time_t cold_age = 0;
   223612: 1380:    rel_time_t hot_age = 0;
   223612: 1381:    rel_time_t warm_age = 0;
        -: 1382:    /* If LRU is in flat mode, force items to drain into COLD via max age */
   223612: 1383:    if (settings.lru_segmented) {
   223612: 1384:        pthread_mutex_lock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1385:        if (tails[slabs_clsid|COLD_LRU]) {
     2566: 1386:            cold_age = current_time - tails[slabs_clsid|COLD_LRU]->time;
        -: 1387:        }
   223612: 1388:        pthread_mutex_unlock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1389:        hot_age = cold_age * settings.hot_max_factor;
   223612: 1390:        warm_age = cold_age * settings.warm_max_factor;
        -: 1391:    }
        -: 1392:
        -: 1393:    /* Juggle HOT/WARM up to N times */
   253218: 1394:    for (i = 0; i < 500; i++) {
   253190: 1395:        int do_more = 0;
   478176: 1396:        if (lru_pull_tail(slabs_clsid, HOT_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, hot_age, NULL) ||
   224986: 1397:            lru_pull_tail(slabs_clsid, WARM_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, warm_age, NULL)) {
        -: 1398:            do_more++;
        -: 1399:        }
   253190: 1400:        if (settings.lru_segmented) {
   253190: 1401:            do_more += lru_pull_tail(slabs_clsid, COLD_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, 0, NULL);
        -: 1402:        }
   253190: 1403:        if (do_more == 0)
        -: 1404:            break;
    29606: 1405:        did_moves++;
        -: 1406:    }
   223612: 1407:    return did_moves;
        -: 1408:}
------------------
lru_maintainer_juggle:
   223612: 1358:static int lru_maintainer_juggle(const int slabs_clsid) {
   223612: 1359:    int i;
   223612: 1360:    int did_moves = 0;
   223612: 1361:    uint64_t total_bytes = 0;
   223612: 1362:    unsigned int chunks_perslab = 0;
        -: 1363:    //unsigned int chunks_free = 0;
        -: 1364:    /* TODO: if free_chunks below high watermark, increase aggressiveness */
   223612: 1365:    slabs_available_chunks(slabs_clsid, NULL,
        -: 1366:            &total_bytes, &chunks_perslab);
   223612: 1367:    if (settings.temp_lru) {
        -: 1368:        /* Only looking for reclaims. Run before we size the LRU. */
    2646*: 1369:        for (i = 0; i < 500; i++) {
     2646: 1370:            if (lru_pull_tail(slabs_clsid, TEMP_LRU, 0, 0, 0, NULL) <= 0) {
        -: 1371:                break;
        -: 1372:            } else {
    #####: 1373:                did_moves++;
        -: 1374:            }
        -: 1375:        }
     5292: 1376:        total_bytes -= temp_lru_size(slabs_clsid);
        -: 1377:    }
        -: 1378:
   223612: 1379:    rel_time_t cold_age = 0;
   223612: 1380:    rel_time_t hot_age = 0;
   223612: 1381:    rel_time_t warm_age = 0;
        -: 1382:    /* If LRU is in flat mode, force items to drain into COLD via max age */
   223612: 1383:    if (settings.lru_segmented) {
   223612: 1384:        pthread_mutex_lock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1385:        if (tails[slabs_clsid|COLD_LRU]) {
     2566: 1386:            cold_age = current_time - tails[slabs_clsid|COLD_LRU]->time;
        -: 1387:        }
   223612: 1388:        pthread_mutex_unlock(&lru_locks[slabs_clsid|COLD_LRU]);
   223612: 1389:        hot_age = cold_age * settings.hot_max_factor;
   223612: 1390:        warm_age = cold_age * settings.warm_max_factor;
        -: 1391:    }
        -: 1392:
        -: 1393:    /* Juggle HOT/WARM up to N times */
   253218: 1394:    for (i = 0; i < 500; i++) {
   253190: 1395:        int do_more = 0;
   478176: 1396:        if (lru_pull_tail(slabs_clsid, HOT_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, hot_age, NULL) ||
   224986: 1397:            lru_pull_tail(slabs_clsid, WARM_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, warm_age, NULL)) {
        -: 1398:            do_more++;
        -: 1399:        }
   253190: 1400:        if (settings.lru_segmented) {
   253190: 1401:            do_more += lru_pull_tail(slabs_clsid, COLD_LRU, total_bytes, LRU_PULL_CRAWL_BLOCKS, 0, NULL);
        -: 1402:        }
   253190: 1403:        if (do_more == 0)
        -: 1404:            break;
    29606: 1405:        did_moves++;
        -: 1406:    }
   223612: 1407:    return did_moves;
        -: 1408:}
------------------
        -: 1409:
        -: 1410:/* Will crawl all slab classes a minimum of once per hour */
        -: 1411:#define MAX_MAINTCRAWL_WAIT 60 * 60
        -: 1412:
        -: 1413:/* Hoping user input will improve this function. This is all a wild guess.
        -: 1414: * Operation: Kicks crawler for each slab id. Crawlers take some statistics as
        -: 1415: * to items with nonzero expirations. It then buckets how many items will
        -: 1416: * expire per minute for the next hour.
        -: 1417: * This function checks the results of a run, and if it things more than 1% of
        -: 1418: * expirable objects are ready to go, kick the crawler again to reap.
        -: 1419: * It will also kick the crawler once per minute regardless, waiting a minute
        -: 1420: * longer for each time it has no work to do, up to an hour wait time.
        -: 1421: * The latter is to avoid newly started daemons from waiting too long before
        -: 1422: * retrying a crawl.
        -: 1423: */
      752: 1424:static void lru_maintainer_crawler_check(struct crawler_expired_data *cdata, logger *l) {
      752: 1425:    int i;
      752: 1426:    static rel_time_t next_crawls[POWER_LARGEST];
      752: 1427:    static rel_time_t next_crawl_wait[POWER_LARGEST];
      752: 1428:    uint8_t todo[POWER_LARGEST];
      752: 1429:    memset(todo, 0, sizeof(uint8_t) * POWER_LARGEST);
      752: 1430:    bool do_run = false;
      752: 1431:    unsigned int tocrawl_limit = 0;
        -: 1432:
        -: 1433:    // TODO: If not segmented LRU, skip non-cold
   191548: 1434:    for (i = POWER_SMALLEST; i < POWER_LARGEST; i++) {
   190800: 1435:        crawlerstats_t *s = &cdata->crawlerstats[i];
        -: 1436:        /* We've not successfully kicked off a crawl yet. */
   190800: 1437:        if (s->run_complete) {
    39840: 1438:            char *lru_name = "na";
    39840: 1439:            pthread_mutex_lock(&cdata->lock);
    39836: 1440:            int x;
        -: 1441:            /* Should we crawl again? */
    39836: 1442:            uint64_t possible_reclaims = s->seen - s->noexp;
    39836: 1443:            uint64_t available_reclaims = 0;
        -: 1444:            /* Need to think we can free at least 1% of the items before
        -: 1445:             * crawling. */
        -: 1446:            /* FIXME: Configurable? */
    39836: 1447:            uint64_t low_watermark = (possible_reclaims / 100) + 1;
    39836: 1448:            rel_time_t since_run = current_time - s->end_time;
        -: 1449:            /* Don't bother if the payoff is too low. */
  2430008: 1450:            for (x = 0; x < 60; x++) {
  2390172: 1451:                available_reclaims += s->histo[x];
  2390172: 1452:                if (available_reclaims > low_watermark) {
    #####: 1453:                    if (next_crawl_wait[i] < (x * 60)) {
    #####: 1454:                        next_crawl_wait[i] += 60;
    #####: 1455:                    } else if (next_crawl_wait[i] >= 60) {
    #####: 1456:                        next_crawl_wait[i] -= 60;
        -: 1457:                    }
        -: 1458:                    break;
        -: 1459:                }
        -: 1460:            }
        -: 1461:
    39836: 1462:            if (available_reclaims == 0) {
    39836: 1463:                next_crawl_wait[i] += 60;
        -: 1464:            }
        -: 1465:
    39836: 1466:            if (next_crawl_wait[i] > MAX_MAINTCRAWL_WAIT) {
    #####: 1467:                next_crawl_wait[i] = MAX_MAINTCRAWL_WAIT;
        -: 1468:            }
        -: 1469:
    39836: 1470:            next_crawls[i] = current_time + next_crawl_wait[i] + 5;
    39836: 1471:            switch (GET_LRU(i)) {
     9884: 1472:                case HOT_LRU:
     9884: 1473:                    lru_name = "hot";
     9884: 1474:                    break;
     9984: 1475:                case WARM_LRU:
     9984: 1476:                    lru_name = "warm";
     9984: 1477:                    break;
     9984: 1478:                case COLD_LRU:
     9984: 1479:                    lru_name = "cold";
     9984: 1480:                    break;
     9984: 1481:                case TEMP_LRU:
     9984: 1482:                    lru_name = "temp";
     9984: 1483:                    break;
        -: 1484:            }
   39836*: 1485:            LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_CRAWLER_STATUS, NULL,
        -: 1486:                    CLEAR_LRU(i),
        -: 1487:                    lru_name,
        -: 1488:                    (unsigned long long)low_watermark,
        -: 1489:                    (unsigned long long)available_reclaims,
        -: 1490:                    (unsigned int)since_run,
        -: 1491:                    next_crawls[i] - current_time,
        -: 1492:                    s->end_time - s->start_time,
        -: 1493:                    s->seen,
        -: 1494:                    s->reclaimed);
        -: 1495:            // Got our calculation, avoid running until next actual run.
    39836: 1496:            s->run_complete = false;
    39836: 1497:            pthread_mutex_unlock(&cdata->lock);
        -: 1498:        }
   190796: 1499:        if (current_time > next_crawls[i]) {
    88740: 1500:            pthread_mutex_lock(&lru_locks[i]);
    88740: 1501:            if (sizes[i] > tocrawl_limit) {
    #####: 1502:                tocrawl_limit = sizes[i];
        -: 1503:            }
    88740: 1504:            pthread_mutex_unlock(&lru_locks[i]);
    88740: 1505:            todo[i] = 1;
    88740: 1506:            do_run = true;
    88740: 1507:            next_crawls[i] = current_time + 5; // minimum retry wait.
        -: 1508:        }
        -: 1509:    }
      748: 1510:    if (do_run) {
     348*: 1511:        if (settings.lru_crawler_tocrawl && settings.lru_crawler_tocrawl < tocrawl_limit) {
    #####: 1512:            tocrawl_limit = settings.lru_crawler_tocrawl;
        -: 1513:        }
      348: 1514:        lru_crawler_start(todo, tocrawl_limit, CRAWLER_AUTOEXPIRE, cdata, NULL, 0);
        -: 1515:    }
      748: 1516:}
------------------
lru_maintainer_crawler_check:
      188: 1424:static void lru_maintainer_crawler_check(struct crawler_expired_data *cdata, logger *l) {
      188: 1425:    int i;
      188: 1426:    static rel_time_t next_crawls[POWER_LARGEST];
      188: 1427:    static rel_time_t next_crawl_wait[POWER_LARGEST];
      188: 1428:    uint8_t todo[POWER_LARGEST];
      188: 1429:    memset(todo, 0, sizeof(uint8_t) * POWER_LARGEST);
      188: 1430:    bool do_run = false;
      188: 1431:    unsigned int tocrawl_limit = 0;
        -: 1432:
        -: 1433:    // TODO: If not segmented LRU, skip non-cold
    47887: 1434:    for (i = POWER_SMALLEST; i < POWER_LARGEST; i++) {
    47700: 1435:        crawlerstats_t *s = &cdata->crawlerstats[i];
        -: 1436:        /* We've not successfully kicked off a crawl yet. */
    47700: 1437:        if (s->run_complete) {
     9960: 1438:            char *lru_name = "na";
     9960: 1439:            pthread_mutex_lock(&cdata->lock);
     9959: 1440:            int x;
        -: 1441:            /* Should we crawl again? */
     9959: 1442:            uint64_t possible_reclaims = s->seen - s->noexp;
     9959: 1443:            uint64_t available_reclaims = 0;
        -: 1444:            /* Need to think we can free at least 1% of the items before
        -: 1445:             * crawling. */
        -: 1446:            /* FIXME: Configurable? */
     9959: 1447:            uint64_t low_watermark = (possible_reclaims / 100) + 1;
     9959: 1448:            rel_time_t since_run = current_time - s->end_time;
        -: 1449:            /* Don't bother if the payoff is too low. */
   607502: 1450:            for (x = 0; x < 60; x++) {
   597543: 1451:                available_reclaims += s->histo[x];
   597543: 1452:                if (available_reclaims > low_watermark) {
    #####: 1453:                    if (next_crawl_wait[i] < (x * 60)) {
    #####: 1454:                        next_crawl_wait[i] += 60;
    #####: 1455:                    } else if (next_crawl_wait[i] >= 60) {
    #####: 1456:                        next_crawl_wait[i] -= 60;
        -: 1457:                    }
        -: 1458:                    break;
        -: 1459:                }
        -: 1460:            }
        -: 1461:
     9959: 1462:            if (available_reclaims == 0) {
     9959: 1463:                next_crawl_wait[i] += 60;
        -: 1464:            }
        -: 1465:
     9959: 1466:            if (next_crawl_wait[i] > MAX_MAINTCRAWL_WAIT) {
    #####: 1467:                next_crawl_wait[i] = MAX_MAINTCRAWL_WAIT;
        -: 1468:            }
        -: 1469:
     9959: 1470:            next_crawls[i] = current_time + next_crawl_wait[i] + 5;
     9959: 1471:            switch (GET_LRU(i)) {
     2471: 1472:                case HOT_LRU:
     2471: 1473:                    lru_name = "hot";
     2471: 1474:                    break;
     2496: 1475:                case WARM_LRU:
     2496: 1476:                    lru_name = "warm";
     2496: 1477:                    break;
     2496: 1478:                case COLD_LRU:
     2496: 1479:                    lru_name = "cold";
     2496: 1480:                    break;
     2496: 1481:                case TEMP_LRU:
     2496: 1482:                    lru_name = "temp";
     2496: 1483:                    break;
        -: 1484:            }
    9959*: 1485:            LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_CRAWLER_STATUS, NULL,
        -: 1486:                    CLEAR_LRU(i),
        -: 1487:                    lru_name,
        -: 1488:                    (unsigned long long)low_watermark,
        -: 1489:                    (unsigned long long)available_reclaims,
        -: 1490:                    (unsigned int)since_run,
        -: 1491:                    next_crawls[i] - current_time,
        -: 1492:                    s->end_time - s->start_time,
        -: 1493:                    s->seen,
        -: 1494:                    s->reclaimed);
        -: 1495:            // Got our calculation, avoid running until next actual run.
     9959: 1496:            s->run_complete = false;
     9959: 1497:            pthread_mutex_unlock(&cdata->lock);
        -: 1498:        }
    47699: 1499:        if (current_time > next_crawls[i]) {
    22185: 1500:            pthread_mutex_lock(&lru_locks[i]);
    22185: 1501:            if (sizes[i] > tocrawl_limit) {
    #####: 1502:                tocrawl_limit = sizes[i];
        -: 1503:            }
    22185: 1504:            pthread_mutex_unlock(&lru_locks[i]);
    22185: 1505:            todo[i] = 1;
    22185: 1506:            do_run = true;
    22185: 1507:            next_crawls[i] = current_time + 5; // minimum retry wait.
        -: 1508:        }
        -: 1509:    }
      187: 1510:    if (do_run) {
      87*: 1511:        if (settings.lru_crawler_tocrawl && settings.lru_crawler_tocrawl < tocrawl_limit) {
    #####: 1512:            tocrawl_limit = settings.lru_crawler_tocrawl;
        -: 1513:        }
       87: 1514:        lru_crawler_start(todo, tocrawl_limit, CRAWLER_AUTOEXPIRE, cdata, NULL, 0);
        -: 1515:    }
      187: 1516:}
------------------
lru_maintainer_crawler_check:
      188: 1424:static void lru_maintainer_crawler_check(struct crawler_expired_data *cdata, logger *l) {
      188: 1425:    int i;
      188: 1426:    static rel_time_t next_crawls[POWER_LARGEST];
      188: 1427:    static rel_time_t next_crawl_wait[POWER_LARGEST];
      188: 1428:    uint8_t todo[POWER_LARGEST];
      188: 1429:    memset(todo, 0, sizeof(uint8_t) * POWER_LARGEST);
      188: 1430:    bool do_run = false;
      188: 1431:    unsigned int tocrawl_limit = 0;
        -: 1432:
        -: 1433:    // TODO: If not segmented LRU, skip non-cold
    47887: 1434:    for (i = POWER_SMALLEST; i < POWER_LARGEST; i++) {
    47700: 1435:        crawlerstats_t *s = &cdata->crawlerstats[i];
        -: 1436:        /* We've not successfully kicked off a crawl yet. */
    47700: 1437:        if (s->run_complete) {
     9960: 1438:            char *lru_name = "na";
     9960: 1439:            pthread_mutex_lock(&cdata->lock);
     9959: 1440:            int x;
        -: 1441:            /* Should we crawl again? */
     9959: 1442:            uint64_t possible_reclaims = s->seen - s->noexp;
     9959: 1443:            uint64_t available_reclaims = 0;
        -: 1444:            /* Need to think we can free at least 1% of the items before
        -: 1445:             * crawling. */
        -: 1446:            /* FIXME: Configurable? */
     9959: 1447:            uint64_t low_watermark = (possible_reclaims / 100) + 1;
     9959: 1448:            rel_time_t since_run = current_time - s->end_time;
        -: 1449:            /* Don't bother if the payoff is too low. */
   607502: 1450:            for (x = 0; x < 60; x++) {
   597543: 1451:                available_reclaims += s->histo[x];
   597543: 1452:                if (available_reclaims > low_watermark) {
    #####: 1453:                    if (next_crawl_wait[i] < (x * 60)) {
    #####: 1454:                        next_crawl_wait[i] += 60;
    #####: 1455:                    } else if (next_crawl_wait[i] >= 60) {
    #####: 1456:                        next_crawl_wait[i] -= 60;
        -: 1457:                    }
        -: 1458:                    break;
        -: 1459:                }
        -: 1460:            }
        -: 1461:
     9959: 1462:            if (available_reclaims == 0) {
     9959: 1463:                next_crawl_wait[i] += 60;
        -: 1464:            }
        -: 1465:
     9959: 1466:            if (next_crawl_wait[i] > MAX_MAINTCRAWL_WAIT) {
    #####: 1467:                next_crawl_wait[i] = MAX_MAINTCRAWL_WAIT;
        -: 1468:            }
        -: 1469:
     9959: 1470:            next_crawls[i] = current_time + next_crawl_wait[i] + 5;
     9959: 1471:            switch (GET_LRU(i)) {
     2471: 1472:                case HOT_LRU:
     2471: 1473:                    lru_name = "hot";
     2471: 1474:                    break;
     2496: 1475:                case WARM_LRU:
     2496: 1476:                    lru_name = "warm";
     2496: 1477:                    break;
     2496: 1478:                case COLD_LRU:
     2496: 1479:                    lru_name = "cold";
     2496: 1480:                    break;
     2496: 1481:                case TEMP_LRU:
     2496: 1482:                    lru_name = "temp";
     2496: 1483:                    break;
        -: 1484:            }
    9959*: 1485:            LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_CRAWLER_STATUS, NULL,
        -: 1486:                    CLEAR_LRU(i),
        -: 1487:                    lru_name,
        -: 1488:                    (unsigned long long)low_watermark,
        -: 1489:                    (unsigned long long)available_reclaims,
        -: 1490:                    (unsigned int)since_run,
        -: 1491:                    next_crawls[i] - current_time,
        -: 1492:                    s->end_time - s->start_time,
        -: 1493:                    s->seen,
        -: 1494:                    s->reclaimed);
        -: 1495:            // Got our calculation, avoid running until next actual run.
     9959: 1496:            s->run_complete = false;
     9959: 1497:            pthread_mutex_unlock(&cdata->lock);
        -: 1498:        }
    47699: 1499:        if (current_time > next_crawls[i]) {
    22185: 1500:            pthread_mutex_lock(&lru_locks[i]);
    22185: 1501:            if (sizes[i] > tocrawl_limit) {
    #####: 1502:                tocrawl_limit = sizes[i];
        -: 1503:            }
    22185: 1504:            pthread_mutex_unlock(&lru_locks[i]);
    22185: 1505:            todo[i] = 1;
    22185: 1506:            do_run = true;
    22185: 1507:            next_crawls[i] = current_time + 5; // minimum retry wait.
        -: 1508:        }
        -: 1509:    }
      187: 1510:    if (do_run) {
      87*: 1511:        if (settings.lru_crawler_tocrawl && settings.lru_crawler_tocrawl < tocrawl_limit) {
    #####: 1512:            tocrawl_limit = settings.lru_crawler_tocrawl;
        -: 1513:        }
       87: 1514:        lru_crawler_start(todo, tocrawl_limit, CRAWLER_AUTOEXPIRE, cdata, NULL, 0);
        -: 1515:    }
      187: 1516:}
------------------
lru_maintainer_crawler_check:
      188: 1424:static void lru_maintainer_crawler_check(struct crawler_expired_data *cdata, logger *l) {
      188: 1425:    int i;
      188: 1426:    static rel_time_t next_crawls[POWER_LARGEST];
      188: 1427:    static rel_time_t next_crawl_wait[POWER_LARGEST];
      188: 1428:    uint8_t todo[POWER_LARGEST];
      188: 1429:    memset(todo, 0, sizeof(uint8_t) * POWER_LARGEST);
      188: 1430:    bool do_run = false;
      188: 1431:    unsigned int tocrawl_limit = 0;
        -: 1432:
        -: 1433:    // TODO: If not segmented LRU, skip non-cold
    47887: 1434:    for (i = POWER_SMALLEST; i < POWER_LARGEST; i++) {
    47700: 1435:        crawlerstats_t *s = &cdata->crawlerstats[i];
        -: 1436:        /* We've not successfully kicked off a crawl yet. */
    47700: 1437:        if (s->run_complete) {
     9960: 1438:            char *lru_name = "na";
     9960: 1439:            pthread_mutex_lock(&cdata->lock);
     9959: 1440:            int x;
        -: 1441:            /* Should we crawl again? */
     9959: 1442:            uint64_t possible_reclaims = s->seen - s->noexp;
     9959: 1443:            uint64_t available_reclaims = 0;
        -: 1444:            /* Need to think we can free at least 1% of the items before
        -: 1445:             * crawling. */
        -: 1446:            /* FIXME: Configurable? */
     9959: 1447:            uint64_t low_watermark = (possible_reclaims / 100) + 1;
     9959: 1448:            rel_time_t since_run = current_time - s->end_time;
        -: 1449:            /* Don't bother if the payoff is too low. */
   607502: 1450:            for (x = 0; x < 60; x++) {
   597543: 1451:                available_reclaims += s->histo[x];
   597543: 1452:                if (available_reclaims > low_watermark) {
    #####: 1453:                    if (next_crawl_wait[i] < (x * 60)) {
    #####: 1454:                        next_crawl_wait[i] += 60;
    #####: 1455:                    } else if (next_crawl_wait[i] >= 60) {
    #####: 1456:                        next_crawl_wait[i] -= 60;
        -: 1457:                    }
        -: 1458:                    break;
        -: 1459:                }
        -: 1460:            }
        -: 1461:
     9959: 1462:            if (available_reclaims == 0) {
     9959: 1463:                next_crawl_wait[i] += 60;
        -: 1464:            }
        -: 1465:
     9959: 1466:            if (next_crawl_wait[i] > MAX_MAINTCRAWL_WAIT) {
    #####: 1467:                next_crawl_wait[i] = MAX_MAINTCRAWL_WAIT;
        -: 1468:            }
        -: 1469:
     9959: 1470:            next_crawls[i] = current_time + next_crawl_wait[i] + 5;
     9959: 1471:            switch (GET_LRU(i)) {
     2471: 1472:                case HOT_LRU:
     2471: 1473:                    lru_name = "hot";
     2471: 1474:                    break;
     2496: 1475:                case WARM_LRU:
     2496: 1476:                    lru_name = "warm";
     2496: 1477:                    break;
     2496: 1478:                case COLD_LRU:
     2496: 1479:                    lru_name = "cold";
     2496: 1480:                    break;
     2496: 1481:                case TEMP_LRU:
     2496: 1482:                    lru_name = "temp";
     2496: 1483:                    break;
        -: 1484:            }
    9959*: 1485:            LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_CRAWLER_STATUS, NULL,
        -: 1486:                    CLEAR_LRU(i),
        -: 1487:                    lru_name,
        -: 1488:                    (unsigned long long)low_watermark,
        -: 1489:                    (unsigned long long)available_reclaims,
        -: 1490:                    (unsigned int)since_run,
        -: 1491:                    next_crawls[i] - current_time,
        -: 1492:                    s->end_time - s->start_time,
        -: 1493:                    s->seen,
        -: 1494:                    s->reclaimed);
        -: 1495:            // Got our calculation, avoid running until next actual run.
     9959: 1496:            s->run_complete = false;
     9959: 1497:            pthread_mutex_unlock(&cdata->lock);
        -: 1498:        }
    47699: 1499:        if (current_time > next_crawls[i]) {
    22185: 1500:            pthread_mutex_lock(&lru_locks[i]);
    22185: 1501:            if (sizes[i] > tocrawl_limit) {
    #####: 1502:                tocrawl_limit = sizes[i];
        -: 1503:            }
    22185: 1504:            pthread_mutex_unlock(&lru_locks[i]);
    22185: 1505:            todo[i] = 1;
    22185: 1506:            do_run = true;
    22185: 1507:            next_crawls[i] = current_time + 5; // minimum retry wait.
        -: 1508:        }
        -: 1509:    }
      187: 1510:    if (do_run) {
      87*: 1511:        if (settings.lru_crawler_tocrawl && settings.lru_crawler_tocrawl < tocrawl_limit) {
    #####: 1512:            tocrawl_limit = settings.lru_crawler_tocrawl;
        -: 1513:        }
       87: 1514:        lru_crawler_start(todo, tocrawl_limit, CRAWLER_AUTOEXPIRE, cdata, NULL, 0);
        -: 1515:    }
      187: 1516:}
------------------
lru_maintainer_crawler_check:
      188: 1424:static void lru_maintainer_crawler_check(struct crawler_expired_data *cdata, logger *l) {
      188: 1425:    int i;
      188: 1426:    static rel_time_t next_crawls[POWER_LARGEST];
      188: 1427:    static rel_time_t next_crawl_wait[POWER_LARGEST];
      188: 1428:    uint8_t todo[POWER_LARGEST];
      188: 1429:    memset(todo, 0, sizeof(uint8_t) * POWER_LARGEST);
      188: 1430:    bool do_run = false;
      188: 1431:    unsigned int tocrawl_limit = 0;
        -: 1432:
        -: 1433:    // TODO: If not segmented LRU, skip non-cold
    47887: 1434:    for (i = POWER_SMALLEST; i < POWER_LARGEST; i++) {
    47700: 1435:        crawlerstats_t *s = &cdata->crawlerstats[i];
        -: 1436:        /* We've not successfully kicked off a crawl yet. */
    47700: 1437:        if (s->run_complete) {
     9960: 1438:            char *lru_name = "na";
     9960: 1439:            pthread_mutex_lock(&cdata->lock);
     9959: 1440:            int x;
        -: 1441:            /* Should we crawl again? */
     9959: 1442:            uint64_t possible_reclaims = s->seen - s->noexp;
     9959: 1443:            uint64_t available_reclaims = 0;
        -: 1444:            /* Need to think we can free at least 1% of the items before
        -: 1445:             * crawling. */
        -: 1446:            /* FIXME: Configurable? */
     9959: 1447:            uint64_t low_watermark = (possible_reclaims / 100) + 1;
     9959: 1448:            rel_time_t since_run = current_time - s->end_time;
        -: 1449:            /* Don't bother if the payoff is too low. */
   607502: 1450:            for (x = 0; x < 60; x++) {
   597543: 1451:                available_reclaims += s->histo[x];
   597543: 1452:                if (available_reclaims > low_watermark) {
    #####: 1453:                    if (next_crawl_wait[i] < (x * 60)) {
    #####: 1454:                        next_crawl_wait[i] += 60;
    #####: 1455:                    } else if (next_crawl_wait[i] >= 60) {
    #####: 1456:                        next_crawl_wait[i] -= 60;
        -: 1457:                    }
        -: 1458:                    break;
        -: 1459:                }
        -: 1460:            }
        -: 1461:
     9959: 1462:            if (available_reclaims == 0) {
     9959: 1463:                next_crawl_wait[i] += 60;
        -: 1464:            }
        -: 1465:
     9959: 1466:            if (next_crawl_wait[i] > MAX_MAINTCRAWL_WAIT) {
    #####: 1467:                next_crawl_wait[i] = MAX_MAINTCRAWL_WAIT;
        -: 1468:            }
        -: 1469:
     9959: 1470:            next_crawls[i] = current_time + next_crawl_wait[i] + 5;
     9959: 1471:            switch (GET_LRU(i)) {
     2471: 1472:                case HOT_LRU:
     2471: 1473:                    lru_name = "hot";
     2471: 1474:                    break;
     2496: 1475:                case WARM_LRU:
     2496: 1476:                    lru_name = "warm";
     2496: 1477:                    break;
     2496: 1478:                case COLD_LRU:
     2496: 1479:                    lru_name = "cold";
     2496: 1480:                    break;
     2496: 1481:                case TEMP_LRU:
     2496: 1482:                    lru_name = "temp";
     2496: 1483:                    break;
        -: 1484:            }
    9959*: 1485:            LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_CRAWLER_STATUS, NULL,
        -: 1486:                    CLEAR_LRU(i),
        -: 1487:                    lru_name,
        -: 1488:                    (unsigned long long)low_watermark,
        -: 1489:                    (unsigned long long)available_reclaims,
        -: 1490:                    (unsigned int)since_run,
        -: 1491:                    next_crawls[i] - current_time,
        -: 1492:                    s->end_time - s->start_time,
        -: 1493:                    s->seen,
        -: 1494:                    s->reclaimed);
        -: 1495:            // Got our calculation, avoid running until next actual run.
     9959: 1496:            s->run_complete = false;
     9959: 1497:            pthread_mutex_unlock(&cdata->lock);
        -: 1498:        }
    47699: 1499:        if (current_time > next_crawls[i]) {
    22185: 1500:            pthread_mutex_lock(&lru_locks[i]);
    22185: 1501:            if (sizes[i] > tocrawl_limit) {
    #####: 1502:                tocrawl_limit = sizes[i];
        -: 1503:            }
    22185: 1504:            pthread_mutex_unlock(&lru_locks[i]);
    22185: 1505:            todo[i] = 1;
    22185: 1506:            do_run = true;
    22185: 1507:            next_crawls[i] = current_time + 5; // minimum retry wait.
        -: 1508:        }
        -: 1509:    }
      187: 1510:    if (do_run) {
      87*: 1511:        if (settings.lru_crawler_tocrawl && settings.lru_crawler_tocrawl < tocrawl_limit) {
    #####: 1512:            tocrawl_limit = settings.lru_crawler_tocrawl;
        -: 1513:        }
       87: 1514:        lru_crawler_start(todo, tocrawl_limit, CRAWLER_AUTOEXPIRE, cdata, NULL, 0);
        -: 1515:    }
      187: 1516:}
------------------
        -: 1517:
        -: 1518:slab_automove_reg_t slab_automove_default = {
        -: 1519:    .init = slab_automove_init,
        -: 1520:    .free = slab_automove_free,
        -: 1521:    .run = slab_automove_run
        -: 1522:};
        -: 1523:#ifdef EXTSTORE
        -: 1524:slab_automove_reg_t slab_automove_extstore = {
        -: 1525:    .init = slab_automove_extstore_init,
        -: 1526:    .free = slab_automove_extstore_free,
        -: 1527:    .run = slab_automove_extstore_run
        -: 1528:};
        -: 1529:#endif
        -: 1530:static pthread_t lru_maintainer_tid;
        -: 1531:
        -: 1532:#define MAX_LRU_MAINTAINER_SLEEP 1000000
        -: 1533:#define MIN_LRU_MAINTAINER_SLEEP 1000
        -: 1534:
      348: 1535:static void *lru_maintainer_thread(void *arg) {
      348: 1536:    slab_automove_reg_t *sam = &slab_automove_default;
        -: 1537:#ifdef EXTSTORE
        -: 1538:    void *storage = arg;
        -: 1539:    if (storage != NULL)
        -: 1540:        sam = &slab_automove_extstore;
        -: 1541:#endif
      348: 1542:    int i;
      348: 1543:    useconds_t to_sleep = MIN_LRU_MAINTAINER_SLEEP;
      348: 1544:    useconds_t last_sleep = MIN_LRU_MAINTAINER_SLEEP;
      348: 1545:    rel_time_t last_crawler_check = 0;
      348: 1546:    rel_time_t last_automove_check = 0;
      348: 1547:    useconds_t next_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
      348: 1548:    useconds_t backoff_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
      348: 1549:    struct crawler_expired_data *cdata =
      348: 1550:        calloc(1, sizeof(struct crawler_expired_data));
      348: 1551:    if (cdata == NULL) {
    #####: 1552:        fprintf(stderr, "Failed to allocate crawler data for LRU maintainer thread\n");
    #####: 1553:        abort();
        -: 1554:    }
      348: 1555:    pthread_mutex_init(&cdata->lock, NULL);
      348: 1556:    cdata->crawl_complete = true; // kick off the crawler.
      348: 1557:    logger *l = logger_create();
      348: 1558:    if (l == NULL) {
    #####: 1559:        fprintf(stderr, "Failed to allocate logger for LRU maintainer thread\n");
    #####: 1560:        abort();
        -: 1561:    }
        -: 1562:
      348: 1563:    double last_ratio = settings.slab_automove_ratio;
      348: 1564:    void *am = sam->init(&settings);
        -: 1565:
      348: 1566:    pthread_mutex_lock(&lru_maintainer_lock);
      348: 1567:    if (settings.verbose > 2)
    #####: 1568:        fprintf(stderr, "Starting LRU maintainer background thread\n");
    25352: 1569:    while (do_run_lru_maintainer_thread) {
    25352: 1570:        pthread_mutex_unlock(&lru_maintainer_lock);
    25352: 1571:        if (to_sleep)
    23344: 1572:            usleep(to_sleep);
    25008: 1573:        pthread_mutex_lock(&lru_maintainer_lock);
        -: 1574:        /* A sleep of zero counts as a minimum of a 1ms wait */
    25008: 1575:        last_sleep = to_sleep > 1000 ? to_sleep : 1000;
    25008: 1576:        to_sleep = MAX_LRU_MAINTAINER_SLEEP;
        -: 1577:
    25008: 1578:        STATS_LOCK();
    25008: 1579:        stats.lru_maintainer_juggles++;
    25008: 1580:        STATS_UNLOCK();
        -: 1581:
        -: 1582:        /* Each slab class gets its own sleep to avoid hammering locks */
  1600512: 1583:        for (i = POWER_SMALLEST; i < MAX_NUMBER_OF_SLAB_CLASSES; i++) {
  1575504: 1584:            next_juggles[i] = next_juggles[i] > last_sleep ? next_juggles[i] - last_sleep : 0;
        -: 1585:
  1575504: 1586:            if (next_juggles[i] > 0) {
        -: 1587:                // Sleep the thread just for the minimum amount (or not at all)
   681056: 1588:                if (next_juggles[i] < to_sleep)
    13924: 1589:                    to_sleep = next_juggles[i];
   681056: 1590:                continue;
        -: 1591:            }
        -: 1592:
   894448: 1593:            int did_moves = lru_maintainer_juggle(i);
   894448: 1594:            if (did_moves == 0) {
   891276: 1595:                if (backoff_juggles[i] != 0) {
   867476: 1596:                    backoff_juggles[i] += backoff_juggles[i] / 8;
        -: 1597:                } else {
    23800: 1598:                    backoff_juggles[i] = MIN_LRU_MAINTAINER_SLEEP;
        -: 1599:                }
   891276: 1600:                if (backoff_juggles[i] > MAX_LRU_MAINTAINER_SLEEP)
     1228: 1601:                    backoff_juggles[i] = MAX_LRU_MAINTAINER_SLEEP;
     3172: 1602:            } else if (backoff_juggles[i] > 0) {
     3040: 1603:                backoff_juggles[i] /= 2;
     3040: 1604:                if (backoff_juggles[i] < MIN_LRU_MAINTAINER_SLEEP) {
     1876: 1605:                    backoff_juggles[i] = 0;
        -: 1606:                }
        -: 1607:            }
   894448: 1608:            next_juggles[i] = backoff_juggles[i];
   894448: 1609:            if (next_juggles[i] < to_sleep)
    23504: 1610:                to_sleep = next_juggles[i];
        -: 1611:        }
        -: 1612:
        -: 1613:        /* Minimize the sleep if we had async LRU bumps to process */
    25008: 1614:        if (settings.lru_segmented && lru_maintainer_bumps() && to_sleep > 1000) {
       20: 1615:            to_sleep = 1000;
        -: 1616:        }
        -: 1617:
        -: 1618:        /* Once per second at most */
    25008: 1619:        if (settings.lru_crawler && last_crawler_check != current_time) {
      752: 1620:            lru_maintainer_crawler_check(cdata, l);
      748: 1621:            last_crawler_check = current_time;
        -: 1622:        }
        -: 1623:
    25004: 1624:        if (settings.slab_automove == 1 && last_automove_check != current_time) {
     1112: 1625:            if (last_ratio != settings.slab_automove_ratio) {
    #####: 1626:                sam->free(am);
    #####: 1627:                am = sam->init(&settings);
    #####: 1628:                last_ratio = settings.slab_automove_ratio;
        -: 1629:            }
     1112: 1630:            int src, dst;
     1112: 1631:            sam->run(am, &src, &dst);
     1112: 1632:            if (src != -1 && dst != -1) {
      364: 1633:                slabs_reassign(src, dst);
     364*: 1634:                LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_SLAB_MOVE, NULL,
        -: 1635:                        src, dst);
        -: 1636:            }
        -: 1637:            // dst == 0 means reclaim to global pool, be more aggressive
     1112: 1638:            if (dst != 0) {
      748: 1639:                last_automove_check = current_time;
        -: 1640:            } else if (dst == 0) {
        -: 1641:                // also ensure we minimize the thread sleep
        -: 1642:                to_sleep = 1000;
        -: 1643:            }
        -: 1644:        }
        -: 1645:    }
    #####: 1646:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1647:    sam->free(am);
        -: 1648:    // LRU crawler *must* be stopped.
    #####: 1649:    free(cdata);
    #####: 1650:    if (settings.verbose > 2)
    #####: 1651:        fprintf(stderr, "LRU maintainer thread stopping\n");
        -: 1652:
    #####: 1653:    return NULL;
        -: 1654:}
------------------
lru_maintainer_thread:
       87: 1535:static void *lru_maintainer_thread(void *arg) {
       87: 1536:    slab_automove_reg_t *sam = &slab_automove_default;
        -: 1537:#ifdef EXTSTORE
        -: 1538:    void *storage = arg;
        -: 1539:    if (storage != NULL)
        -: 1540:        sam = &slab_automove_extstore;
        -: 1541:#endif
       87: 1542:    int i;
       87: 1543:    useconds_t to_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1544:    useconds_t last_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1545:    rel_time_t last_crawler_check = 0;
       87: 1546:    rel_time_t last_automove_check = 0;
       87: 1547:    useconds_t next_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1548:    useconds_t backoff_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1549:    struct crawler_expired_data *cdata =
       87: 1550:        calloc(1, sizeof(struct crawler_expired_data));
       87: 1551:    if (cdata == NULL) {
    #####: 1552:        fprintf(stderr, "Failed to allocate crawler data for LRU maintainer thread\n");
    #####: 1553:        abort();
        -: 1554:    }
       87: 1555:    pthread_mutex_init(&cdata->lock, NULL);
       87: 1556:    cdata->crawl_complete = true; // kick off the crawler.
       87: 1557:    logger *l = logger_create();
       87: 1558:    if (l == NULL) {
    #####: 1559:        fprintf(stderr, "Failed to allocate logger for LRU maintainer thread\n");
    #####: 1560:        abort();
        -: 1561:    }
        -: 1562:
       87: 1563:    double last_ratio = settings.slab_automove_ratio;
       87: 1564:    void *am = sam->init(&settings);
        -: 1565:
       87: 1566:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1567:    if (settings.verbose > 2)
    #####: 1568:        fprintf(stderr, "Starting LRU maintainer background thread\n");
     6338: 1569:    while (do_run_lru_maintainer_thread) {
     6338: 1570:        pthread_mutex_unlock(&lru_maintainer_lock);
     6338: 1571:        if (to_sleep)
     5836: 1572:            usleep(to_sleep);
     6252: 1573:        pthread_mutex_lock(&lru_maintainer_lock);
        -: 1574:        /* A sleep of zero counts as a minimum of a 1ms wait */
     6252: 1575:        last_sleep = to_sleep > 1000 ? to_sleep : 1000;
     6252: 1576:        to_sleep = MAX_LRU_MAINTAINER_SLEEP;
        -: 1577:
     6252: 1578:        STATS_LOCK();
     6252: 1579:        stats.lru_maintainer_juggles++;
     6252: 1580:        STATS_UNLOCK();
        -: 1581:
        -: 1582:        /* Each slab class gets its own sleep to avoid hammering locks */
   400128: 1583:        for (i = POWER_SMALLEST; i < MAX_NUMBER_OF_SLAB_CLASSES; i++) {
   393876: 1584:            next_juggles[i] = next_juggles[i] > last_sleep ? next_juggles[i] - last_sleep : 0;
        -: 1585:
   393876: 1586:            if (next_juggles[i] > 0) {
        -: 1587:                // Sleep the thread just for the minimum amount (or not at all)
   170264: 1588:                if (next_juggles[i] < to_sleep)
     3481: 1589:                    to_sleep = next_juggles[i];
   170264: 1590:                continue;
        -: 1591:            }
        -: 1592:
   223612: 1593:            int did_moves = lru_maintainer_juggle(i);
   223612: 1594:            if (did_moves == 0) {
   222819: 1595:                if (backoff_juggles[i] != 0) {
   216869: 1596:                    backoff_juggles[i] += backoff_juggles[i] / 8;
        -: 1597:                } else {
     5950: 1598:                    backoff_juggles[i] = MIN_LRU_MAINTAINER_SLEEP;
        -: 1599:                }
   222819: 1600:                if (backoff_juggles[i] > MAX_LRU_MAINTAINER_SLEEP)
      307: 1601:                    backoff_juggles[i] = MAX_LRU_MAINTAINER_SLEEP;
      793: 1602:            } else if (backoff_juggles[i] > 0) {
      760: 1603:                backoff_juggles[i] /= 2;
      760: 1604:                if (backoff_juggles[i] < MIN_LRU_MAINTAINER_SLEEP) {
      469: 1605:                    backoff_juggles[i] = 0;
        -: 1606:                }
        -: 1607:            }
   223612: 1608:            next_juggles[i] = backoff_juggles[i];
   223612: 1609:            if (next_juggles[i] < to_sleep)
     5876: 1610:                to_sleep = next_juggles[i];
        -: 1611:        }
        -: 1612:
        -: 1613:        /* Minimize the sleep if we had async LRU bumps to process */
     6252: 1614:        if (settings.lru_segmented && lru_maintainer_bumps() && to_sleep > 1000) {
        5: 1615:            to_sleep = 1000;
        -: 1616:        }
        -: 1617:
        -: 1618:        /* Once per second at most */
     6252: 1619:        if (settings.lru_crawler && last_crawler_check != current_time) {
      188: 1620:            lru_maintainer_crawler_check(cdata, l);
      187: 1621:            last_crawler_check = current_time;
        -: 1622:        }
        -: 1623:
     6251: 1624:        if (settings.slab_automove == 1 && last_automove_check != current_time) {
      278: 1625:            if (last_ratio != settings.slab_automove_ratio) {
    #####: 1626:                sam->free(am);
    #####: 1627:                am = sam->init(&settings);
    #####: 1628:                last_ratio = settings.slab_automove_ratio;
        -: 1629:            }
      278: 1630:            int src, dst;
      278: 1631:            sam->run(am, &src, &dst);
      278: 1632:            if (src != -1 && dst != -1) {
       91: 1633:                slabs_reassign(src, dst);
      91*: 1634:                LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_SLAB_MOVE, NULL,
        -: 1635:                        src, dst);
        -: 1636:            }
        -: 1637:            // dst == 0 means reclaim to global pool, be more aggressive
      278: 1638:            if (dst != 0) {
      187: 1639:                last_automove_check = current_time;
        -: 1640:            } else if (dst == 0) {
        -: 1641:                // also ensure we minimize the thread sleep
        -: 1642:                to_sleep = 1000;
        -: 1643:            }
        -: 1644:        }
        -: 1645:    }
    #####: 1646:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1647:    sam->free(am);
        -: 1648:    // LRU crawler *must* be stopped.
    #####: 1649:    free(cdata);
    #####: 1650:    if (settings.verbose > 2)
    #####: 1651:        fprintf(stderr, "LRU maintainer thread stopping\n");
        -: 1652:
    #####: 1653:    return NULL;
        -: 1654:}
------------------
lru_maintainer_thread:
       87: 1535:static void *lru_maintainer_thread(void *arg) {
       87: 1536:    slab_automove_reg_t *sam = &slab_automove_default;
        -: 1537:#ifdef EXTSTORE
        -: 1538:    void *storage = arg;
        -: 1539:    if (storage != NULL)
        -: 1540:        sam = &slab_automove_extstore;
        -: 1541:#endif
       87: 1542:    int i;
       87: 1543:    useconds_t to_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1544:    useconds_t last_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1545:    rel_time_t last_crawler_check = 0;
       87: 1546:    rel_time_t last_automove_check = 0;
       87: 1547:    useconds_t next_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1548:    useconds_t backoff_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1549:    struct crawler_expired_data *cdata =
       87: 1550:        calloc(1, sizeof(struct crawler_expired_data));
       87: 1551:    if (cdata == NULL) {
    #####: 1552:        fprintf(stderr, "Failed to allocate crawler data for LRU maintainer thread\n");
    #####: 1553:        abort();
        -: 1554:    }
       87: 1555:    pthread_mutex_init(&cdata->lock, NULL);
       87: 1556:    cdata->crawl_complete = true; // kick off the crawler.
       87: 1557:    logger *l = logger_create();
       87: 1558:    if (l == NULL) {
    #####: 1559:        fprintf(stderr, "Failed to allocate logger for LRU maintainer thread\n");
    #####: 1560:        abort();
        -: 1561:    }
        -: 1562:
       87: 1563:    double last_ratio = settings.slab_automove_ratio;
       87: 1564:    void *am = sam->init(&settings);
        -: 1565:
       87: 1566:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1567:    if (settings.verbose > 2)
    #####: 1568:        fprintf(stderr, "Starting LRU maintainer background thread\n");
     6338: 1569:    while (do_run_lru_maintainer_thread) {
     6338: 1570:        pthread_mutex_unlock(&lru_maintainer_lock);
     6338: 1571:        if (to_sleep)
     5836: 1572:            usleep(to_sleep);
     6252: 1573:        pthread_mutex_lock(&lru_maintainer_lock);
        -: 1574:        /* A sleep of zero counts as a minimum of a 1ms wait */
     6252: 1575:        last_sleep = to_sleep > 1000 ? to_sleep : 1000;
     6252: 1576:        to_sleep = MAX_LRU_MAINTAINER_SLEEP;
        -: 1577:
     6252: 1578:        STATS_LOCK();
     6252: 1579:        stats.lru_maintainer_juggles++;
     6252: 1580:        STATS_UNLOCK();
        -: 1581:
        -: 1582:        /* Each slab class gets its own sleep to avoid hammering locks */
   400128: 1583:        for (i = POWER_SMALLEST; i < MAX_NUMBER_OF_SLAB_CLASSES; i++) {
   393876: 1584:            next_juggles[i] = next_juggles[i] > last_sleep ? next_juggles[i] - last_sleep : 0;
        -: 1585:
   393876: 1586:            if (next_juggles[i] > 0) {
        -: 1587:                // Sleep the thread just for the minimum amount (or not at all)
   170264: 1588:                if (next_juggles[i] < to_sleep)
     3481: 1589:                    to_sleep = next_juggles[i];
   170264: 1590:                continue;
        -: 1591:            }
        -: 1592:
   223612: 1593:            int did_moves = lru_maintainer_juggle(i);
   223612: 1594:            if (did_moves == 0) {
   222819: 1595:                if (backoff_juggles[i] != 0) {
   216869: 1596:                    backoff_juggles[i] += backoff_juggles[i] / 8;
        -: 1597:                } else {
     5950: 1598:                    backoff_juggles[i] = MIN_LRU_MAINTAINER_SLEEP;
        -: 1599:                }
   222819: 1600:                if (backoff_juggles[i] > MAX_LRU_MAINTAINER_SLEEP)
      307: 1601:                    backoff_juggles[i] = MAX_LRU_MAINTAINER_SLEEP;
      793: 1602:            } else if (backoff_juggles[i] > 0) {
      760: 1603:                backoff_juggles[i] /= 2;
      760: 1604:                if (backoff_juggles[i] < MIN_LRU_MAINTAINER_SLEEP) {
      469: 1605:                    backoff_juggles[i] = 0;
        -: 1606:                }
        -: 1607:            }
   223612: 1608:            next_juggles[i] = backoff_juggles[i];
   223612: 1609:            if (next_juggles[i] < to_sleep)
     5876: 1610:                to_sleep = next_juggles[i];
        -: 1611:        }
        -: 1612:
        -: 1613:        /* Minimize the sleep if we had async LRU bumps to process */
     6252: 1614:        if (settings.lru_segmented && lru_maintainer_bumps() && to_sleep > 1000) {
        5: 1615:            to_sleep = 1000;
        -: 1616:        }
        -: 1617:
        -: 1618:        /* Once per second at most */
     6252: 1619:        if (settings.lru_crawler && last_crawler_check != current_time) {
      188: 1620:            lru_maintainer_crawler_check(cdata, l);
      187: 1621:            last_crawler_check = current_time;
        -: 1622:        }
        -: 1623:
     6251: 1624:        if (settings.slab_automove == 1 && last_automove_check != current_time) {
      278: 1625:            if (last_ratio != settings.slab_automove_ratio) {
    #####: 1626:                sam->free(am);
    #####: 1627:                am = sam->init(&settings);
    #####: 1628:                last_ratio = settings.slab_automove_ratio;
        -: 1629:            }
      278: 1630:            int src, dst;
      278: 1631:            sam->run(am, &src, &dst);
      278: 1632:            if (src != -1 && dst != -1) {
       91: 1633:                slabs_reassign(src, dst);
      91*: 1634:                LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_SLAB_MOVE, NULL,
        -: 1635:                        src, dst);
        -: 1636:            }
        -: 1637:            // dst == 0 means reclaim to global pool, be more aggressive
      278: 1638:            if (dst != 0) {
      187: 1639:                last_automove_check = current_time;
        -: 1640:            } else if (dst == 0) {
        -: 1641:                // also ensure we minimize the thread sleep
        -: 1642:                to_sleep = 1000;
        -: 1643:            }
        -: 1644:        }
        -: 1645:    }
    #####: 1646:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1647:    sam->free(am);
        -: 1648:    // LRU crawler *must* be stopped.
    #####: 1649:    free(cdata);
    #####: 1650:    if (settings.verbose > 2)
    #####: 1651:        fprintf(stderr, "LRU maintainer thread stopping\n");
        -: 1652:
    #####: 1653:    return NULL;
        -: 1654:}
------------------
lru_maintainer_thread:
       87: 1535:static void *lru_maintainer_thread(void *arg) {
       87: 1536:    slab_automove_reg_t *sam = &slab_automove_default;
        -: 1537:#ifdef EXTSTORE
        -: 1538:    void *storage = arg;
        -: 1539:    if (storage != NULL)
        -: 1540:        sam = &slab_automove_extstore;
        -: 1541:#endif
       87: 1542:    int i;
       87: 1543:    useconds_t to_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1544:    useconds_t last_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1545:    rel_time_t last_crawler_check = 0;
       87: 1546:    rel_time_t last_automove_check = 0;
       87: 1547:    useconds_t next_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1548:    useconds_t backoff_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1549:    struct crawler_expired_data *cdata =
       87: 1550:        calloc(1, sizeof(struct crawler_expired_data));
       87: 1551:    if (cdata == NULL) {
    #####: 1552:        fprintf(stderr, "Failed to allocate crawler data for LRU maintainer thread\n");
    #####: 1553:        abort();
        -: 1554:    }
       87: 1555:    pthread_mutex_init(&cdata->lock, NULL);
       87: 1556:    cdata->crawl_complete = true; // kick off the crawler.
       87: 1557:    logger *l = logger_create();
       87: 1558:    if (l == NULL) {
    #####: 1559:        fprintf(stderr, "Failed to allocate logger for LRU maintainer thread\n");
    #####: 1560:        abort();
        -: 1561:    }
        -: 1562:
       87: 1563:    double last_ratio = settings.slab_automove_ratio;
       87: 1564:    void *am = sam->init(&settings);
        -: 1565:
       87: 1566:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1567:    if (settings.verbose > 2)
    #####: 1568:        fprintf(stderr, "Starting LRU maintainer background thread\n");
     6338: 1569:    while (do_run_lru_maintainer_thread) {
     6338: 1570:        pthread_mutex_unlock(&lru_maintainer_lock);
     6338: 1571:        if (to_sleep)
     5836: 1572:            usleep(to_sleep);
     6252: 1573:        pthread_mutex_lock(&lru_maintainer_lock);
        -: 1574:        /* A sleep of zero counts as a minimum of a 1ms wait */
     6252: 1575:        last_sleep = to_sleep > 1000 ? to_sleep : 1000;
     6252: 1576:        to_sleep = MAX_LRU_MAINTAINER_SLEEP;
        -: 1577:
     6252: 1578:        STATS_LOCK();
     6252: 1579:        stats.lru_maintainer_juggles++;
     6252: 1580:        STATS_UNLOCK();
        -: 1581:
        -: 1582:        /* Each slab class gets its own sleep to avoid hammering locks */
   400128: 1583:        for (i = POWER_SMALLEST; i < MAX_NUMBER_OF_SLAB_CLASSES; i++) {
   393876: 1584:            next_juggles[i] = next_juggles[i] > last_sleep ? next_juggles[i] - last_sleep : 0;
        -: 1585:
   393876: 1586:            if (next_juggles[i] > 0) {
        -: 1587:                // Sleep the thread just for the minimum amount (or not at all)
   170264: 1588:                if (next_juggles[i] < to_sleep)
     3481: 1589:                    to_sleep = next_juggles[i];
   170264: 1590:                continue;
        -: 1591:            }
        -: 1592:
   223612: 1593:            int did_moves = lru_maintainer_juggle(i);
   223612: 1594:            if (did_moves == 0) {
   222819: 1595:                if (backoff_juggles[i] != 0) {
   216869: 1596:                    backoff_juggles[i] += backoff_juggles[i] / 8;
        -: 1597:                } else {
     5950: 1598:                    backoff_juggles[i] = MIN_LRU_MAINTAINER_SLEEP;
        -: 1599:                }
   222819: 1600:                if (backoff_juggles[i] > MAX_LRU_MAINTAINER_SLEEP)
      307: 1601:                    backoff_juggles[i] = MAX_LRU_MAINTAINER_SLEEP;
      793: 1602:            } else if (backoff_juggles[i] > 0) {
      760: 1603:                backoff_juggles[i] /= 2;
      760: 1604:                if (backoff_juggles[i] < MIN_LRU_MAINTAINER_SLEEP) {
      469: 1605:                    backoff_juggles[i] = 0;
        -: 1606:                }
        -: 1607:            }
   223612: 1608:            next_juggles[i] = backoff_juggles[i];
   223612: 1609:            if (next_juggles[i] < to_sleep)
     5876: 1610:                to_sleep = next_juggles[i];
        -: 1611:        }
        -: 1612:
        -: 1613:        /* Minimize the sleep if we had async LRU bumps to process */
     6252: 1614:        if (settings.lru_segmented && lru_maintainer_bumps() && to_sleep > 1000) {
        5: 1615:            to_sleep = 1000;
        -: 1616:        }
        -: 1617:
        -: 1618:        /* Once per second at most */
     6252: 1619:        if (settings.lru_crawler && last_crawler_check != current_time) {
      188: 1620:            lru_maintainer_crawler_check(cdata, l);
      187: 1621:            last_crawler_check = current_time;
        -: 1622:        }
        -: 1623:
     6251: 1624:        if (settings.slab_automove == 1 && last_automove_check != current_time) {
      278: 1625:            if (last_ratio != settings.slab_automove_ratio) {
    #####: 1626:                sam->free(am);
    #####: 1627:                am = sam->init(&settings);
    #####: 1628:                last_ratio = settings.slab_automove_ratio;
        -: 1629:            }
      278: 1630:            int src, dst;
      278: 1631:            sam->run(am, &src, &dst);
      278: 1632:            if (src != -1 && dst != -1) {
       91: 1633:                slabs_reassign(src, dst);
      91*: 1634:                LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_SLAB_MOVE, NULL,
        -: 1635:                        src, dst);
        -: 1636:            }
        -: 1637:            // dst == 0 means reclaim to global pool, be more aggressive
      278: 1638:            if (dst != 0) {
      187: 1639:                last_automove_check = current_time;
        -: 1640:            } else if (dst == 0) {
        -: 1641:                // also ensure we minimize the thread sleep
        -: 1642:                to_sleep = 1000;
        -: 1643:            }
        -: 1644:        }
        -: 1645:    }
    #####: 1646:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1647:    sam->free(am);
        -: 1648:    // LRU crawler *must* be stopped.
    #####: 1649:    free(cdata);
    #####: 1650:    if (settings.verbose > 2)
    #####: 1651:        fprintf(stderr, "LRU maintainer thread stopping\n");
        -: 1652:
    #####: 1653:    return NULL;
        -: 1654:}
------------------
lru_maintainer_thread:
       87: 1535:static void *lru_maintainer_thread(void *arg) {
       87: 1536:    slab_automove_reg_t *sam = &slab_automove_default;
        -: 1537:#ifdef EXTSTORE
        -: 1538:    void *storage = arg;
        -: 1539:    if (storage != NULL)
        -: 1540:        sam = &slab_automove_extstore;
        -: 1541:#endif
       87: 1542:    int i;
       87: 1543:    useconds_t to_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1544:    useconds_t last_sleep = MIN_LRU_MAINTAINER_SLEEP;
       87: 1545:    rel_time_t last_crawler_check = 0;
       87: 1546:    rel_time_t last_automove_check = 0;
       87: 1547:    useconds_t next_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1548:    useconds_t backoff_juggles[MAX_NUMBER_OF_SLAB_CLASSES] = {0};
       87: 1549:    struct crawler_expired_data *cdata =
       87: 1550:        calloc(1, sizeof(struct crawler_expired_data));
       87: 1551:    if (cdata == NULL) {
    #####: 1552:        fprintf(stderr, "Failed to allocate crawler data for LRU maintainer thread\n");
    #####: 1553:        abort();
        -: 1554:    }
       87: 1555:    pthread_mutex_init(&cdata->lock, NULL);
       87: 1556:    cdata->crawl_complete = true; // kick off the crawler.
       87: 1557:    logger *l = logger_create();
       87: 1558:    if (l == NULL) {
    #####: 1559:        fprintf(stderr, "Failed to allocate logger for LRU maintainer thread\n");
    #####: 1560:        abort();
        -: 1561:    }
        -: 1562:
       87: 1563:    double last_ratio = settings.slab_automove_ratio;
       87: 1564:    void *am = sam->init(&settings);
        -: 1565:
       87: 1566:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1567:    if (settings.verbose > 2)
    #####: 1568:        fprintf(stderr, "Starting LRU maintainer background thread\n");
     6338: 1569:    while (do_run_lru_maintainer_thread) {
     6338: 1570:        pthread_mutex_unlock(&lru_maintainer_lock);
     6338: 1571:        if (to_sleep)
     5836: 1572:            usleep(to_sleep);
     6252: 1573:        pthread_mutex_lock(&lru_maintainer_lock);
        -: 1574:        /* A sleep of zero counts as a minimum of a 1ms wait */
     6252: 1575:        last_sleep = to_sleep > 1000 ? to_sleep : 1000;
     6252: 1576:        to_sleep = MAX_LRU_MAINTAINER_SLEEP;
        -: 1577:
     6252: 1578:        STATS_LOCK();
     6252: 1579:        stats.lru_maintainer_juggles++;
     6252: 1580:        STATS_UNLOCK();
        -: 1581:
        -: 1582:        /* Each slab class gets its own sleep to avoid hammering locks */
   400128: 1583:        for (i = POWER_SMALLEST; i < MAX_NUMBER_OF_SLAB_CLASSES; i++) {
   393876: 1584:            next_juggles[i] = next_juggles[i] > last_sleep ? next_juggles[i] - last_sleep : 0;
        -: 1585:
   393876: 1586:            if (next_juggles[i] > 0) {
        -: 1587:                // Sleep the thread just for the minimum amount (or not at all)
   170264: 1588:                if (next_juggles[i] < to_sleep)
     3481: 1589:                    to_sleep = next_juggles[i];
   170264: 1590:                continue;
        -: 1591:            }
        -: 1592:
   223612: 1593:            int did_moves = lru_maintainer_juggle(i);
   223612: 1594:            if (did_moves == 0) {
   222819: 1595:                if (backoff_juggles[i] != 0) {
   216869: 1596:                    backoff_juggles[i] += backoff_juggles[i] / 8;
        -: 1597:                } else {
     5950: 1598:                    backoff_juggles[i] = MIN_LRU_MAINTAINER_SLEEP;
        -: 1599:                }
   222819: 1600:                if (backoff_juggles[i] > MAX_LRU_MAINTAINER_SLEEP)
      307: 1601:                    backoff_juggles[i] = MAX_LRU_MAINTAINER_SLEEP;
      793: 1602:            } else if (backoff_juggles[i] > 0) {
      760: 1603:                backoff_juggles[i] /= 2;
      760: 1604:                if (backoff_juggles[i] < MIN_LRU_MAINTAINER_SLEEP) {
      469: 1605:                    backoff_juggles[i] = 0;
        -: 1606:                }
        -: 1607:            }
   223612: 1608:            next_juggles[i] = backoff_juggles[i];
   223612: 1609:            if (next_juggles[i] < to_sleep)
     5876: 1610:                to_sleep = next_juggles[i];
        -: 1611:        }
        -: 1612:
        -: 1613:        /* Minimize the sleep if we had async LRU bumps to process */
     6252: 1614:        if (settings.lru_segmented && lru_maintainer_bumps() && to_sleep > 1000) {
        5: 1615:            to_sleep = 1000;
        -: 1616:        }
        -: 1617:
        -: 1618:        /* Once per second at most */
     6252: 1619:        if (settings.lru_crawler && last_crawler_check != current_time) {
      188: 1620:            lru_maintainer_crawler_check(cdata, l);
      187: 1621:            last_crawler_check = current_time;
        -: 1622:        }
        -: 1623:
     6251: 1624:        if (settings.slab_automove == 1 && last_automove_check != current_time) {
      278: 1625:            if (last_ratio != settings.slab_automove_ratio) {
    #####: 1626:                sam->free(am);
    #####: 1627:                am = sam->init(&settings);
    #####: 1628:                last_ratio = settings.slab_automove_ratio;
        -: 1629:            }
      278: 1630:            int src, dst;
      278: 1631:            sam->run(am, &src, &dst);
      278: 1632:            if (src != -1 && dst != -1) {
       91: 1633:                slabs_reassign(src, dst);
      91*: 1634:                LOGGER_LOG(l, LOG_SYSEVENTS, LOGGER_SLAB_MOVE, NULL,
        -: 1635:                        src, dst);
        -: 1636:            }
        -: 1637:            // dst == 0 means reclaim to global pool, be more aggressive
      278: 1638:            if (dst != 0) {
      187: 1639:                last_automove_check = current_time;
        -: 1640:            } else if (dst == 0) {
        -: 1641:                // also ensure we minimize the thread sleep
        -: 1642:                to_sleep = 1000;
        -: 1643:            }
        -: 1644:        }
        -: 1645:    }
    #####: 1646:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1647:    sam->free(am);
        -: 1648:    // LRU crawler *must* be stopped.
    #####: 1649:    free(cdata);
    #####: 1650:    if (settings.verbose > 2)
    #####: 1651:        fprintf(stderr, "LRU maintainer thread stopping\n");
        -: 1652:
    #####: 1653:    return NULL;
        -: 1654:}
------------------
        -: 1655:
    #####: 1656:int stop_lru_maintainer_thread(void) {
    #####: 1657:    int ret;
    #####: 1658:    pthread_mutex_lock(&lru_maintainer_lock);
        -: 1659:    /* LRU thread is a sleep loop, will die on its own */
    #####: 1660:    do_run_lru_maintainer_thread = 0;
    #####: 1661:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1662:    if ((ret = pthread_join(lru_maintainer_tid, NULL)) != 0) {
    #####: 1663:        fprintf(stderr, "Failed to stop LRU maintainer thread: %s\n", strerror(ret));
    #####: 1664:        return -1;
        -: 1665:    }
    #####: 1666:    settings.lru_maintainer_thread = false;
    #####: 1667:    return 0;
        -: 1668:}
------------------
stop_lru_maintainer_thread:
    #####: 1656:int stop_lru_maintainer_thread(void) {
    #####: 1657:    int ret;
    #####: 1658:    pthread_mutex_lock(&lru_maintainer_lock);
        -: 1659:    /* LRU thread is a sleep loop, will die on its own */
    #####: 1660:    do_run_lru_maintainer_thread = 0;
    #####: 1661:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1662:    if ((ret = pthread_join(lru_maintainer_tid, NULL)) != 0) {
    #####: 1663:        fprintf(stderr, "Failed to stop LRU maintainer thread: %s\n", strerror(ret));
    #####: 1664:        return -1;
        -: 1665:    }
    #####: 1666:    settings.lru_maintainer_thread = false;
    #####: 1667:    return 0;
        -: 1668:}
------------------
stop_lru_maintainer_thread:
    #####: 1656:int stop_lru_maintainer_thread(void) {
    #####: 1657:    int ret;
    #####: 1658:    pthread_mutex_lock(&lru_maintainer_lock);
        -: 1659:    /* LRU thread is a sleep loop, will die on its own */
    #####: 1660:    do_run_lru_maintainer_thread = 0;
    #####: 1661:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1662:    if ((ret = pthread_join(lru_maintainer_tid, NULL)) != 0) {
    #####: 1663:        fprintf(stderr, "Failed to stop LRU maintainer thread: %s\n", strerror(ret));
    #####: 1664:        return -1;
        -: 1665:    }
    #####: 1666:    settings.lru_maintainer_thread = false;
    #####: 1667:    return 0;
        -: 1668:}
------------------
stop_lru_maintainer_thread:
    #####: 1656:int stop_lru_maintainer_thread(void) {
    #####: 1657:    int ret;
    #####: 1658:    pthread_mutex_lock(&lru_maintainer_lock);
        -: 1659:    /* LRU thread is a sleep loop, will die on its own */
    #####: 1660:    do_run_lru_maintainer_thread = 0;
    #####: 1661:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1662:    if ((ret = pthread_join(lru_maintainer_tid, NULL)) != 0) {
    #####: 1663:        fprintf(stderr, "Failed to stop LRU maintainer thread: %s\n", strerror(ret));
    #####: 1664:        return -1;
        -: 1665:    }
    #####: 1666:    settings.lru_maintainer_thread = false;
    #####: 1667:    return 0;
        -: 1668:}
------------------
stop_lru_maintainer_thread:
    #####: 1656:int stop_lru_maintainer_thread(void) {
    #####: 1657:    int ret;
    #####: 1658:    pthread_mutex_lock(&lru_maintainer_lock);
        -: 1659:    /* LRU thread is a sleep loop, will die on its own */
    #####: 1660:    do_run_lru_maintainer_thread = 0;
    #####: 1661:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1662:    if ((ret = pthread_join(lru_maintainer_tid, NULL)) != 0) {
    #####: 1663:        fprintf(stderr, "Failed to stop LRU maintainer thread: %s\n", strerror(ret));
    #####: 1664:        return -1;
        -: 1665:    }
    #####: 1666:    settings.lru_maintainer_thread = false;
    #####: 1667:    return 0;
        -: 1668:}
------------------
        -: 1669:
      348: 1670:int start_lru_maintainer_thread(void *arg) {
      348: 1671:    int ret;
        -: 1672:
      348: 1673:    pthread_mutex_lock(&lru_maintainer_lock);
      348: 1674:    do_run_lru_maintainer_thread = 1;
      348: 1675:    settings.lru_maintainer_thread = true;
      348: 1676:    if ((ret = pthread_create(&lru_maintainer_tid, NULL,
        -: 1677:        lru_maintainer_thread, arg)) != 0) {
    #####: 1678:        fprintf(stderr, "Can't create LRU maintainer thread: %s\n",
        -: 1679:            strerror(ret));
    #####: 1680:        pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1681:        return -1;
        -: 1682:    }
      348: 1683:    pthread_mutex_unlock(&lru_maintainer_lock);
        -: 1684:
      348: 1685:    return 0;
        -: 1686:}
------------------
start_lru_maintainer_thread:
       87: 1670:int start_lru_maintainer_thread(void *arg) {
       87: 1671:    int ret;
        -: 1672:
       87: 1673:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1674:    do_run_lru_maintainer_thread = 1;
       87: 1675:    settings.lru_maintainer_thread = true;
       87: 1676:    if ((ret = pthread_create(&lru_maintainer_tid, NULL,
        -: 1677:        lru_maintainer_thread, arg)) != 0) {
    #####: 1678:        fprintf(stderr, "Can't create LRU maintainer thread: %s\n",
        -: 1679:            strerror(ret));
    #####: 1680:        pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1681:        return -1;
        -: 1682:    }
       87: 1683:    pthread_mutex_unlock(&lru_maintainer_lock);
        -: 1684:
       87: 1685:    return 0;
        -: 1686:}
------------------
start_lru_maintainer_thread:
       87: 1670:int start_lru_maintainer_thread(void *arg) {
       87: 1671:    int ret;
        -: 1672:
       87: 1673:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1674:    do_run_lru_maintainer_thread = 1;
       87: 1675:    settings.lru_maintainer_thread = true;
       87: 1676:    if ((ret = pthread_create(&lru_maintainer_tid, NULL,
        -: 1677:        lru_maintainer_thread, arg)) != 0) {
    #####: 1678:        fprintf(stderr, "Can't create LRU maintainer thread: %s\n",
        -: 1679:            strerror(ret));
    #####: 1680:        pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1681:        return -1;
        -: 1682:    }
       87: 1683:    pthread_mutex_unlock(&lru_maintainer_lock);
        -: 1684:
       87: 1685:    return 0;
        -: 1686:}
------------------
start_lru_maintainer_thread:
       87: 1670:int start_lru_maintainer_thread(void *arg) {
       87: 1671:    int ret;
        -: 1672:
       87: 1673:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1674:    do_run_lru_maintainer_thread = 1;
       87: 1675:    settings.lru_maintainer_thread = true;
       87: 1676:    if ((ret = pthread_create(&lru_maintainer_tid, NULL,
        -: 1677:        lru_maintainer_thread, arg)) != 0) {
    #####: 1678:        fprintf(stderr, "Can't create LRU maintainer thread: %s\n",
        -: 1679:            strerror(ret));
    #####: 1680:        pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1681:        return -1;
        -: 1682:    }
       87: 1683:    pthread_mutex_unlock(&lru_maintainer_lock);
        -: 1684:
       87: 1685:    return 0;
        -: 1686:}
------------------
start_lru_maintainer_thread:
       87: 1670:int start_lru_maintainer_thread(void *arg) {
       87: 1671:    int ret;
        -: 1672:
       87: 1673:    pthread_mutex_lock(&lru_maintainer_lock);
       87: 1674:    do_run_lru_maintainer_thread = 1;
       87: 1675:    settings.lru_maintainer_thread = true;
       87: 1676:    if ((ret = pthread_create(&lru_maintainer_tid, NULL,
        -: 1677:        lru_maintainer_thread, arg)) != 0) {
    #####: 1678:        fprintf(stderr, "Can't create LRU maintainer thread: %s\n",
        -: 1679:            strerror(ret));
    #####: 1680:        pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1681:        return -1;
        -: 1682:    }
       87: 1683:    pthread_mutex_unlock(&lru_maintainer_lock);
        -: 1684:
       87: 1685:    return 0;
        -: 1686:}
------------------
        -: 1687:
        -: 1688:/* If we hold this lock, crawler can't wake up or move */
    #####: 1689:void lru_maintainer_pause(void) {
    #####: 1690:    pthread_mutex_lock(&lru_maintainer_lock);
    #####: 1691:}
------------------
lru_maintainer_pause:
    #####: 1689:void lru_maintainer_pause(void) {
    #####: 1690:    pthread_mutex_lock(&lru_maintainer_lock);
    #####: 1691:}
------------------
lru_maintainer_pause:
    #####: 1689:void lru_maintainer_pause(void) {
    #####: 1690:    pthread_mutex_lock(&lru_maintainer_lock);
    #####: 1691:}
------------------
lru_maintainer_pause:
    #####: 1689:void lru_maintainer_pause(void) {
    #####: 1690:    pthread_mutex_lock(&lru_maintainer_lock);
    #####: 1691:}
------------------
lru_maintainer_pause:
    #####: 1689:void lru_maintainer_pause(void) {
    #####: 1690:    pthread_mutex_lock(&lru_maintainer_lock);
    #####: 1691:}
------------------
        -: 1692:
    #####: 1693:void lru_maintainer_resume(void) {
    #####: 1694:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1695:}
------------------
lru_maintainer_resume:
    #####: 1693:void lru_maintainer_resume(void) {
    #####: 1694:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1695:}
------------------
lru_maintainer_resume:
    #####: 1693:void lru_maintainer_resume(void) {
    #####: 1694:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1695:}
------------------
lru_maintainer_resume:
    #####: 1693:void lru_maintainer_resume(void) {
    #####: 1694:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1695:}
------------------
lru_maintainer_resume:
    #####: 1693:void lru_maintainer_resume(void) {
    #####: 1694:    pthread_mutex_unlock(&lru_maintainer_lock);
    #####: 1695:}
------------------
        -: 1696:
      936: 1697:int init_lru_maintainer(void) {
      936: 1698:    if (lru_maintainer_initialized == 0) {
      936: 1699:        pthread_mutex_init(&lru_maintainer_lock, NULL);
      936: 1700:        lru_maintainer_initialized = 1;
        -: 1701:    }
      936: 1702:    return 0;
        -: 1703:}
------------------
init_lru_maintainer:
      234: 1697:int init_lru_maintainer(void) {
      234: 1698:    if (lru_maintainer_initialized == 0) {
      234: 1699:        pthread_mutex_init(&lru_maintainer_lock, NULL);
      234: 1700:        lru_maintainer_initialized = 1;
        -: 1701:    }
      234: 1702:    return 0;
        -: 1703:}
------------------
init_lru_maintainer:
      234: 1697:int init_lru_maintainer(void) {
      234: 1698:    if (lru_maintainer_initialized == 0) {
      234: 1699:        pthread_mutex_init(&lru_maintainer_lock, NULL);
      234: 1700:        lru_maintainer_initialized = 1;
        -: 1701:    }
      234: 1702:    return 0;
        -: 1703:}
------------------
init_lru_maintainer:
      234: 1697:int init_lru_maintainer(void) {
      234: 1698:    if (lru_maintainer_initialized == 0) {
      234: 1699:        pthread_mutex_init(&lru_maintainer_lock, NULL);
      234: 1700:        lru_maintainer_initialized = 1;
        -: 1701:    }
      234: 1702:    return 0;
        -: 1703:}
------------------
init_lru_maintainer:
      234: 1697:int init_lru_maintainer(void) {
      234: 1698:    if (lru_maintainer_initialized == 0) {
      234: 1699:        pthread_mutex_init(&lru_maintainer_lock, NULL);
      234: 1700:        lru_maintainer_initialized = 1;
        -: 1701:    }
      234: 1702:    return 0;
        -: 1703:}
------------------
        -: 1704:
        -: 1705:/* Tail linkers and crawler for the LRU crawler. */
    89792: 1706:void do_item_linktail_q(item *it) { /* item is the new tail */
    89792: 1707:    item **head, **tail;
   89792*: 1708:    assert(it->it_flags == 1);
   89792*: 1709:    assert(it->nbytes == 0);
        -: 1710:
    89792: 1711:    head = &heads[it->slabs_clsid];
    89792: 1712:    tail = &tails[it->slabs_clsid];
        -: 1713:    //assert(*tail != 0);
   89792*: 1714:    assert(it != *tail);
   89792*: 1715:    assert((*head && *tail) || (*head == 0 && *tail == 0));
    89792: 1716:    it->prev = *tail;
    89792: 1717:    it->next = 0;
    89792: 1718:    if (it->prev) {
      12*: 1719:        assert(it->prev->next == 0);
       12: 1720:        it->prev->next = it;
        -: 1721:    }
    89792: 1722:    *tail = it;
    89792: 1723:    if (*head == 0) *head = it;
    89792: 1724:    return;
        -: 1725:}
------------------
do_item_linktail_q:
    22448: 1706:void do_item_linktail_q(item *it) { /* item is the new tail */
    22448: 1707:    item **head, **tail;
   22448*: 1708:    assert(it->it_flags == 1);
   22448*: 1709:    assert(it->nbytes == 0);
        -: 1710:
    22448: 1711:    head = &heads[it->slabs_clsid];
    22448: 1712:    tail = &tails[it->slabs_clsid];
        -: 1713:    //assert(*tail != 0);
   22448*: 1714:    assert(it != *tail);
   22448*: 1715:    assert((*head && *tail) || (*head == 0 && *tail == 0));
    22448: 1716:    it->prev = *tail;
    22448: 1717:    it->next = 0;
    22448: 1718:    if (it->prev) {
       3*: 1719:        assert(it->prev->next == 0);
        3: 1720:        it->prev->next = it;
        -: 1721:    }
    22448: 1722:    *tail = it;
    22448: 1723:    if (*head == 0) *head = it;
    22448: 1724:    return;
        -: 1725:}
------------------
do_item_linktail_q:
    22448: 1706:void do_item_linktail_q(item *it) { /* item is the new tail */
    22448: 1707:    item **head, **tail;
   22448*: 1708:    assert(it->it_flags == 1);
   22448*: 1709:    assert(it->nbytes == 0);
        -: 1710:
    22448: 1711:    head = &heads[it->slabs_clsid];
    22448: 1712:    tail = &tails[it->slabs_clsid];
        -: 1713:    //assert(*tail != 0);
   22448*: 1714:    assert(it != *tail);
   22448*: 1715:    assert((*head && *tail) || (*head == 0 && *tail == 0));
    22448: 1716:    it->prev = *tail;
    22448: 1717:    it->next = 0;
    22448: 1718:    if (it->prev) {
       3*: 1719:        assert(it->prev->next == 0);
        3: 1720:        it->prev->next = it;
        -: 1721:    }
    22448: 1722:    *tail = it;
    22448: 1723:    if (*head == 0) *head = it;
    22448: 1724:    return;
        -: 1725:}
------------------
do_item_linktail_q:
    22448: 1706:void do_item_linktail_q(item *it) { /* item is the new tail */
    22448: 1707:    item **head, **tail;
   22448*: 1708:    assert(it->it_flags == 1);
   22448*: 1709:    assert(it->nbytes == 0);
        -: 1710:
    22448: 1711:    head = &heads[it->slabs_clsid];
    22448: 1712:    tail = &tails[it->slabs_clsid];
        -: 1713:    //assert(*tail != 0);
   22448*: 1714:    assert(it != *tail);
   22448*: 1715:    assert((*head && *tail) || (*head == 0 && *tail == 0));
    22448: 1716:    it->prev = *tail;
    22448: 1717:    it->next = 0;
    22448: 1718:    if (it->prev) {
       3*: 1719:        assert(it->prev->next == 0);
        3: 1720:        it->prev->next = it;
        -: 1721:    }
    22448: 1722:    *tail = it;
    22448: 1723:    if (*head == 0) *head = it;
    22448: 1724:    return;
        -: 1725:}
------------------
do_item_linktail_q:
    22448: 1706:void do_item_linktail_q(item *it) { /* item is the new tail */
    22448: 1707:    item **head, **tail;
   22448*: 1708:    assert(it->it_flags == 1);
   22448*: 1709:    assert(it->nbytes == 0);
        -: 1710:
    22448: 1711:    head = &heads[it->slabs_clsid];
    22448: 1712:    tail = &tails[it->slabs_clsid];
        -: 1713:    //assert(*tail != 0);
   22448*: 1714:    assert(it != *tail);
   22448*: 1715:    assert((*head && *tail) || (*head == 0 && *tail == 0));
    22448: 1716:    it->prev = *tail;
    22448: 1717:    it->next = 0;
    22448: 1718:    if (it->prev) {
       3*: 1719:        assert(it->prev->next == 0);
        3: 1720:        it->prev->next = it;
        -: 1721:    }
    22448: 1722:    *tail = it;
    22448: 1723:    if (*head == 0) *head = it;
    22448: 1724:    return;
        -: 1725:}
------------------
        -: 1726:
    89792: 1727:void do_item_unlinktail_q(item *it) {
    89792: 1728:    item **head, **tail;
    89792: 1729:    head = &heads[it->slabs_clsid];
    89792: 1730:    tail = &tails[it->slabs_clsid];
        -: 1731:
    89792: 1732:    if (*head == it) {
   89784*: 1733:        assert(it->prev == 0);
    89784: 1734:        *head = it->next;
        -: 1735:    }
    89792: 1736:    if (*tail == it) {
   89784*: 1737:        assert(it->next == 0);
    89784: 1738:        *tail = it->prev;
        -: 1739:    }
   89792*: 1740:    assert(it->next != it);
   89792*: 1741:    assert(it->prev != it);
        -: 1742:
    89792: 1743:    if (it->next) it->next->prev = it->prev;
   89792*: 1744:    if (it->prev) it->prev->next = it->next;
    89792: 1745:    return;
        -: 1746:}
------------------
do_item_unlinktail_q:
    22448: 1727:void do_item_unlinktail_q(item *it) {
    22448: 1728:    item **head, **tail;
    22448: 1729:    head = &heads[it->slabs_clsid];
    22448: 1730:    tail = &tails[it->slabs_clsid];
        -: 1731:
    22448: 1732:    if (*head == it) {
   22446*: 1733:        assert(it->prev == 0);
    22446: 1734:        *head = it->next;
        -: 1735:    }
    22448: 1736:    if (*tail == it) {
   22446*: 1737:        assert(it->next == 0);
    22446: 1738:        *tail = it->prev;
        -: 1739:    }
   22448*: 1740:    assert(it->next != it);
   22448*: 1741:    assert(it->prev != it);
        -: 1742:
    22448: 1743:    if (it->next) it->next->prev = it->prev;
   22448*: 1744:    if (it->prev) it->prev->next = it->next;
    22448: 1745:    return;
        -: 1746:}
------------------
do_item_unlinktail_q:
    22448: 1727:void do_item_unlinktail_q(item *it) {
    22448: 1728:    item **head, **tail;
    22448: 1729:    head = &heads[it->slabs_clsid];
    22448: 1730:    tail = &tails[it->slabs_clsid];
        -: 1731:
    22448: 1732:    if (*head == it) {
   22446*: 1733:        assert(it->prev == 0);
    22446: 1734:        *head = it->next;
        -: 1735:    }
    22448: 1736:    if (*tail == it) {
   22446*: 1737:        assert(it->next == 0);
    22446: 1738:        *tail = it->prev;
        -: 1739:    }
   22448*: 1740:    assert(it->next != it);
   22448*: 1741:    assert(it->prev != it);
        -: 1742:
    22448: 1743:    if (it->next) it->next->prev = it->prev;
   22448*: 1744:    if (it->prev) it->prev->next = it->next;
    22448: 1745:    return;
        -: 1746:}
------------------
do_item_unlinktail_q:
    22448: 1727:void do_item_unlinktail_q(item *it) {
    22448: 1728:    item **head, **tail;
    22448: 1729:    head = &heads[it->slabs_clsid];
    22448: 1730:    tail = &tails[it->slabs_clsid];
        -: 1731:
    22448: 1732:    if (*head == it) {
   22446*: 1733:        assert(it->prev == 0);
    22446: 1734:        *head = it->next;
        -: 1735:    }
    22448: 1736:    if (*tail == it) {
   22446*: 1737:        assert(it->next == 0);
    22446: 1738:        *tail = it->prev;
        -: 1739:    }
   22448*: 1740:    assert(it->next != it);
   22448*: 1741:    assert(it->prev != it);
        -: 1742:
    22448: 1743:    if (it->next) it->next->prev = it->prev;
   22448*: 1744:    if (it->prev) it->prev->next = it->next;
    22448: 1745:    return;
        -: 1746:}
------------------
do_item_unlinktail_q:
    22448: 1727:void do_item_unlinktail_q(item *it) {
    22448: 1728:    item **head, **tail;
    22448: 1729:    head = &heads[it->slabs_clsid];
    22448: 1730:    tail = &tails[it->slabs_clsid];
        -: 1731:
    22448: 1732:    if (*head == it) {
   22446*: 1733:        assert(it->prev == 0);
    22446: 1734:        *head = it->next;
        -: 1735:    }
    22448: 1736:    if (*tail == it) {
   22446*: 1737:        assert(it->next == 0);
    22446: 1738:        *tail = it->prev;
        -: 1739:    }
   22448*: 1740:    assert(it->next != it);
   22448*: 1741:    assert(it->prev != it);
        -: 1742:
    22448: 1743:    if (it->next) it->next->prev = it->prev;
   22448*: 1744:    if (it->prev) it->prev->next = it->next;
    22448: 1745:    return;
        -: 1746:}
------------------
        -: 1747:
        -: 1748:/* This is too convoluted, but it's a difficult shuffle. Try to rewrite it
        -: 1749: * more clearly. */
    90512: 1750:item *do_item_crawl_q(item *it) {
    90512: 1751:    item **head, **tail;
   90512*: 1752:    assert(it->it_flags == 1);
   90512*: 1753:    assert(it->nbytes == 0);
    90512: 1754:    head = &heads[it->slabs_clsid];
    90512: 1755:    tail = &tails[it->slabs_clsid];
        -: 1756:
        -: 1757:    /* We've hit the head, pop off */
    90512: 1758:    if (it->prev == 0) {
   89792*: 1759:        assert(*head == it);
    89792: 1760:        if (it->next) {
        8: 1761:            *head = it->next;
       8*: 1762:            assert(it->next->prev == it);
        8: 1763:            it->next->prev = 0;
        -: 1764:        }
    89792: 1765:        return NULL; /* Done */
        -: 1766:    }
        -: 1767:
        -: 1768:    /* Swing ourselves in front of the next item */
        -: 1769:    /* NB: If there is a prev, we can't be the head */
     720*: 1770:    assert(it->prev != it);
      720: 1771:    if (it->prev) {
      720: 1772:        if (*head == it->prev) {
        -: 1773:            /* Prev was the head, now we're the head */
       12: 1774:            *head = it;
        -: 1775:        }
      720: 1776:        if (*tail == it) {
        -: 1777:            /* We are the tail, now they are the tail */
      128: 1778:            *tail = it->prev;
        -: 1779:        }
     720*: 1780:        assert(it->next != it);
      720: 1781:        if (it->next) {
     592*: 1782:            assert(it->prev->next == it);
      592: 1783:            it->prev->next = it->next;
      592: 1784:            it->next->prev = it->prev;
        -: 1785:        } else {
        -: 1786:            /* Tail. Move this above? */
      128: 1787:            it->prev->next = 0;
        -: 1788:        }
        -: 1789:        /* prev->prev's next is it->prev */
      720: 1790:        it->next = it->prev;
      720: 1791:        it->prev = it->next->prev;
      720: 1792:        it->next->prev = it;
        -: 1793:        /* New it->prev now, if we're not at the head. */
      720: 1794:        if (it->prev) {
      708: 1795:            it->prev->next = it;
        -: 1796:        }
        -: 1797:    }
     720*: 1798:    assert(it->next != it);
     720*: 1799:    assert(it->prev != it);
        -: 1800:
        -: 1801:    return it->next; /* success */
        -: 1802:}
