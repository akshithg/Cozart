Starting redis #0 at port 30000
Starting redis #1 at port 30001
Starting redis #2 at port 30002
Starting redis #3 at port 30003
Starting redis #4 at port 30004
Starting redis #5 at port 30005
Starting redis #6 at port 30006
Starting redis #7 at port 30007
Starting redis #8 at port 30008
Starting redis #9 at port 30009
Starting redis #10 at port 30010
Starting redis #11 at port 30011
Starting redis #12 at port 30012
Starting redis #13 at port 30013
Starting redis #14 at port 30014
Starting redis #15 at port 30015
Starting redis #16 at port 30016
Starting redis #17 at port 30017
Starting redis #18 at port 30018
Starting redis #19 at port 30019
Testing unit: 00-base.tcl
19:53:21> (init) Restart killed instances: OK
19:53:21> Cluster nodes are reachable: OK
19:53:21> Cluster nodes hard reset: OK
19:53:22> Cluster Join and auto-discovery test: OK
19:53:26> Before slots allocation, all nodes report cluster failure: OK
19:53:26> Different nodes have different IDs: OK
19:53:26> It is possible to perform slot allocation: OK
19:53:27> After the join, every node gets a different config epoch: .OK
19:53:28> Nodes should report cluster_state is ok now: OK
19:53:30> It is possible to write and read from the cluster: OK
Testing unit: 01-faildet.tcl
19:53:30> (init) Restart killed instances: OK
19:53:30> Cluster nodes are reachable: OK
19:53:30> Cluster nodes hard reset: OK
19:53:32> Cluster Join and auto-discovery test: OK
19:53:35> Before slots allocation, all nodes report cluster failure: OK
19:53:36> Create a 5 nodes cluster: OK
19:53:39> Cluster should start ok: OK
19:53:39> Killing two slave nodes: OK
19:53:40> Cluster should be still up: OK
19:53:40> Killing one master node: OK
19:53:41> Cluster should be down now: OK
19:53:44> Restarting master node: OK
19:53:44> Cluster should be up again: OK
Testing unit: 02-failover.tcl
19:53:50> (init) Restart killed instances: redis/5 redis/6 OK
19:53:50> Cluster nodes are reachable: OK
19:53:50> Cluster nodes hard reset: OK
19:53:52> Cluster Join and auto-discovery test: OK
19:53:55> Before slots allocation, all nodes report cluster failure: OK
19:53:55> Create a 5 nodes cluster: OK
19:53:58> Cluster is up: OK
19:53:58> Cluster is writable: OK
19:53:58> Instance #5 is a slave: OK
19:53:58> Instance #5 synced with the master: OK
19:53:58> Killing one master node: OK
19:53:59> Wait for failover: OK
19:54:02> Cluster should eventually be up again: OK
19:54:03> Cluster is writable: OK
19:54:03> Instance #5 is now a master: OK
19:54:03> Restarting the previously killed master node: OK
19:54:03> Instance #0 gets converted into a slave: OK
Testing unit: 03-failover-loop.tcl
19:54:03> (init) Restart killed instances: OK
19:54:03> Cluster nodes are reachable: OK
19:54:03> Cluster nodes hard reset: OK
19:54:05> Cluster Join and auto-discovery test: OK
19:54:08> Before slots allocation, all nodes report cluster failure: OK
19:54:09> Create a 5 nodes cluster: OK
19:54:12> Cluster is up: OK
--- Iteration 19 ---
19:54:12> Wait for slave of #0 to sync: OK
19:54:12> Cluster is writable before failover: OK
19:54:12> Killing node #0: OK
19:54:13> Wait failover by #5 with old epoch 1: OK
19:54:17> Cluster should eventually be up again: OK
19:54:17> Cluster is writable again: OK
19:54:18> Restarting node #0: OK
19:54:18> Instance #0 is now a slave: OK
19:54:18> We can read back the value we set before: OK
--- Iteration 18 ---
19:54:18> Wait for slave of #2 to sync: OK
19:54:18> Cluster is writable before failover: OK
19:54:18> Killing node #2: OK
19:54:19> Wait failover by #7 with old epoch 3: OK
19:54:23> Cluster should eventually be up again: OK
19:54:23> Cluster is writable again: OK
19:54:23> Restarting node #2: OK
19:54:24> Instance #2 is now a slave: OK
19:54:24> We can read back the value we set before: OK
--- Iteration 17 ---
19:54:24> Cluster is writable before failover: OK
19:54:24> Killing node #9: OK
19:54:25> Cluster should eventually be up again: OK
19:54:25> Cluster is writable again: OK
19:54:25> Restarting node #9: OK
19:54:25> Instance #9 is now a slave: OK
19:54:25> We can read back the value we set before: OK
--- Iteration 16 ---
19:54:25> Wait for slave of #7 to sync: OK
19:54:25> Cluster is writable before failover: OK
19:54:25> Killing node #7: OK
19:54:26> Wait failover by #2 with old epoch 22: OK
19:54:30> Cluster should eventually be up again: OK
19:54:30> Cluster is writable again: OK
19:54:30> Restarting node #7: OK
19:54:30> Instance #7 is now a slave: OK
19:54:30> We can read back the value we set before: OK
--- Iteration 15 ---
19:54:30> Cluster is writable before failover: OK
19:54:30> Killing node #6: OK
19:54:31> Cluster should eventually be up again: OK
19:54:31> Cluster is writable again: OK
19:54:31> Restarting node #6: OK
19:54:31> Instance #6 is now a slave: OK
19:54:31> We can read back the value we set before: OK
--- Iteration 14 ---
19:54:32> Wait for slave of #3 to sync: OK
19:54:32> Cluster is writable before failover: OK
19:54:32> Killing node #3: OK
19:54:33> Wait failover by #8 with old epoch 4: OK
19:54:36> Cluster should eventually be up again: OK
19:54:36> Cluster is writable again: OK
19:54:37> Restarting node #3: OK
19:54:37> Instance #3 is now a slave: OK
19:54:37> We can read back the value we set before: OK
--- Iteration 13 ---
19:54:37> Wait for slave of #5 to sync: OK
19:54:37> Cluster is writable before failover: OK
19:54:37> Killing node #5: OK
19:54:38> Wait failover by #0 with old epoch 21: OK
19:54:41> Cluster should eventually be up again: OK
19:54:42> Cluster is writable again: OK
19:54:42> Restarting node #5: OK
19:54:42> Instance #5 is now a slave: OK
19:54:42> We can read back the value we set before: OK
--- Iteration 12 ---
19:54:42> Wait for slave of #4 to sync: OK
19:54:42> Cluster is writable before failover: OK
19:54:43> Killing node #4: OK
19:54:44> Wait failover by #9 with old epoch 5: OK
19:54:47> Cluster should eventually be up again: OK
19:54:47> Cluster is writable again: OK
19:54:47> Restarting node #4: OK
19:54:47> Instance #4 is now a slave: OK
19:54:47> We can read back the value we set before: OK
--- Iteration 11 ---
19:54:48> Cluster is writable before failover: OK
19:54:48> Killing node #3: OK
19:54:49> Cluster should eventually be up again: OK
19:54:49> Cluster is writable again: OK
19:54:49> Restarting node #3: OK
19:54:49> Instance #3 is now a slave: OK
19:54:49> We can read back the value we set before: OK
--- Iteration 10 ---
19:54:49> Wait for slave of #2 to sync: OK
19:54:49> Cluster is writable before failover: OK
19:54:49> Killing node #2: OK
19:54:50> Wait failover by #7 with old epoch 23: OK
19:54:54> Cluster should eventually be up again: OK
19:54:54> Cluster is writable again: OK
19:54:54> Restarting node #2: OK
19:54:54> Instance #2 is now a slave: OK
19:54:54> We can read back the value we set before: OK
--- Iteration 9 ---
19:54:55> Wait for slave of #9 to sync: OK
19:54:55> Cluster is writable before failover: OK
19:54:55> Killing node #9: OK
19:54:56> Wait failover by #4 with old epoch 26: OK
19:55:00> Cluster should eventually be up again: OK
19:55:00> Cluster is writable again: OK
19:55:00> Restarting node #9: OK
19:55:00> Instance #9 is now a slave: OK
19:55:00> We can read back the value we set before: OK
--- Iteration 8 ---
19:55:01> Wait for slave of #8 to sync: OK
19:55:01> Cluster is writable before failover: OK
19:55:01> Killing node #8: OK
19:55:02> Wait failover by #3 with old epoch 24: OK
19:55:05> Cluster should eventually be up again: OK
19:55:06> Cluster is writable again: OK
19:55:06> Restarting node #8: OK
19:55:06> Instance #8 is now a slave: OK
19:55:06> We can read back the value we set before: OK
--- Iteration 7 ---
19:55:06> Cluster is writable before failover: OK
19:55:06> Killing node #8: OK
19:55:07> Cluster should eventually be up again: OK
19:55:07> Cluster is writable again: OK
19:55:07> Restarting node #8: OK
19:55:07> Instance #8 is now a slave: OK
19:55:07> We can read back the value we set before: OK
--- Iteration 6 ---
19:55:07> Wait for slave of #4 to sync: OK
19:55:07> Cluster is writable before failover: OK
19:55:07> Killing node #4: OK
19:55:08> Wait failover by #9 with old epoch 28: OK
19:55:12> Cluster should eventually be up again: OK
19:55:12> Cluster is writable again: OK
19:55:12> Restarting node #4: OK
19:55:12> Instance #4 is now a slave: OK
19:55:12> We can read back the value we set before: OK
--- Iteration 5 ---
19:55:13> Cluster is writable before failover: OK
19:55:13> Killing node #2: OK
19:55:14> Cluster should eventually be up again: OK
19:55:14> Cluster is writable again: OK
19:55:14> Restarting node #2: OK
19:55:14> Instance #2 is now a slave: OK
19:55:14> We can read back the value we set before: OK
--- Iteration 4 ---
19:55:14> Cluster is writable before failover: OK
19:55:14> Killing node #6: OK
19:55:15> Cluster should eventually be up again: OK
19:55:15> Cluster is writable again: OK
19:55:15> Restarting node #6: OK
19:55:15> Instance #6 is now a slave: OK
19:55:15> We can read back the value we set before: OK
--- Iteration 3 ---
19:55:15> Cluster is writable before failover: OK
19:55:15> Killing node #8: OK
19:55:16> Cluster should eventually be up again: OK
19:55:16> Cluster is writable again: OK
19:55:16> Restarting node #8: OK
19:55:16> Instance #8 is now a slave: OK
19:55:16> We can read back the value we set before: OK
--- Iteration 2 ---
19:55:16> Wait for slave of #3 to sync: OK
19:55:17> Cluster is writable before failover: OK
19:55:17> Killing node #3: OK
19:55:18> Wait failover by #8 with old epoch 29: OK
19:55:21> Cluster should eventually be up again: OK
19:55:22> Cluster is writable again: OK
19:55:22> Restarting node #3: OK
19:55:22> Instance #3 is now a slave: OK
19:55:22> We can read back the value we set before: OK
--- Iteration 1 ---
19:55:22> Cluster is writable before failover: OK
19:55:22> Killing node #3: OK
19:55:22> Cluster should eventually be up again: OK
19:55:22> Cluster is writable again: OK
19:55:22> Restarting node #3: OK
19:55:22> Instance #3 is now a slave: OK
19:55:22> We can read back the value we set before: OK
19:55:22> Post condition: current_epoch >= my_epoch everywhere: OK
Testing unit: 04-resharding.tcl
19:55:22> (init) Restart killed instances: OK
19:55:22> Cluster nodes are reachable: OK
19:55:22> Cluster nodes hard reset: OK
19:55:24> Cluster Join and auto-discovery test: OK
19:55:27> Before slots allocation, all nodes report cluster failure: OK
19:55:27> Create a 5 nodes cluster: OK
19:55:31> Cluster is up: OK
19:55:31> Enable AOF in all the instances: OK
19:55:31> Cluster consistency during live resharding: WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWW...Starting resharding.../usr/bin/env: 'ruby': No such file or directory
WWWWWWWWWWOK
19:56:00> Verify 50000 keys for consistency with logical content: OK
19:56:06> Crash and restart all the instances: OK
19:56:27> Cluster should eventually be up again: OK
19:56:29> Verify 50000 keys after the crash & restart: OK
19:56:35> Disable AOF in all the instances: OK
19:56:35> Verify slaves consistency: OK
Testing unit: 05-slave-selection.tcl
19:56:37> (init) Restart killed instances: OK
19:56:37> Cluster nodes are reachable: OK
19:56:37> Cluster nodes hard reset: OK
19:56:38> Cluster Join and auto-discovery test: OK
19:56:42> Before slots allocation, all nodes report cluster failure: OK
19:56:42> Create a 5 nodes cluster: OK
19:56:45> Cluster is up: OK
19:56:45> The first master has actually two slaves: OK
19:56:45> Slaves of #0 are instance #5 and #10 as expected: OK
19:56:45> Instance #5 and #10 synced with the master: OK
19:56:45> Slaves are both able to receive and acknowledge writes: OK
19:56:45> Write data while slave #10 is paused and can't receive it: OK
19:56:56> Wait for instance #5 (and not #10) to turn into a master: OK
19:57:00> Wait for the node #10 to return alive before ending the test: OK
19:57:00> Cluster should eventually be up again: OK
19:57:00> Node #10 should eventually replicate node #5: OK
Testing unit: 06-slave-stop-cond.tcl
19:57:00> (init) Restart killed instances: redis/0 OK
19:57:00> Cluster nodes are reachable: OK
19:57:01> Cluster nodes hard reset: OK
19:57:02> Cluster Join and auto-discovery test: OK
19:57:06> Before slots allocation, all nodes report cluster failure: OK
19:57:06> Create a 5 nodes cluster: OK
19:57:09> Cluster is up: OK
19:57:09> The first master has actually one slave: OK
19:57:09> Slaves of #0 is instance #5 as expected: OK
19:57:09> Instance #5 synced with the master: OK
19:57:09> Lower the slave validity factor of #5 to the value of 2: OK
19:57:09> Break master-slave link and prevent further reconnections: OK
19:57:30> Slave #5 is reachable and alive: OK
19:57:30> Slave #5 should not be able to failover: OK
19:57:40> Cluster should be down: OK
Testing unit: 07-replica-migration.tcl
19:57:40> (init) Restart killed instances: redis/0 OK
19:57:40> Cluster nodes are reachable: OK
19:57:40> Cluster nodes hard reset: OK
19:57:42> Cluster Join and auto-discovery test: OK
19:57:45> Before slots allocation, all nodes report cluster failure: OK
19:57:45> Create a 5 nodes cluster: OK
19:57:48> Cluster is up: OK
19:57:48> Each master should have two replicas attached: OK
19:57:48> Killing all the slaves of master #0 and #1: OK
19:57:56> Master #0 should have at least one replica: OK
19:57:59> Master #1 should have at least one replica: OK
19:58:00> Master #2 should have at least one replica: OK
19:58:00> Master #3 should have at least one replica: OK
19:58:00> Master #4 should have at least one replica: OK
19:58:00> (init) Restart killed instances: redis/5 redis/6 redis/10 redis/11 OK
19:58:00> Cluster nodes are reachable: OK
19:58:00> Cluster nodes hard reset: OK
19:58:01> Cluster Join and auto-discovery test: OK
19:58:06> Before slots allocation, all nodes report cluster failure: OK
19:58:06> Create a 5 nodes cluster: OK
19:58:09> Cluster is up: OK
19:58:09> Kill slave #7 of master #2. Only slave left is #12 now: OK
19:58:10> Killing master node #2, #12 should failover: OK
19:58:11> Wait for failover: OK
19:58:15> Cluster should eventually be up again: OK
19:58:15> Cluster is writable: OK
19:58:15> Instance 12 is now a master without slaves: OK
19:58:15> Master #12 should get at least one migrated replica: OK
Testing unit: 08-update-msg.tcl
19:58:21> (init) Restart killed instances: redis/2 redis/7 OK
19:58:22> Cluster nodes are reachable: OK
19:58:22> Cluster nodes hard reset: OK
19:58:23> Cluster Join and auto-discovery test: OK
19:58:26> Before slots allocation, all nodes report cluster failure: OK
19:58:26> Create a 5 nodes cluster: OK
19:58:30> Cluster is up: OK
19:58:30> Cluster is writable: OK
19:58:31> Instance #5 is a slave: OK
19:58:31> Instance #5 synced with the master: OK
19:58:31> Killing one master node: OK
19:58:32> Wait for failover: OK
19:58:35> Cluster should eventually be up again: OK
19:58:35> Cluster is writable: OK
19:58:35> Instance #5 is now a master: OK
19:58:35> Killing the new master #5: OK
19:58:35> Cluster should be down now: OK
19:58:39> Restarting the old master node: OK
19:58:39> Instance #0 gets converted into a slave: OK
19:58:39> Restarting the new master node: OK
19:58:39> Cluster is up again: OK
Testing unit: 09-pubsub.tcl
19:58:46> (init) Restart killed instances: OK
19:58:46> Cluster nodes are reachable: OK
19:58:46> Cluster nodes hard reset: OK
19:58:47> Cluster Join and auto-discovery test: OK
19:58:51> Before slots allocation, all nodes report cluster failure: OK
19:58:51> Create a 5 nodes cluster: OK
19:58:55> Test publishing to master: OK
19:58:55> Test publishing to slave: OK
Testing unit: 10-manual-failover.tcl
19:58:55> (init) Restart killed instances: OK
19:58:55> Cluster nodes are reachable: OK
19:58:55> Cluster nodes hard reset: OK
19:58:57> Cluster Join and auto-discovery test: OK
19:59:00> Before slots allocation, all nodes report cluster failure: OK
19:59:00> Create a 5 nodes cluster: OK
19:59:04> Cluster is up: OK
19:59:04> Cluster is writable: OK
19:59:04> Instance #5 is a slave: OK
19:59:04> Instance #5 synced with the master: OK
19:59:04> Send CLUSTER FAILOVER to #5, during load: WWWWWWWWWWOK
19:59:08> Wait for failover: OK
19:59:08> Cluster should eventually be up again: OK
19:59:08> Cluster is writable: OK
19:59:08> Instance #5 is now a master: OK
19:59:08> Verify 50000 keys for consistency with logical content: OK
19:59:09> Instance #0 gets converted into a slave: OK
19:59:09> (init) Restart killed instances: OK
19:59:09> Cluster nodes are reachable: OK
19:59:09> Cluster nodes hard reset: OK
19:59:10> Cluster Join and auto-discovery test: OK
19:59:15> Before slots allocation, all nodes report cluster failure: OK
19:59:15> Create a 5 nodes cluster: OK
19:59:18> Cluster is up: OK
19:59:18> Cluster is writable: OK
19:59:18> Instance #5 is a slave: OK
19:59:18> Instance #5 synced with the master: OK
19:59:18> Make instance #0 unreachable without killing it: OK
19:59:18> Send CLUSTER FAILOVER to instance #5: OK
19:59:18> Instance #5 is still a slave after some time (no failover): OK
19:59:23> Wait for instance #0 to return back alive: OK
19:59:28> (init) Restart killed instances: OK
19:59:28> Cluster nodes are reachable: OK
19:59:29> Cluster nodes hard reset: OK
19:59:30> Cluster Join and auto-discovery test: OK
19:59:34> Before slots allocation, all nodes report cluster failure: OK
19:59:34> Create a 5 nodes cluster: OK
19:59:37> Cluster is up: OK
19:59:37> Cluster is writable: OK
19:59:37> Instance #5 is a slave: OK
19:59:37> Instance #5 synced with the master: OK
19:59:37> Make instance #0 unreachable without killing it: OK
19:59:37> Send CLUSTER FAILOVER to instance #5: OK
19:59:37> Instance #5 is a master after some time: OK
19:59:38> Wait for instance #0 to return back alive: OK
Testing unit: 11-manual-takeover.tcl
19:59:47> (init) Restart killed instances: OK
19:59:47> Cluster nodes are reachable: OK
19:59:48> Cluster nodes hard reset: OK
19:59:49> Cluster Join and auto-discovery test: OK
19:59:53> Before slots allocation, all nodes report cluster failure: OK
19:59:53> Create a 5 nodes cluster: OK
19:59:57> Cluster is up: OK
19:59:57> Cluster is writable: OK
19:59:57> Killing majority of master nodes: OK
20:00:00> Cluster should eventually be down: OK
20:00:01> Use takeover to bring slaves back: OK
20:00:01> Cluster should eventually be up again: OK
20:00:02> Cluster is writable: OK
20:00:02> Instance #5, #6, #7 are now masters: OK
20:00:02> Restarting the previously killed master nodes: OK
20:00:03> Instance #0, #1, #2 gets converted into a slaves: OK
Testing unit: 12-replica-migration-2.tcl
20:00:03> (init) Restart killed instances: OK
20:00:03> Cluster nodes are reachable: OK
20:00:03> Cluster nodes hard reset: OK
20:00:05> Cluster Join and auto-discovery test: OK
20:00:08> Before slots allocation, all nodes report cluster failure: OK
20:00:08> Create a 5 nodes cluster: OK
20:00:12> Cluster is up: OK
20:00:12> Each master should have at least two replicas attached: OK
20:00:12> Resharding all the master #0 slots away from it: /usr/bin/env: 'ruby': No such file or directory
    while executing
"exec  ../../../src/redis-trib.rb rebalance  --weight ${master0_id}=0  127.0.0.1:[get_instance_attrib redis 0 port] >@ stdout"
    ("uplevel" body line 2)
    invoked from within
"uplevel 1 $code"
    (procedure "test" line 6)
    invoked from within
"test "Resharding all the master #0 slots away from it" {
    set output [exec \
        ../../../src/redis-trib.rb rebalance \
        --weight ${mast..."
    (file "../tests/12-replica-migration-2.tcl" line 32)
    invoked from within
"source $test"
    (procedure "run_tests" line 9)
    invoked from within
"run_tests"
    (procedure "main" line 7)
    invoked from within
"main"
Cleaning up...
